ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"stm32h7xx_hal_adc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.LL_ADC_SetCommonClock,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	LL_ADC_SetCommonClock:
  25              	.LFB145:
  26              		.file 1 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
   1:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
   2:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ******************************************************************************
   3:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @file    stm32h7xx_ll_adc.h
   4:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @author  MCD Application Team
   5:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief   Header file of ADC LL module.
   6:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ******************************************************************************
   7:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @attention
   8:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
   9:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * Copyright (c) 2017 STMicroelectronics.
  10:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * All rights reserved.
  11:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
  12:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * in the root directory of this software component.
  14:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
  16:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ******************************************************************************
  17:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
  18:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  19:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  20:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #ifndef STM32H7xx_LL_ADC_H
  21:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define STM32H7xx_LL_ADC_H
  22:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  23:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #ifdef __cplusplus
  24:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** extern "C" {
  25:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
  26:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  27:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Includes ------------------------------------------------------------------*/
  28:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #include "stm32h7xx.h"
  29:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  30:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @addtogroup STM32H7xx_LL_Driver
  31:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
  32:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 2


  33:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  34:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined (ADC1) || defined (ADC2) || defined (ADC3)
  35:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  36:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL ADC
  37:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
  38:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
  39:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  40:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Private types -------------------------------------------------------------*/
  41:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Private variables ---------------------------------------------------------*/
  42:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  43:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Private constants ---------------------------------------------------------*/
  44:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_Private_Constants ADC Private Constants
  45:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
  46:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
  47:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  48:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC calibration:                                         */
  49:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal register offset for ADC calibration factors configuration */
  50:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  51:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literals LL_ADC_CALIB_OFFSET, LL_ADC_CALIB_LINEARITY, ...   */
  52:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* the relevant bits for:                                                     */
  53:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (concatenation of multiple bits used in different registers)               */
  54:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - ADC calibration configuration: configuration before calibration start    */
  55:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - ADC calibration factors: register offset                                 */
  56:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CALIB_FACTOR_OFFSET_REGOFFSET    (0x00000000UL) /* Register CALFACT defined as referenc
  57:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CALIB_FACTOR_LINEARITY_REGOFFSET (0x00000001UL) /* Register CALFACT2 offset vs register
  58:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CALIB_FACTOR_REGOFFSET_MASK      (ADC_CALIB_FACTOR_OFFSET_REGOFFSET | ADC_CALIB_FACTOR_
  59:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CALIB_MODE_MASK                  (ADC_CR_ADCALLIN)
  60:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CALIB_MODE_BINARY_MASK           (ADC_CALIB_FACTOR_REGOFFSET_MASK) /* Mask to get binar
  61:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  62:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  63:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC group regular sequencer:                             */
  64:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literal LL_ADC_REG_RANK_x the relevant bits for:            */
  65:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - sequencer register offset                                                */
  66:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - sequencer rank bits position into the selected register                  */
  67:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  68:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal register offset for ADC group regular sequencer configuration */
  69:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (offset placed into a spare area of literal definition) */
  70:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SQR1_REGOFFSET                 (0x00000000UL)
  71:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SQR2_REGOFFSET                 (0x00000100UL)
  72:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SQR3_REGOFFSET                 (0x00000200UL)
  73:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SQR4_REGOFFSET                 (0x00000300UL)
  74:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  75:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_SQRX_REGOFFSET_MASK        (ADC_SQR1_REGOFFSET | ADC_SQR2_REGOFFSET | ADC_SQR3_REGO
  76:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SQRX_REGOFFSET_POS             (8UL) /* Position of bits ADC_SQRx_REGOFFSET in ADC_REG_
  77:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_ID_SQRX_MASK          (ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0)
  78:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  79:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Definition of ADC group regular sequencer bits information to be inserted  */
  80:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* into ADC group regular sequencer ranks literals definition.                */
  81:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_1_SQRX_BITOFFSET_POS  ( 6UL) /* Value equivalent to bitfield "ADC_SQR1_SQ1" po
  82:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_2_SQRX_BITOFFSET_POS  (12UL) /* Value equivalent to bitfield "ADC_SQR1_SQ2" po
  83:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_3_SQRX_BITOFFSET_POS  (18UL) /* Value equivalent to bitfield "ADC_SQR1_SQ3" po
  84:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_4_SQRX_BITOFFSET_POS  (24UL) /* Value equivalent to bitfield "ADC_SQR1_SQ4" po
  85:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_5_SQRX_BITOFFSET_POS  ( 0UL) /* Value equivalent to bitfield "ADC_SQR2_SQ5" po
  86:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_6_SQRX_BITOFFSET_POS  ( 6UL) /* Value equivalent to bitfield "ADC_SQR2_SQ6" po
  87:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_7_SQRX_BITOFFSET_POS  (12UL) /* Value equivalent to bitfield "ADC_SQR2_SQ7" po
  88:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_8_SQRX_BITOFFSET_POS  (18UL) /* Value equivalent to bitfield "ADC_SQR2_SQ8" po
  89:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_9_SQRX_BITOFFSET_POS  (24UL) /* Value equivalent to bitfield "ADC_SQR2_SQ9" po
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 3


  90:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_10_SQRX_BITOFFSET_POS ( 0UL) /* Value equivalent to bitfield "ADC_SQR3_SQ10" p
  91:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_11_SQRX_BITOFFSET_POS ( 6UL) /* Value equivalent to bitfield "ADC_SQR3_SQ11" p
  92:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_12_SQRX_BITOFFSET_POS (12UL) /* Value equivalent to bitfield "ADC_SQR3_SQ12" p
  93:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_13_SQRX_BITOFFSET_POS (18UL) /* Value equivalent to bitfield "ADC_SQR3_SQ13" p
  94:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_14_SQRX_BITOFFSET_POS (24UL) /* Value equivalent to bitfield "ADC_SQR3_SQ14" p
  95:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_15_SQRX_BITOFFSET_POS ( 0UL) /* Value equivalent to bitfield "ADC_SQR4_SQ15" p
  96:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_16_SQRX_BITOFFSET_POS ( 6UL) /* Value equivalent to bitfield "ADC_SQR4_SQ16" p
  97:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  98:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  99:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 100:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC group injected sequencer:                            */
 101:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literal LL_ADC_INJ_RANK_x the relevant bits for:            */
 102:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - data register offset                                                     */
 103:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - sequencer rank bits position into the selected register                  */
 104:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 105:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal register offset for ADC group injected data register */
 106:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (offset placed into a spare area of literal definition) */
 107:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_JDR1_REGOFFSET                 (0x00000000UL)
 108:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_JDR2_REGOFFSET                 (0x00000100UL)
 109:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_JDR3_REGOFFSET                 (0x00000200UL)
 110:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_JDR4_REGOFFSET                 (0x00000300UL)
 111:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 112:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_JDRX_REGOFFSET_MASK        (ADC_JDR1_REGOFFSET | ADC_JDR2_REGOFFSET | ADC_JDR3_REGO
 113:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_RANK_ID_JSQR_MASK          (ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0)
 114:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_JDRX_REGOFFSET_POS             (8UL) /* Position of bits ADC_JDRx_REGOFFSET in ADC_INJ_
 115:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 116:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Definition of ADC group injected sequencer bits information to be inserted */
 117:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* into ADC group injected sequencer ranks literals definition.               */
 118:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_RANK_1_JSQR_BITOFFSET_POS  (ADC_JSQR_JSQ1_Pos)
 119:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_RANK_2_JSQR_BITOFFSET_POS  (ADC_JSQR_JSQ2_Pos)
 120:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_RANK_3_JSQR_BITOFFSET_POS  (ADC_JSQR_JSQ3_Pos)
 121:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_RANK_4_JSQR_BITOFFSET_POS  (ADC_JSQR_JSQ4_Pos)
 122:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 123:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 124:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 125:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC group regular trigger:                               */
 126:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literal LL_ADC_REG_TRIG_x the relevant bits for:            */
 127:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - regular trigger source                                                   */
 128:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - regular trigger edge                                                     */
 129:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_TRIG_EXT_EDGE_DEFAULT       (ADC_CFGR_EXTEN_0) /* Trigger edge set to rising edge (
 130:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 131:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Mask containing trigger source masks for each of possible                  */
 132:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
 133:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
 134:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_TRIG_SOURCE_MASK            (((LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTSEL) << (4U *
 135:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_CFGR_EXTSEL)                            << (4U *
 136:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_CFGR_EXTSEL)                            << (4U *
 137:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_CFGR_EXTSEL)                            << (4U *
 138:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 139:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Mask containing trigger edge masks for each of possible                    */
 140:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
 141:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
 142:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_TRIG_EDGE_MASK              (((LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN) << (4U * 
 143:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_REG_TRIG_EXT_EDGE_DEFAULT)             << (4U * 
 144:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_REG_TRIG_EXT_EDGE_DEFAULT)             << (4U * 
 145:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_REG_TRIG_EXT_EDGE_DEFAULT)             << (4U * 
 146:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 4


 147:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Definition of ADC group regular trigger bits information.                  */
 148:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_TRIG_EXTSEL_BITOFFSET_POS  ( 6UL) /* Value equivalent to bitfield "ADC_CFGR_EXTSEL"
 149:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_TRIG_EXTEN_BITOFFSET_POS   (10UL) /* Value equivalent to bitfield "ADC_CFGR_EXTEN" 
 150:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 151:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 152:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 153:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC group injected trigger:                              */
 154:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literal LL_ADC_INJ_TRIG_x the relevant bits for:            */
 155:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - injected trigger source                                                  */
 156:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - injected trigger edge                                                    */
 157:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_TRIG_EXT_EDGE_DEFAULT      (ADC_JSQR_JEXTEN_0) /* Trigger edge set to rising edge (
 158:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 159:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Mask containing trigger source masks for each of possible                  */
 160:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
 161:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
 162:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_TRIG_SOURCE_MASK            (((LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTSEL) << (4U 
 163:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                             ((ADC_JSQR_JEXTSEL)                             << (4U 
 164:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                             ((ADC_JSQR_JEXTSEL)                             << (4U 
 165:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                             ((ADC_JSQR_JEXTSEL)                             << (4U 
 166:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 167:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Mask containing trigger edge masks for each of possible                    */
 168:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
 169:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
 170:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_TRIG_EDGE_MASK              (((LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN) << (4U *
 171:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_INJ_TRIG_EXT_EDGE_DEFAULT)              << (4U *
 172:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_INJ_TRIG_EXT_EDGE_DEFAULT)              << (4U *
 173:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_INJ_TRIG_EXT_EDGE_DEFAULT)              << (4U *
 174:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 175:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Definition of ADC group injected trigger bits information.                 */
 176:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_TRIG_EXTSEL_BITOFFSET_POS  ( 2UL) /* Value equivalent to bitfield "ADC_JSQR_JEXTSEL
 177:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_TRIG_EXTEN_BITOFFSET_POS   ( 6UL) /* Value equivalent to bitfield "ADC_JSQR_JEXTEN"
 178:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 179:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 180:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 181:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 182:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 183:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 184:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC channel:                                             */
 185:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literal LL_ADC_CHANNEL_x the relevant bits for:             */
 186:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - channel identifier defined by number                                     */
 187:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - channel identifier defined by bitfield                                   */
 188:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - channel differentiation between external channels (connected to          */
 189:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*   GPIO pins) and internal channels (connected to internal paths)           */
 190:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - channel sampling time defined by SMPRx register offset                   */
 191:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*   and SMPx bits positions into SMPRx register                              */
 192:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_MASK         (ADC_CFGR_AWD1CH)
 193:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_ID_BITFIELD_MASK       (ADC_AWD2CR_AWD2CH)
 194:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS (26UL)/* Value equivalent to bitfield "ADC_CHANNEL_ID_N
 195:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_ID_MASK                (ADC_CHANNEL_ID_NUMBER_MASK | ADC_CHANNEL_ID_BITFIELD_MA
 196:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Equivalent mask of ADC_CHANNEL_NUMBER_MASK aligned on register LSB (bit 0) */
 197:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 (ADC_SQR2_SQ5) /* Equivalent to shift: (ADC_CHANNEL_NUMB
 198:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 199:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Channel differentiation between external and internal channels */
 200:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_ID_INTERNAL_CH         (0x80000000UL) /* Marker of internal channel */
 201:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_ID_INTERNAL_CH_MASK    (ADC_CHANNEL_ID_INTERNAL_CH)
 202:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 203:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal register offset for ADC channel sampling time configuration */
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 5


 204:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (offset placed into a spare area of literal definition) */
 205:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SMPR1_REGOFFSET                (0x00000000UL)
 206:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SMPR2_REGOFFSET                (0x02000000UL)
 207:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_SMPRX_REGOFFSET_MASK   (ADC_SMPR1_REGOFFSET | ADC_SMPR2_REGOFFSET)
 208:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SMPRX_REGOFFSET_POS            (25UL) /* Position of bits ADC_SMPRx_REGOFFSET in ADC_CH
 209:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 210:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_SMPx_BITOFFSET_MASK    (0x01F00000UL)
 211:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_SMPx_BITOFFSET_POS     (20UL)           /* Value equivalent to bitfield "ADC_CH
 212:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 213:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Definition of channels ID number information to be inserted into           */
 214:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* channels literals definition.                                              */
 215:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_0_NUMBER               (0x00000000UL)
 216:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_1_NUMBER               (                                                       
 217:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_2_NUMBER               (                                                       
 218:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_3_NUMBER               (                                                       
 219:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_4_NUMBER               (                                        ADC_CFGR_AWD1CH
 220:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_5_NUMBER               (                                        ADC_CFGR_AWD1CH
 221:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_6_NUMBER               (                                        ADC_CFGR_AWD1CH
 222:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_7_NUMBER               (                                        ADC_CFGR_AWD1CH
 223:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_8_NUMBER               (                    ADC_CFGR_AWD1CH_3                  
 224:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_9_NUMBER               (                    ADC_CFGR_AWD1CH_3                  
 225:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_10_NUMBER              (                    ADC_CFGR_AWD1CH_3                  
 226:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_11_NUMBER              (                    ADC_CFGR_AWD1CH_3                  
 227:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_12_NUMBER              (                    ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH
 228:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_13_NUMBER              (                    ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH
 229:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_14_NUMBER              (                    ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH
 230:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_15_NUMBER              (                    ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH
 231:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_16_NUMBER              (ADC_CFGR_AWD1CH_4                                      
 232:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_17_NUMBER              (ADC_CFGR_AWD1CH_4                                      
 233:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_18_NUMBER              (ADC_CFGR_AWD1CH_4                                      
 234:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_19_NUMBER              (ADC_CFGR_AWD1CH_4                                      
 235:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 236:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Definition of channels ID bitfield information to be inserted into         */
 237:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* channels literals definition.                                              */
 238:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_0_BITFIELD             (ADC_AWD2CR_AWD2CH_0)
 239:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_1_BITFIELD             (ADC_AWD2CR_AWD2CH_1)
 240:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_2_BITFIELD             (ADC_AWD2CR_AWD2CH_2)
 241:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_3_BITFIELD             (ADC_AWD2CR_AWD2CH_3)
 242:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_4_BITFIELD             (ADC_AWD2CR_AWD2CH_4)
 243:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_5_BITFIELD             (ADC_AWD2CR_AWD2CH_5)
 244:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_6_BITFIELD             (ADC_AWD2CR_AWD2CH_6)
 245:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_7_BITFIELD             (ADC_AWD2CR_AWD2CH_7)
 246:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_8_BITFIELD             (ADC_AWD2CR_AWD2CH_8)
 247:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_9_BITFIELD             (ADC_AWD2CR_AWD2CH_9)
 248:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_10_BITFIELD            (ADC_AWD2CR_AWD2CH_10)
 249:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_11_BITFIELD            (ADC_AWD2CR_AWD2CH_11)
 250:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_12_BITFIELD            (ADC_AWD2CR_AWD2CH_12)
 251:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_13_BITFIELD            (ADC_AWD2CR_AWD2CH_13)
 252:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_14_BITFIELD            (ADC_AWD2CR_AWD2CH_14)
 253:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_15_BITFIELD            (ADC_AWD2CR_AWD2CH_15)
 254:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_16_BITFIELD            (ADC_AWD2CR_AWD2CH_16)
 255:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_17_BITFIELD            (ADC_AWD2CR_AWD2CH_17)
 256:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_18_BITFIELD            (ADC_AWD2CR_AWD2CH_18)
 257:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_19_BITFIELD            (ADC_AWD2CR_AWD2CH_19)
 258:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 259:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Definition of channels sampling time information to be inserted into       */
 260:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* channels literals definition.                                              */
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 6


 261:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_0_SMP                  (ADC_SMPR1_REGOFFSET | (( 0UL) << ADC_CHANNEL_SMPx_BITOF
 262:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_1_SMP                  (ADC_SMPR1_REGOFFSET | (( 3UL) << ADC_CHANNEL_SMPx_BITOF
 263:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_2_SMP                  (ADC_SMPR1_REGOFFSET | (( 6UL) << ADC_CHANNEL_SMPx_BITOF
 264:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_3_SMP                  (ADC_SMPR1_REGOFFSET | (( 9UL) << ADC_CHANNEL_SMPx_BITOF
 265:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_4_SMP                  (ADC_SMPR1_REGOFFSET | ((12UL) << ADC_CHANNEL_SMPx_BITOF
 266:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_5_SMP                  (ADC_SMPR1_REGOFFSET | ((15UL) << ADC_CHANNEL_SMPx_BITOF
 267:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_6_SMP                  (ADC_SMPR1_REGOFFSET | ((18UL) << ADC_CHANNEL_SMPx_BITOF
 268:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_7_SMP                  (ADC_SMPR1_REGOFFSET | ((21UL) << ADC_CHANNEL_SMPx_BITOF
 269:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_8_SMP                  (ADC_SMPR1_REGOFFSET | ((24UL) << ADC_CHANNEL_SMPx_BITOF
 270:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_9_SMP                  (ADC_SMPR1_REGOFFSET | ((27UL) << ADC_CHANNEL_SMPx_BITOF
 271:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_10_SMP                 (ADC_SMPR2_REGOFFSET | (( 0UL) << ADC_CHANNEL_SMPx_BITOF
 272:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_11_SMP                 (ADC_SMPR2_REGOFFSET | (( 3UL) << ADC_CHANNEL_SMPx_BITOF
 273:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_12_SMP                 (ADC_SMPR2_REGOFFSET | (( 6UL) << ADC_CHANNEL_SMPx_BITOF
 274:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_13_SMP                 (ADC_SMPR2_REGOFFSET | (( 9UL) << ADC_CHANNEL_SMPx_BITOF
 275:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_14_SMP                 (ADC_SMPR2_REGOFFSET | ((12UL) << ADC_CHANNEL_SMPx_BITOF
 276:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_15_SMP                 (ADC_SMPR2_REGOFFSET | ((15UL) << ADC_CHANNEL_SMPx_BITOF
 277:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_16_SMP                 (ADC_SMPR2_REGOFFSET | ((18UL) << ADC_CHANNEL_SMPx_BITOF
 278:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_17_SMP                 (ADC_SMPR2_REGOFFSET | ((21UL) << ADC_CHANNEL_SMPx_BITOF
 279:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_18_SMP                 (ADC_SMPR2_REGOFFSET | ((24UL) << ADC_CHANNEL_SMPx_BITOF
 280:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_19_SMP                 (ADC_SMPR2_REGOFFSET | ((27UL) << ADC_CHANNEL_SMPx_BITOF
 281:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 282:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 283:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC mode single or differential ended:                   */
 284:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literals LL_ADC_SINGLE_ENDED or LL_ADC_SINGLE_DIFFERENTIAL  */
 285:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* the relevant bits for:                                                     */
 286:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (concatenation of multiple bits used in different registers)               */
 287:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - ADC calibration: calibration start, calibration factor get or set        */
 288:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - ADC channels: set each ADC channel ending mode                           */
 289:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_START_MASK    (ADC_CR_ADCALDIF)
 290:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_FACTOR_MASK   (ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S)
 291:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SINGLEDIFF_CHANNEL_MASK        (ADC_CHANNEL_ID_BITFIELD_MASK) /* Equivalent to ADC_DIFS
 292:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK  (ADC_CALFACT_CALFACT_S_4 | ADC_CALFACT_CALFACT_S_3) /* B
 293:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_F_BIT_D_MASK   (0x00010000UL)                           /* Selection o
 294:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_F_BIT_D_POS    (16UL)                                   /* Selection o
 295:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_F_BIT_D_SHIFT4 (ADC_SINGLEDIFF_CALIB_F_BIT_D_POS - 4UL) /* Shift of bi
 296:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 297:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC analog watchdog:                                     */
 298:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literals LL_ADC_AWD_CHANNELx_xxx the relevant bits for:     */
 299:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (concatenation of multiple bits used in different analog watchdogs,        */
 300:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (feature of several watchdogs not available on all STM32 families)).       */
 301:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - analog watchdog 1: monitored channel defined by number,                  */
 302:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*   selection of ADC group (ADC groups regular and-or injected).             */
 303:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - analog watchdog 2 and 3: monitored channel defined by bitfield, no       */
 304:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*   selection on groups.                                                     */
 305:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 306:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal register offset for ADC analog watchdog channel configuration */
 307:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR1_REGOFFSET              (0x00000000UL)
 308:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR2_REGOFFSET              (0x00100000UL)
 309:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR3_REGOFFSET              (0x00200000UL)
 310:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 311:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Register offset gap between AWD1 and AWD2-AWD3 configuration registers */
 312:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (Set separately as ADC_AWD_CRX_REGOFFSET to spare 32 bits space */
 313:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR12_REGOFFSETGAP_MASK     (ADC_AWD2CR_AWD2CH_0)
 314:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR12_REGOFFSETGAP_VAL      (0x00000024UL)
 315:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 316:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CRX_REGOFFSET_MASK         (ADC_AWD_CR1_REGOFFSET | ADC_AWD_CR2_REGOFFSET | ADC_AWD
 317:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 7


 318:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR1_CHANNEL_MASK           (ADC_CFGR_AWD1CH | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | 
 319:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR23_CHANNEL_MASK          (ADC_AWD2CR_AWD2CH)
 320:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR_ALL_CHANNEL_MASK        (ADC_AWD_CR1_CHANNEL_MASK | ADC_AWD_CR23_CHANNEL_MASK)
 321:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 322:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CRX_REGOFFSET_POS          (20UL) /* Position of bits ADC_AWD_CRx_REGOFFSET in ADC_
 323:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 324:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal register offset for ADC analog watchdog threshold configuration */
 325:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TR1_REGOFFSET              (ADC_AWD_CR1_REGOFFSET)
 326:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TR2_REGOFFSET              (ADC_AWD_CR2_REGOFFSET)
 327:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TR3_REGOFFSET              (ADC_AWD_CR3_REGOFFSET)
 328:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TRX_REGOFFSET_MASK         (ADC_AWD_TR1_REGOFFSET | ADC_AWD_TR2_REGOFFSET | ADC_AWD
 329:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TRX_REGOFFSET_POS          (ADC_AWD_CRX_REGOFFSET_POS)     /* Position of bits ADC_
 330:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 331:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TRX_BIT_HIGH_MASK          (0x00010000UL)                   /* Selection of 1 bit t
 332:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TRX_BIT_HIGH_POS           (16UL)                           /* Selection of 1 bit t
 333:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TRX_BIT_HIGH_SHIFT4        (ADC_AWD_TRX_BIT_HIGH_POS - 4UL) /* Shift of bit ADC_AWD
 334:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
 335:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 336:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Register offset gap between AWD1 and AWD2-AWD3 thresholds registers */
 337:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (Set separately as ADC_AWD_TRX_REGOFFSET to spare 32 bits space */
 338:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TR12_REGOFFSETGAP_MASK     (ADC_AWD2CR_AWD2CH_0)
 339:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TR12_REGOFFSETGAP_VAL      (0x00000022UL)
 340:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 341:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Legacy literals */
 342:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD1_TR                      LL_ADC_AWD1
 343:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD2_TR                      LL_ADC_AWD2
 344:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD3_TR                      LL_ADC_AWD3
 345:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 346:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC offset:                                              */
 347:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal register offset for ADC offset number configuration */
 348:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_OFR1_REGOFFSET                 (0x00000000UL)
 349:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_OFR2_REGOFFSET                 (0x00000001UL)
 350:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_OFR3_REGOFFSET                 (0x00000002UL)
 351:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_OFR4_REGOFFSET                 (0x00000003UL)
 352:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_OFRx_REGOFFSET_MASK            (ADC_OFR1_REGOFFSET | ADC_OFR2_REGOFFSET | ADC_OFR3_REGO
 353:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 354:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 355:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* ADC registers bits positions */
 356:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CFGR_RES_BITOFFSET_POS         (ADC_CFGR_RES_Pos)
 357:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CFGR_AWD1SGL_BITOFFSET_POS     (ADC_CFGR_AWD1SGL_Pos)
 358:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CFGR_AWD1EN_BITOFFSET_POS      (ADC_CFGR_AWD1EN_Pos)
 359:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CFGR_JAWD1EN_BITOFFSET_POS     (ADC_CFGR_JAWD1EN_Pos)
 360:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 361:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CFGR_RES_BITOFFSET_POS_ADC3    (ADC3_CFGR_RES_Pos)
 362:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
 363:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 364:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 365:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* ADC registers bits groups */
 366:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CR_BITS_PROPERTY_RS            (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JA
 367:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 368:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 369:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* ADC internal channels related definitions */
 370:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal voltage reference VrefInt */
 371:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_3)
 372:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define VREFINT_CAL_ADDR                   ((uint16_t*) (0x8fff810UL))  /* Internal voltage referen
 373:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                         /* Address related to STM32
 374:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else /* ADC_VER_V5_90 || ADC_VER_V5_X */
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 8


 375:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define VREFINT_CAL_ADDR                   ((uint16_t*) (0x1FF1E860UL)) /* Internal voltage referen
 376:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_3 */
 377:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define VREFINT_CAL_VREF                   (3300UL)                     /* Analog voltage reference
 378:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Temperature sensor */
 379:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_3)
 380:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define TEMPSENSOR_CAL1_ADDR               ((uint16_t*) (0x8fff814UL))  /* Internal temperature sen
 381:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define TEMPSENSOR_CAL2_ADDR               ((uint16_t*) (0x8fff818UL))  /* Internal temperature sen
 382:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                         /* Addresses related to STM
 383:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else /* ADC_VER_V5_90 || ADC_VER_V5_X */
 384:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define TEMPSENSOR_CAL1_ADDR               ((uint16_t*) (0x1FF1E820UL)) /* Internal temperature sen
 385:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define TEMPSENSOR_CAL2_ADDR               ((uint16_t*) (0x1FF1E840UL)) /* Internal temperature sen
 386:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_3 */
 387:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 388:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define TEMPSENSOR_CAL1_TEMP               (30L)                        /* Internal temperature sen
 389:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define TEMPSENSOR_CAL2_TEMP               (110L)                       /* Internal temperature sen
 390:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define TEMPSENSOR_CAL_VREFANALOG          (3300UL)                     /* Analog voltage reference
 391:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 392:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Registers addresses with ADC linearity calibration content (programmed during device production,
 393:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEAR_CALIB_REG_1_ADDR ((uint32_t*) (0x1FF1EC00UL))
 394:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEAR_CALIB_REG_2_ADDR ((uint32_t*) (0x1FF1EC04UL))
 395:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEAR_CALIB_REG_3_ADDR ((uint32_t*) (0x1FF1EC08UL))
 396:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEAR_CALIB_REG_4_ADDR ((uint32_t*) (0x1FF1EC0CUL))
 397:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEAR_CALIB_REG_5_ADDR ((uint32_t*) (0x1FF1EC10UL))
 398:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEAR_CALIB_REG_6_ADDR ((uint32_t*) (0x1FF1EC14UL))
 399:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEAR_CALIB_REG_COUNT  (6UL)
 400:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 401:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 402:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 403:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 404:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 405:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Private macros ------------------------------------------------------------*/
 406:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_Private_Macros ADC Private Macros
 407:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 408:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 409:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 410:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 411:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Driver macro reserved for internal use: set a pointer to
 412:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a register from a register basis from which an offset
 413:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is applied.
 414:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __REG__ Register basis from which the offset is applied.
 415:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __REG_OFFFSET__ Offset to be applied (unit: number of registers).
 416:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Pointer to register address
 417:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 418:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __ADC_PTR_REG_OFFSET(__REG__, __REG_OFFFSET__)                         \
 419:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****  ((__IO uint32_t *)((uint32_t) ((uint32_t)(&(__REG__)) + ((__REG_OFFFSET__) << 2UL))))
 420:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 421:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 422:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 423:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 424:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 425:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 426:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Exported types ------------------------------------------------------------*/
 427:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(USE_FULL_LL_DRIVER)
 428:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_ES_INIT ADC Exported Init structure
 429:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 430:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 431:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 9


 432:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 433:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC common parameters
 434:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and multimode
 435:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (all ADC instances belonging to the same ADC common instance).
 436:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_CommonInit()
 437:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is conditioned to ADC instances state (all ADC instances
 438:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sharing the same ADC common instance):
 439:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         All ADC instances sharing the same ADC common instance must be
 440:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         disabled.
 441:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 442:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** typedef struct
 443:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 444:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t CommonClock;                 /*!< Set parameter common to several ADC: Clock source and 
 445:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_COMMON
 446:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              @note On this STM32 series, if ADC group injected is u
 447:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    clock ratio constraints between ADC clock and AH
 448:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    must be respected. Refer to reference manual.
 449:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 450:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 451:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 452:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t Multimode;                   /*!< Set ADC multimode configuration to operate in independ
 453:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_MULTI_
 454:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 455:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 456:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 457:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t MultiDMATransfer;            /*!< Set ADC dual ADC mode DMA transfer data format: Each D
 458:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_MULTI_
 459:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 460:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 461:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 462:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t MultiTwoSamplingDelay;       /*!< Set ADC multimode delay between 2 sampling phases.
 463:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_MULTI_
 464:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 465:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 466:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 467:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** } LL_ADC_CommonInitTypeDef;
 468:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 469:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 470:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC instance.
 471:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   These parameters have an impact on ADC scope: ADC instance.
 472:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Affects both group regular and group injected (availability
 473:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of ADC group injected depends on STM32 families).
 474:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to corresponding unitary functions into
 475:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref ADC_LL_EF_Configuration_ADC_Instance .
 476:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_Init()
 477:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is conditioned to ADC state:
 478:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instance must be disabled.
 479:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This condition is applied to all ADC features, for efficiency
 480:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and compatibility over all STM32 families. However, the different
 481:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         features can be set under different ADC state conditions
 482:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (setting possible with ADC enabled without conversion on going,
 483:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC enabled with conversion on going, ...)
 484:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Each feature can be updated afterwards with a unitary function
 485:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and potentially with ADC in a different state than disabled,
 486:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         refer to description of each function for setting
 487:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         conditioned to ADC state.
 488:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 10


 489:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** typedef struct
 490:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 491:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t Resolution;                  /*!< Set ADC resolution.
 492:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_RESOLU
 493:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 494:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 495:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 496:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t LeftBitShift;                /*!< Configures the left shifting applied to the final resu
 497:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_LEFT_B
 498:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 499:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t LowPowerMode;                /*!< Set ADC low power mode.
 500:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_LP_MOD
 501:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 502:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 503:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 504:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** } LL_ADC_InitTypeDef;
 505:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 506:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 507:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC group regular.
 508:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   These parameters have an impact on ADC scope: ADC group regular.
 509:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to corresponding unitary functions into
 510:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref ADC_LL_EF_Configuration_ADC_Group_Regular
 511:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (functions with prefix "REG").
 512:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_REG_Init()
 513:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is conditioned to ADC state:
 514:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instance must be disabled.
 515:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This condition is applied to all ADC features, for efficiency
 516:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and compatibility over all STM32 families. However, the different
 517:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         features can be set under different ADC state conditions
 518:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (setting possible with ADC enabled without conversion on going,
 519:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC enabled with conversion on going, ...)
 520:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Each feature can be updated afterwards with a unitary function
 521:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and potentially with ADC in a different state than disabled,
 522:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         refer to description of each function for setting
 523:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         conditioned to ADC state.
 524:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 525:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** typedef struct
 526:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 527:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t TriggerSource;               /*!< Set ADC group regular conversion trigger source: inter
 528:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_TR
 529:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              @note On this STM32 series, setting trigger source to 
 530:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    (default setting for compatibility with some ADC
 531:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    In case of need to modify trigger edge, use func
 532:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 533:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 534:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 535:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t SequencerLength;             /*!< Set ADC group regular sequencer length.
 536:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_SE
 537:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 538:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 539:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 540:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t SequencerDiscont;            /*!< Set ADC group regular sequencer discontinuous mode: se
 541:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_SE
 542:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              @note This parameter has an effect only if group regul
 543:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    (scan length of 2 ranks or more).
 544:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 545:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 11


 546:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 547:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t ContinuousMode;              /*!< Set ADC continuous conversion mode on ADC group regula
 548:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_CO
 549:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              Note: It is not possible to enable both ADC group regu
 550:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 551:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 552:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 553:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t DataTransferMode;            /*!< Set ADC group regular conversion data transfer mode: n
 554:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_DA
 555:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 556:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 557:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 558:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t Overrun;                     /*!< Set ADC group regular behavior in case of overrun:
 559:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              data preserved or overwritten.
 560:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_OV
 561:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 562:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 563:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 564:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** } LL_ADC_REG_InitTypeDef;
 565:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 566:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 567:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC group injected.
 568:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   These parameters have an impact on ADC scope: ADC group injected.
 569:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to corresponding unitary functions into
 570:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref ADC_LL_EF_Configuration_ADC_Group_Regular
 571:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (functions with prefix "INJ").
 572:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_INJ_Init()
 573:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is conditioned to ADC state:
 574:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instance must be disabled.
 575:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This condition is applied to all ADC features, for efficiency
 576:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and compatibility over all STM32 families. However, the different
 577:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         features can be set under different ADC state conditions
 578:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (setting possible with ADC enabled without conversion on going,
 579:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC enabled with conversion on going, ...)
 580:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Each feature can be updated afterwards with a unitary function
 581:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and potentially with ADC in a different state than disabled,
 582:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         refer to description of each function for setting
 583:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         conditioned to ADC state.
 584:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 585:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** typedef struct
 586:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 587:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t TriggerSource;               /*!< Set ADC group injected conversion trigger source: inte
 588:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_INJ_TR
 589:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              @note On this STM32 series, setting trigger source to 
 590:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    (default setting for compatibility with some ADC
 591:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    In case of need to modify trigger edge, use func
 592:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 593:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 594:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 595:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t SequencerLength;             /*!< Set ADC group injected sequencer length.
 596:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_INJ_SE
 597:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 598:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 599:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 600:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t SequencerDiscont;            /*!< Set ADC group injected sequencer discontinuous mode: s
 601:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_INJ_SE
 602:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              @note This parameter has an effect only if group injec
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 12


 603:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    (scan length of 2 ranks or more).
 604:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 605:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 606:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 607:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t TrigAuto;                    /*!< Set ADC group injected conversion trigger: independent
 608:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_INJ_TR
 609:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              Note: This parameter must be set to set to independent
 610:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 611:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 612:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 613:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** } LL_ADC_INJ_InitTypeDef;
 614:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 615:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 616:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 617:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 618:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* USE_FULL_LL_DRIVER */
 619:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 620:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Exported constants --------------------------------------------------------*/
 621:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_Exported_Constants ADC Exported Constants
 622:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 623:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 624:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 625:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_FLAG ADC flags
 626:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief    Flags defines which can be used with LL_ADC_ReadReg function
 627:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 628:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 629:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_ADRDY                  ADC_ISR_ADRDY      /*!< ADC flag ADC instance ready */
 630:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOC                    ADC_ISR_EOC        /*!< ADC flag ADC group regular end o
 631:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOS                    ADC_ISR_EOS        /*!< ADC flag ADC group regular end o
 632:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_OVR                    ADC_ISR_OVR        /*!< ADC flag ADC group regular overr
 633:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOSMP                  ADC_ISR_EOSMP      /*!< ADC flag ADC group regular end o
 634:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JEOC                   ADC_ISR_JEOC       /*!< ADC flag ADC group injected end 
 635:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JEOS                   ADC_ISR_JEOS       /*!< ADC flag ADC group injected end 
 636:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JQOVF                  ADC_ISR_JQOVF      /*!< ADC flag ADC group injected cont
 637:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD1                   ADC_ISR_AWD1       /*!< ADC flag ADC analog watchdog 1 *
 638:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD2                   ADC_ISR_AWD2       /*!< ADC flag ADC analog watchdog 2 *
 639:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD3                   ADC_ISR_AWD3       /*!< ADC flag ADC analog watchdog 3 *
 640:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_ADRDY_MST              ADC_CSR_ADRDY_MST  /*!< ADC flag ADC multimode master in
 641:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_ADRDY_SLV              ADC_CSR_ADRDY_SLV  /*!< ADC flag ADC multimode slave ins
 642:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOC_MST                ADC_CSR_EOC_MST    /*!< ADC flag ADC multimode master gr
 643:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOC_SLV                ADC_CSR_EOC_SLV    /*!< ADC flag ADC multimode slave gro
 644:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOS_MST                ADC_CSR_EOS_MST    /*!< ADC flag ADC multimode master gr
 645:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOS_SLV                ADC_CSR_EOS_SLV    /*!< ADC flag ADC multimode slave gro
 646:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_OVR_MST                ADC_CSR_OVR_MST    /*!< ADC flag ADC multimode master gr
 647:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_OVR_SLV                ADC_CSR_OVR_SLV    /*!< ADC flag ADC multimode slave gro
 648:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOSMP_MST              ADC_CSR_EOSMP_MST  /*!< ADC flag ADC multimode master gr
 649:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOSMP_SLV              ADC_CSR_EOSMP_SLV  /*!< ADC flag ADC multimode slave gro
 650:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JEOC_MST               ADC_CSR_JEOC_MST   /*!< ADC flag ADC multimode master gr
 651:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JEOC_SLV               ADC_CSR_JEOC_SLV   /*!< ADC flag ADC multimode slave gro
 652:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JEOS_MST               ADC_CSR_JEOS_MST   /*!< ADC flag ADC multimode master gr
 653:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JEOS_SLV               ADC_CSR_JEOS_SLV   /*!< ADC flag ADC multimode slave gro
 654:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JQOVF_MST              ADC_CSR_JQOVF_MST  /*!< ADC flag ADC multimode master gr
 655:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JQOVF_SLV              ADC_CSR_JQOVF_SLV  /*!< ADC flag ADC multimode slave gro
 656:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD1_MST               ADC_CSR_AWD1_MST   /*!< ADC flag ADC multimode master an
 657:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD1_SLV               ADC_CSR_AWD1_SLV   /*!< ADC flag ADC multimode slave ana
 658:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD2_MST               ADC_CSR_AWD2_MST   /*!< ADC flag ADC multimode master an
 659:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD2_SLV               ADC_CSR_AWD2_SLV   /*!< ADC flag ADC multimode slave ana
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 13


 660:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD3_MST               ADC_CSR_AWD3_MST   /*!< ADC flag ADC multimode master an
 661:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD3_SLV               ADC_CSR_AWD3_SLV   /*!< ADC flag ADC multimode slave ana
 662:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 663:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 664:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 665:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 666:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_IT ADC interruptions for configuration (interruption enable or disable)
 667:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief    IT defines which can be used with LL_ADC_ReadReg and  LL_ADC_WriteReg functions
 668:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 669:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 670:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_ADRDY                    ADC_IER_ADRDYIE    /*!< ADC interruption ADC instance re
 671:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_EOC                      ADC_IER_EOCIE      /*!< ADC interruption ADC group regul
 672:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_EOS                      ADC_IER_EOSIE      /*!< ADC interruption ADC group regul
 673:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_OVR                      ADC_IER_OVRIE      /*!< ADC interruption ADC group regul
 674:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_EOSMP                    ADC_IER_EOSMPIE    /*!< ADC interruption ADC group regul
 675:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_JEOC                     ADC_IER_JEOCIE     /*!< ADC interruption ADC group injec
 676:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_JEOS                     ADC_IER_JEOSIE     /*!< ADC interruption ADC group injec
 677:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_JQOVF                    ADC_IER_JQOVFIE    /*!< ADC interruption ADC group injec
 678:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_AWD1                     ADC_IER_AWD1IE     /*!< ADC interruption ADC analog watc
 679:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_AWD2                     ADC_IER_AWD2IE     /*!< ADC interruption ADC analog watc
 680:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_AWD3                     ADC_IER_AWD3IE     /*!< ADC interruption ADC analog watc
 681:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 682:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 683:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 684:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 685:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REGISTERS  ADC registers compliant with specific purpose
 686:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 687:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 688:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* List of ADC registers intended to be used (most commonly) with             */
 689:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* DMA transfer.                                                              */
 690:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Refer to function @ref LL_ADC_DMA_GetRegAddr().                            */
 691:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DMA_REG_REGULAR_DATA          (0x00000000UL) /* ADC group regular conversion data re
 692:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DMA_REG_REGULAR_DATA_MULTI    (0x00000001UL) /* ADC group regular conversion data re
 693:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 694:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 695:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 696:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 697:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_COMMON_CLOCK_SOURCE  ADC common - Clock source
 698:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 699:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 700:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_SYNC_PCLK_DIV1        (ADC_CCR_CKMODE_0)                                    /*
 701:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_SYNC_PCLK_DIV2        (ADC_CCR_CKMODE_1                   )                 /*
 702:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_SYNC_PCLK_DIV4        (ADC_CCR_CKMODE_1 | ADC_CCR_CKMODE_0)                 /*
 703:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV1            (0x00000000UL)                                        /*
 704:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV2            (ADC_CCR_PRESC_0)                                     /*
 705:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV4            (ADC_CCR_PRESC_1                  )                   /*
 706:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV6            (ADC_CCR_PRESC_1 | ADC_CCR_PRESC_0)                   /*
 707:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV8            (ADC_CCR_PRESC_2                                    ) /*
 708:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV10           (ADC_CCR_PRESC_2                   | ADC_CCR_PRESC_0) /*
 709:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV12           (ADC_CCR_PRESC_2 | ADC_CCR_PRESC_1                  ) /*
 710:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV16           (ADC_CCR_PRESC_2 | ADC_CCR_PRESC_1 | ADC_CCR_PRESC_0) /*
 711:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV32           (ADC_CCR_PRESC_3)                                     /*
 712:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV64           (ADC_CCR_PRESC_3 | ADC_CCR_PRESC_0)                   /*
 713:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV128          (ADC_CCR_PRESC_3 | ADC_CCR_PRESC_1)                   /*
 714:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV256          (ADC_CCR_PRESC_3 | ADC_CCR_PRESC_1 | ADC_CCR_PRESC_0) /*
 715:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 716:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 14


 717:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 718:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 719:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_COMMON_PATH_INTERNAL  ADC common - Measurement path to internal channels
 720:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 721:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 722:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Note: Other measurement paths to internal channels may be available        */
 723:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       (connections to other peripherals).                                  */
 724:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       If they are not listed below, they do not require any specific       */
 725:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       path enable. In this case, Access to measurement path is done        */
 726:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       only by selecting the corresponding ADC internal channel.            */
 727:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_NONE          (0x00000000UL)         /*!< ADC measurement paths all di
 728:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_VREFINT       (ADC_CCR_VREFEN)       /*!< ADC measurement path to inte
 729:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_TEMPSENSOR    (ADC_CCR_TSEN)         /*!< ADC measurement path to inte
 730:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_VBAT          (ADC_CCR_VBATEN)       /*!< ADC measurement path to inte
 731:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 732:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 733:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 734:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 735:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_BOOST_MODE ADC instance - Boost mode
 736:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 737:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 738:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_BOOST_MODE_6MHZ25   (0x00000000UL)                                            /*!< B
 739:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_BOOST_MODE_12MHZ5   (                                        ADC_CR_BOOST_0)  /*!< B
 740:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_BOOST_MODE_20MHZ    (                       ADC_CR_BOOST_1                 )  /*!< B
 741:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_BOOST_MODE_25MHZ    ((ADC_CR_BOOST_0 <<2) | ADC_CR_BOOST_1                 )  /*!< B
 742:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_BOOST_MODE_50MHZ    ((ADC_CR_BOOST_0 <<2) | ADC_CR_BOOST_1 | ADC_CR_BOOST_0)  /*!< B
 743:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 744:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 745:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 746:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 747:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CALIBRATION_OFFSET_LINEARITY  ADC instance - Calibration mode for offset an
 748:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 749:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 750:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_OFFSET                (ADC_CALIB_FACTOR_OFFSET_REGOFFSET)                     
 751:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_LINEARITY             (ADC_CALIB_FACTOR_LINEARITY_REGOFFSET)                  
 752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_OFFSET_LINEARITY      (ADC_CALIB_FACTOR_LINEARITY_REGOFFSET | ADC_CR_ADCALLIN)
 753:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 754:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 755:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 756:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 757:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CALIBRATION_LINEARITY_WORD  ADC instance - Calibration linearity words
 758:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 759:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 760:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_LINEARITY_WORD1       (ADC_CR_LINCALRDYW1)    /*!< ADC calibration linearity w
 761:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_LINEARITY_WORD2       (ADC_CR_LINCALRDYW2)    /*!< ADC calibration linearity w
 762:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_LINEARITY_WORD3       (ADC_CR_LINCALRDYW3)    /*!< ADC calibration linearity w
 763:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_LINEARITY_WORD4       (ADC_CR_LINCALRDYW4)    /*!< ADC calibration linearity w
 764:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_LINEARITY_WORD5       (ADC_CR_LINCALRDYW5)    /*!< ADC calibration linearity w
 765:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_LINEARITY_WORD6       (ADC_CR_LINCALRDYW6)    /*!< ADC calibration linearity w
 766:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 767:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 768:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 769:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 770:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_RESOLUTION  ADC instance - Resolution
 771:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 772:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 773:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_16B              (0x00000000UL)                                      /*!<
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 15


 774:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_14B              (                                  ADC_CFGR_RES_0)  /*!<
 775:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_12B              (                 ADC_CFGR_RES_1                 )  /*!<
 776:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_10B              (                 ADC_CFGR_RES_1 | ADC_CFGR_RES_0)  /*!<
 777:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 778:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined (ADC_VER_V5_X)
 779:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_14B_OPT          (ADC_CFGR_RES_2 |                  ADC_CFGR_RES_0)  /*!<
 780:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_12B_OPT          (ADC_CFGR_RES_2 | ADC_CFGR_RES_1                 )  /*!<
 781:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
 782:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 783:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined (ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
 784:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_8B               (ADC_CFGR_RES_2|ADC_CFGR_RES_1 | ADC_CFGR_RES_0) /*!< AD
 785:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
 786:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_8B               (ADC_CFGR_RES_2                                ) /*!< AD
 787:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                                             /*!< Th
 788:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                                                    
 789:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                                                    
 790:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
 791:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 792:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_6B               (ADC3_CFGR_RES_1 | ADC3_CFGR_RES_0)   /*!< ADC resolutio
 793:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
 794:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 795:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 796:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 797:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 798:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 799:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_DATA_ALIGN  ADC instance - Data alignment
 800:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 801:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 802:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DATA_ALIGN_RIGHT            (0x00000000UL)         /*!< ADC conversion data alignmen
 803:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DATA_ALIGN_LEFT             (ADC3_CFGR_ALIGN)       /*!< ADC conversion data alignme
 804:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 805:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 806:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 807:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 808:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
 809:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 810:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_LEFT_BIT_SHIFT   ADC left Shift
 811:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 812:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 813:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_NONE  (0x00000000UL)                                                 
 814:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_1     (ADC_CFGR2_LSHIFT_0)                                           
 815:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_2     (ADC_CFGR2_LSHIFT_1)                                           
 816:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_3     (ADC_CFGR2_LSHIFT_1 | ADC_CFGR2_LSHIFT_0)                      
 817:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_4     (ADC_CFGR2_LSHIFT_2)                                           
 818:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_5     (ADC_CFGR2_LSHIFT_2 | ADC_CFGR2_LSHIFT_0)                      
 819:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_6     (ADC_CFGR2_LSHIFT_2 | ADC_CFGR2_LSHIFT_1)                      
 820:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_7     (ADC_CFGR2_LSHIFT_2 | ADC_CFGR2_LSHIFT_1 | ADC_CFGR2_LSHIFT_0) 
 821:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_8     (ADC_CFGR2_LSHIFT_3)                                           
 822:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_9     (ADC_CFGR2_LSHIFT_3 | ADC_CFGR2_LSHIFT_0)                      
 823:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_10    (ADC_CFGR2_LSHIFT_3 | ADC_CFGR2_LSHIFT_1)                      
 824:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_11    (ADC_CFGR2_LSHIFT_3 | ADC_CFGR2_LSHIFT_1 | ADC_CFGR2_LSHIFT_0) 
 825:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_12    (ADC_CFGR2_LSHIFT_3 | ADC_CFGR2_LSHIFT_2)                      
 826:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_13    (ADC_CFGR2_LSHIFT_3 | ADC_CFGR2_LSHIFT_2 | ADC_CFGR2_LSHIFT_0) 
 827:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_14    (ADC_CFGR2_LSHIFT_3 | ADC_CFGR2_LSHIFT_2 | ADC_CFGR2_LSHIFT_1) 
 828:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_15    (ADC_CFGR2_LSHIFT_3 | ADC_CFGR2_LSHIFT_2 | ADC_CFGR2_LSHIFT_1 |
 829:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 830:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 16


 831:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 832:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 833:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_LP_MODE  ADC instance - Low power mode
 834:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 835:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 836:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LP_MODE_NONE                (0x00000000UL)                      /*!< No ADC low powe
 837:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LP_AUTOWAIT                 (ADC_CFGR_AUTDLY)                   /*!< ADC low power m
 838:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 839:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 840:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 841:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 842:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_NB  ADC instance - Offset number
 843:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 844:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 845:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_1                    ADC_OFR1_REGOFFSET /*!< ADC offset number 1: ADC channel
 846:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_2                    ADC_OFR2_REGOFFSET /*!< ADC offset number 2: ADC channel
 847:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_3                    ADC_OFR3_REGOFFSET /*!< ADC offset number 3: ADC channel
 848:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_4                    ADC_OFR4_REGOFFSET /*!< ADC offset number 4: ADC channel
 849:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 850:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 851:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 852:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 853:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_SIGNED_SATURATION ADC instance - Offset signed saturation mode
 854:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 855:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 856:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE   (0x00000000UL)   /*!< ADC offset signed saturatio
 857:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE    (ADC_OFR1_SSATE) /*!< ADC offset signed saturatio
 858:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 859:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 860:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 861:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 862:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_RSHIFT ADC instance - Offset right shift
 863:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 864:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 865:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_RSHIFT_DISABLE   (0x00000000UL)      /*!< ADC offset right shift is disabled 
 866:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_RSHIFT_ENABLE    (ADC_CFGR2_RSHIFT1) /*!< ADC offset right shift is enabled (
 867:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 868:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 869:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 870:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 871:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_SATURATION ADC instance - Offset saturation mode
 872:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 873:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 874:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_SATURATION_DISABLE   (0x00000000UL)           /*!< ADC offset saturation is d
 875:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_SATURATION_ENABLE    (ADC3_OFR1_SATEN)        /*!< ADC offset saturation is e
 876:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 877:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 878:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 879:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 880:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_STATE ADC instance - Offset state
 881:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 882:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 883:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_DISABLE              (0x00000000UL)         /*!< ADC offset disabled (among A
 884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_ENABLE               (ADC3_OFR1_OFFSET1_EN)  /*!< ADC offset enabled (among A
 885:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 886:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 887:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 17


 888:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 889:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_SIGN ADC instance - Offset sign
 890:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 891:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 892:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_SIGN_NEGATIVE        (0x00000000UL)        /*!< ADC offset is negative (among
 893:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_SIGN_POSITIVE        (ADC3_OFR1_OFFSETPOS) /*!< ADC offset is positive (among
 894:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 895:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 896:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 897:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
 898:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 899:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
 900:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 901:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_GROUPS  ADC instance - Groups
 902:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 903:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 904:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_GROUP_REGULAR               (0x00000001UL) /*!< ADC group regular (available on all 
 905:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_GROUP_INJECTED              (0x00000002UL) /*!< ADC group injected (not available on
 906:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_GROUP_REGULAR_INJECTED      (0x00000003UL) /*!< ADC both groups regular and injected
 907:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 908:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 909:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 910:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 911:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL  ADC instance - Channel number
 912:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 913:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 914:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_0                   (ADC_CHANNEL_0_NUMBER  | ADC_CHANNEL_0_SMP  | ADC_CHANNE
 915:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_1                   (ADC_CHANNEL_1_NUMBER  | ADC_CHANNEL_1_SMP  | ADC_CHANNE
 916:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_2                   (ADC_CHANNEL_2_NUMBER  | ADC_CHANNEL_2_SMP  | ADC_CHANNE
 917:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_3                   (ADC_CHANNEL_3_NUMBER  | ADC_CHANNEL_3_SMP  | ADC_CHANNE
 918:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_4                   (ADC_CHANNEL_4_NUMBER  | ADC_CHANNEL_4_SMP  | ADC_CHANNE
 919:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_5                   (ADC_CHANNEL_5_NUMBER  | ADC_CHANNEL_5_SMP  | ADC_CHANNE
 920:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_6                   (ADC_CHANNEL_6_NUMBER  | ADC_CHANNEL_6_SMP  | ADC_CHANNE
 921:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_7                   (ADC_CHANNEL_7_NUMBER  | ADC_CHANNEL_7_SMP  | ADC_CHANNE
 922:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_8                   (ADC_CHANNEL_8_NUMBER  | ADC_CHANNEL_8_SMP  | ADC_CHANNE
 923:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_9                   (ADC_CHANNEL_9_NUMBER  | ADC_CHANNEL_9_SMP  | ADC_CHANNE
 924:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_10                  (ADC_CHANNEL_10_NUMBER | ADC_CHANNEL_10_SMP | ADC_CHANNE
 925:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_11                  (ADC_CHANNEL_11_NUMBER | ADC_CHANNEL_11_SMP | ADC_CHANNE
 926:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_12                  (ADC_CHANNEL_12_NUMBER | ADC_CHANNEL_12_SMP | ADC_CHANNE
 927:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_13                  (ADC_CHANNEL_13_NUMBER | ADC_CHANNEL_13_SMP | ADC_CHANNE
 928:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_14                  (ADC_CHANNEL_14_NUMBER | ADC_CHANNEL_14_SMP | ADC_CHANNE
 929:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_15                  (ADC_CHANNEL_15_NUMBER | ADC_CHANNEL_15_SMP | ADC_CHANNE
 930:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_16                  (ADC_CHANNEL_16_NUMBER | ADC_CHANNEL_16_SMP | ADC_CHANNE
 931:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_17                  (ADC_CHANNEL_17_NUMBER | ADC_CHANNEL_17_SMP | ADC_CHANNE
 932:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_18                  (ADC_CHANNEL_18_NUMBER | ADC_CHANNEL_18_SMP | ADC_CHANNE
 933:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_19                  (ADC_CHANNEL_19_NUMBER | ADC_CHANNEL_19_SMP | ADC_CHANNE
 934:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC3)
 935:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 936:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_VREFINT             (LL_ADC_CHANNEL_18 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 937:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_TEMPSENSOR          (LL_ADC_CHANNEL_17 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 938:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_VBAT                (LL_ADC_CHANNEL_16 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 939:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
 940:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_VREFINT             (LL_ADC_CHANNEL_19 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 941:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_TEMPSENSOR          (LL_ADC_CHANNEL_18 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 942:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_VBAT                (LL_ADC_CHANNEL_17 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 943:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
 944:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 18


 945:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*!< Specific define for STM32H7A3xx and STM32HB3xx varieties of STM32H7XXX */
 946:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_VREFINT             (LL_ADC_CHANNEL_19 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 947:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_TEMPSENSOR          (LL_ADC_CHANNEL_18 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 948:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_VBAT                (LL_ADC_CHANNEL_14 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 949:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
 950:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_DAC1CH1_ADC2        (LL_ADC_CHANNEL_16 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 951:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_DAC1CH2_ADC2        (LL_ADC_CHANNEL_17 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 952:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(DAC2)
 953:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*!< Specific define for STM32H7A3xx and STM32HB3xx varieties of STM32H7XXX */
 954:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_DAC2CH1_ADC2        (LL_ADC_CHANNEL_15 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 955:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
 956:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 957:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 958:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 959:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 960:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_TRIGGER_SOURCE  ADC group regular - Trigger source
 961:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 962:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 963:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_SOFTWARE          (0x00000000UL)                                           
 964:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_CH1      (ADC_REG_TRIG_EXT_EDGE_DEFAULT)                          
 965:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_CH2      (ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)      
 966:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_CH3      (ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)      
 967:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM2_CH2      (ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EXT
 968:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM3_TRGO     (ADC_CFGR_EXTSEL_2 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)      
 969:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM4_CH4      (ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EXT
 970:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_EXTI_LINE11   (ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EXT
 971:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM8_TRGO     (ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL_
 972:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM8_TRGO2    (ADC_CFGR_EXTSEL_3 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)      
 973:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_TRGO     (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EXT
 974:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_TRGO2    (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EXT
 975:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM2_TRGO     (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL_
 976:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM4_TRGO     (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_REG_TRIG_EXT
 977:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM6_TRGO     (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_
 978:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM15_TRGO    (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_
 979:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM3_CH4      (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_
 980:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG1    (ADC_CFGR_EXTSEL_4 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)      
 981:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG3    (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EXT
 982:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_LPTIM1_OUT    (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EXT
 983:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_LPTIM2_OUT    (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL_
 984:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_LPTIM3_OUT    (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_2 | ADC_REG_TRIG_EXT
 985:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined (TIM23)
 986:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM23_TRGO    (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_
 987:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* TIM23 */
 988:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined (TIM24)
 989:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM24_TRGO    (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_
 990:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* TIM24 */
 991:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 992:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 993:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 994:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 995:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_TRIGGER_EDGE  ADC group regular - Trigger edge
 996:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 997:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 998:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_RISING         (                   ADC_CFGR_EXTEN_0)   /*!< ADC group r
 999:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_FALLING        (ADC_CFGR_EXTEN_1                   )   /*!< ADC group r
1000:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_RISINGFALLING  (ADC_CFGR_EXTEN_1 | ADC_CFGR_EXTEN_0)   /*!< ADC group r
1001:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 19


1002:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1003:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1004:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
1005:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****  /** @defgroup ADC_LL_EC_REG_SAMPLING_MODE  ADC group regular - Sampling mode
1006:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1007:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1008:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SAMPLING_MODE_NORMAL               (0x00000000UL)        /*!< ADC conversions sa
1009:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SAMPLING_MODE_BULB                 (ADC3_CFGR2_BULB)     /*!< ADC conversions sa
1010:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                                  Note: First conver
1011:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SAMPLING_MODE_TRIGGER_CONTROLED    (ADC3_CFGR2_SMPTRIG)  /*!< ADC conversions sa
1012:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                                  Trigger rising edg
1013:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                                  Trigger falling ed
1014:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1015:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1016:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */ 
1017:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
1018:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1019:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_CONTINUOUS_MODE  ADC group regular - Continuous mode
1020:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @{
1021:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** */
1022:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_CONV_SINGLE             (0x00000000UL)          /*!< ADC conversions are perform
1023:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_CONV_CONTINUOUS         (ADC_CFGR_CONT)         /*!< ADC conversions are perform
1024:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1025:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1026:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1027:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1028:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_DATA_TRANSFER_MODE  ADC group regular - Data transfer mode of ADC conve
1029:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1030:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1031:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_DR_TRANSFER             (0x00000000UL)                        /*!< ADC conversio
1032:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_DMA_TRANSFER_LIMITED    (                   ADC_CFGR_DMNGT_0) /*!< ADC conversio
1033:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_DMA_TRANSFER_UNLIMITED  (ADC_CFGR_DMNGT_1 | ADC_CFGR_DMNGT_0) /*!< ADC conversio
1034:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_DFSDM_TRANSFER          (ADC_CFGR_DMNGT_1                   ) /*!< ADC conversio
1035:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1036:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1037:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1038:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1039:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
1040:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_DMA_TRANSFER  ADC group regular - DMA transfer of ADC conversion data
1041:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1042:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1043:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1044:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC3_REG_DMA_TRANSFER_NONE       (0x00000000UL)                        /*!< ADC conversi
1045:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC3_REG_DMA_TRANSFER_LIMITED    (                  ADC3_CFGR_DMAEN)    /*!< ADC convers
1046:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC3_REG_DMA_TRANSFER_UNLIMITED  (ADC3_CFGR_DMACFG | ADC3_CFGR_DMAEN)    /*!< ADC conver
1047:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1048:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1049:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1050:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
1051:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1052:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_OVR_DATA_BEHAVIOR  ADC group regular - Overrun behavior on conversion d
1053:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @{
1054:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** */
1055:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_OVR_DATA_PRESERVED      (0x00000000UL)         /*!< ADC group regular behavior i
1056:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_OVR_DATA_OVERWRITTEN    (ADC_CFGR_OVRMOD)      /*!< ADC group regular behavior i
1057:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1058:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 20


1059:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1060:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1061:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_SCAN_LENGTH  ADC group regular - Sequencer scan length
1062:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1063:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1064:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_DISABLE        (0x00000000UL)                                          
1065:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS  (                                             ADC_SQR1_L
1066:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS  (                              ADC_SQR1_L_1             
1067:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS  (                              ADC_SQR1_L_1 | ADC_SQR1_L
1068:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS  (               ADC_SQR1_L_2                            
1069:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS  (               ADC_SQR1_L_2                | ADC_SQR1_L
1070:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS  (               ADC_SQR1_L_2 | ADC_SQR1_L_1             
1071:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS  (               ADC_SQR1_L_2 | ADC_SQR1_L_1 | ADC_SQR1_L
1072:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_9RANKS  (ADC_SQR1_L_3                                           
1073:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_10RANKS (ADC_SQR1_L_3                               | ADC_SQR1_L
1074:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_11RANKS (ADC_SQR1_L_3                | ADC_SQR1_L_1             
1075:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_12RANKS (ADC_SQR1_L_3                | ADC_SQR1_L_1 | ADC_SQR1_L
1076:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_13RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2                            
1077:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_14RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2                | ADC_SQR1_L
1078:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2 | ADC_SQR1_L_1             
1079:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2 | ADC_SQR1_L_1 | ADC_SQR1_L
1080:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1081:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1082:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1083:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1084:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_DISCONT_MODE  ADC group regular - Sequencer discontinuous mode
1085:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1086:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1087:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_DISABLE     (0x00000000UL)                                          
1088:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_1RANK       (                                                       
1089:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_2RANKS      (                                          ADC_CFGR_DISC
1090:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_3RANKS      (                     ADC_CFGR_DISCNUM_1                
1091:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_4RANKS      (                     ADC_CFGR_DISCNUM_1 | ADC_CFGR_DISC
1092:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_5RANKS      (ADC_CFGR_DISCNUM_2                                     
1093:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_6RANKS      (ADC_CFGR_DISCNUM_2                      | ADC_CFGR_DISC
1094:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_7RANKS      (ADC_CFGR_DISCNUM_2 | ADC_CFGR_DISCNUM_1                
1095:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_8RANKS      (ADC_CFGR_DISCNUM_2 | ADC_CFGR_DISCNUM_1 | ADC_CFGR_DISC
1096:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1097:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1098:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1099:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1100:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_RANKS  ADC group regular - Sequencer ranks
1101:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1102:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1103:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_1                  (ADC_SQR1_REGOFFSET | ADC_REG_RANK_1_SQRX_BITOFFSET_POS)
1104:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_2                  (ADC_SQR1_REGOFFSET | ADC_REG_RANK_2_SQRX_BITOFFSET_POS)
1105:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_3                  (ADC_SQR1_REGOFFSET | ADC_REG_RANK_3_SQRX_BITOFFSET_POS)
1106:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_4                  (ADC_SQR1_REGOFFSET | ADC_REG_RANK_4_SQRX_BITOFFSET_POS)
1107:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_5                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_5_SQRX_BITOFFSET_POS)
1108:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_6                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_6_SQRX_BITOFFSET_POS)
1109:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_7                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_7_SQRX_BITOFFSET_POS)
1110:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_8                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_8_SQRX_BITOFFSET_POS)
1111:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_9                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_9_SQRX_BITOFFSET_POS)
1112:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_10                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_10_SQRX_BITOFFSET_POS
1113:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_11                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_11_SQRX_BITOFFSET_POS
1114:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_12                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_12_SQRX_BITOFFSET_POS
1115:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_13                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_13_SQRX_BITOFFSET_POS
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 21


1116:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_14                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_14_SQRX_BITOFFSET_POS
1117:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_15                 (ADC_SQR4_REGOFFSET | ADC_REG_RANK_15_SQRX_BITOFFSET_POS
1118:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_16                 (ADC_SQR4_REGOFFSET | ADC_REG_RANK_16_SQRX_BITOFFSET_POS
1119:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1120:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1121:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1122:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1123:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_TRIGGER_SOURCE  ADC group injected - Trigger source
1124:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1125:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1126:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_SOFTWARE           (0x00000000UL)                                          
1127:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM1_TRGO      (ADC_INJ_TRIG_EXT_EDGE_DEFAULT)                         
1128:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM1_CH4       (ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1129:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM2_TRGO      (ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1130:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM2_CH1       (ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_
1131:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM3_CH4       (ADC_JSQR_JEXTSEL_2 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1132:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM4_TRGO      (ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_
1133:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_EXTI_LINE15    (ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_
1134:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM8_CH4       (ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXT
1135:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM1_TRGO2     (ADC_JSQR_JEXTSEL_3 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1136:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM8_TRGO      (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_
1137:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM8_TRGO2     (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_
1138:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM3_CH3       (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXT
1139:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM3_TRGO      (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_INJ_TRIG_
1140:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM3_CH1       (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1141:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM6_TRGO      (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1142:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM15_TRGO     (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1143:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(HRTIM1)
1144:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG2     (ADC_JSQR_JEXTSEL_4 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1145:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG4     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_
1146:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* HRTIM1 */
1147:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_LPTIM1_OUT     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_
1148:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_LPTIM2_OUT     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXT
1149:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_LPTIM3_OUT     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_2 | ADC_INJ_TRIG_
1150:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM23_TRGO     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1151:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM24_TRGO     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1152:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1153:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1154:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1155:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1156:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_TRIGGER_EDGE  ADC group injected - Trigger edge
1157:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1158:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1159:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_RISING         (                    ADC_JSQR_JEXTEN_0) /*!< ADC group i
1160:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_FALLING        (ADC_JSQR_JEXTEN_1                    ) /*!< ADC group i
1161:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_RISINGFALLING  (ADC_JSQR_JEXTEN_1 | ADC_JSQR_JEXTEN_0) /*!< ADC group i
1162:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1163:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1164:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1165:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1166:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_TRIG_AUTO  ADC group injected - Automatic trigger mode
1167:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @{
1168:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** */
1169:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_INDEPENDENT        (0x00000000UL)         /*!< ADC group injected conversio
1170:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_FROM_GRP_REGULAR   (ADC_CFGR_JAUTO)       /*!< ADC group injected conversio
1171:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1172:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 22


1173:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1174:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1175:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_CONTEXT_QUEUE  ADC group injected - Context queue mode
1176:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1177:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1178:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_QUEUE_2CONTEXTS_LAST_ACTIVE (0x00000000UL)         /* Group injected sequence co
1179:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY   (ADC_CFGR_JQM)         /* Group injected sequence co
1180:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_QUEUE_DISABLE               (ADC_CFGR_JQDIS)       /* Group injected sequence co
1181:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1182:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1183:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1184:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1185:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_SEQ_SCAN_LENGTH  ADC group injected - Sequencer scan length
1186:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1187:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1188:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_SCAN_DISABLE        (0x00000000UL)                  /*!< ADC group injected 
1189:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS  (                ADC_JSQR_JL_0) /*!< ADC group injected 
1190:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS  (ADC_JSQR_JL_1                ) /*!< ADC group injected 
1191:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS  (ADC_JSQR_JL_1 | ADC_JSQR_JL_0) /*!< ADC group injected 
1192:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1193:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1194:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1195:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1196:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_SEQ_DISCONT_MODE  ADC group injected - Sequencer discontinuous mode
1197:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1198:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1199:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_DISCONT_DISABLE     (0x00000000UL)         /*!< ADC group injected sequencer
1200:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_DISCONT_1RANK       (ADC_CFGR_JDISCEN)     /*!< ADC group injected sequencer
1201:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1202:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1203:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1204:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1205:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_SEQ_RANKS  ADC group injected - Sequencer ranks
1206:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1207:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1208:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_RANK_1                  (ADC_JDR1_REGOFFSET | ADC_INJ_RANK_1_JSQR_BITOFFSET_POS)
1209:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_RANK_2                  (ADC_JDR2_REGOFFSET | ADC_INJ_RANK_2_JSQR_BITOFFSET_POS)
1210:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_RANK_3                  (ADC_JDR3_REGOFFSET | ADC_INJ_RANK_3_JSQR_BITOFFSET_POS)
1211:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_RANK_4                  (ADC_JDR4_REGOFFSET | ADC_INJ_RANK_4_JSQR_BITOFFSET_POS)
1212:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1213:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1214:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1215:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1216:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL_SAMPLINGTIME  Channel - Sampling time
1217:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1218:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1219:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_1CYCLE_5       (0x00000000UL)                                          
1220:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_2CYCLES_5      (                                        ADC_SMPR2_SMP10
1221:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_8CYCLES_5      (                    ADC_SMPR2_SMP10_1                  
1222:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_16CYCLES_5     (                    ADC_SMPR2_SMP10_1 | ADC_SMPR2_SMP10
1223:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_32CYCLES_5     (ADC_SMPR2_SMP10_2                                      
1224:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_64CYCLES_5     (ADC_SMPR2_SMP10_2                     | ADC_SMPR2_SMP10
1225:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_387CYCLES_5    (ADC_SMPR2_SMP10_2 | ADC_SMPR2_SMP10_1                  
1226:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_810CYCLES_5    (ADC_SMPR2_SMP10_2 | ADC_SMPR2_SMP10_1 | ADC_SMPR2_SMP10
1227:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1228:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1229:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 23


1230:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
1231:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL_SAMPLINGTIME  Channel - Sampling time
1232:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1233:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1234:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_2CYCLES_5      (0x00000000UL)                                     
1235:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_6CYCLES_5      (                                        ADC_SMPR2_
1236:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_12CYCLES_5     (                    ADC_SMPR2_SMP10_1             
1237:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_24CYCLES_5     (                    ADC_SMPR2_SMP10_1 | ADC_SMPR2_
1238:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_47CYCLES_5     (ADC_SMPR2_SMP10_2                                 
1239:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_92CYCLES_5     (ADC_SMPR2_SMP10_2                     | ADC_SMPR2_
1240:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_247CYCLES_5    (ADC_SMPR2_SMP10_2 | ADC_SMPR2_SMP10_1             
1241:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_640CYCLES_5    (ADC_SMPR2_SMP10_2 | ADC_SMPR2_SMP10_1 | ADC_SMPR2_
1242:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1243:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1244:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1245:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
1246:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1247:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL_SINGLE_DIFF_ENDING  Channel - Single or differential ending
1248:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1249:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1250:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SINGLE_ENDED                (                  ADC_CALFACT_CALFACT_S)         /*!< A
1251:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DIFFERENTIAL_ENDED          (ADC_CR_ADCALDIF | ADC_CALFACT_CALFACT_D)         /*!< A
1252:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_BOTH_SINGLE_DIFF_ENDED      (LL_ADC_SINGLE_ENDED | LL_ADC_DIFFERENTIAL_ENDED) /*!< A
1253:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1254:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1255:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1256:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1257:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_NUMBER Analog watchdog - Analog watchdog number
1258:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1259:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1260:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD1                        (ADC_AWD_CR1_CHANNEL_MASK  | ADC_AWD_CR1_REGOFFSET) /*!<
1261:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD2                        (ADC_AWD_CR23_CHANNEL_MASK | ADC_AWD_CR2_REGOFFSET) /*!<
1262:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD3                        (ADC_AWD_CR23_CHANNEL_MASK | ADC_AWD_CR3_REGOFFSET) /*!<
1263:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1264:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1265:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1266:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1267:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_CHANNELS  Analog watchdog - Monitored channels
1268:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1269:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1270:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_DISABLE                 (0x00000000UL)                                          
1271:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_ALL_CHANNELS_REG        (ADC_AWD_CR23_CHANNEL_MASK                              
1272:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_ALL_CHANNELS_INJ        (ADC_AWD_CR23_CHANNEL_MASK                 | ADC_CFGR_JA
1273:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_ALL_CHANNELS_REG_INJ    (ADC_AWD_CR23_CHANNEL_MASK                 | ADC_CFGR_JA
1274:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_0_REG           ((LL_ADC_CHANNEL_0  & ADC_CHANNEL_ID_MASK)              
1275:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_0_INJ           ((LL_ADC_CHANNEL_0  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1276:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_0_REG_INJ       ((LL_ADC_CHANNEL_0  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1277:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_1_REG           ((LL_ADC_CHANNEL_1  & ADC_CHANNEL_ID_MASK)              
1278:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_1_INJ           ((LL_ADC_CHANNEL_1  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1279:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_1_REG_INJ       ((LL_ADC_CHANNEL_1  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1280:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_2_REG           ((LL_ADC_CHANNEL_2  & ADC_CHANNEL_ID_MASK)              
1281:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_2_INJ           ((LL_ADC_CHANNEL_2  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1282:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_2_REG_INJ       ((LL_ADC_CHANNEL_2  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1283:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_3_REG           ((LL_ADC_CHANNEL_3  & ADC_CHANNEL_ID_MASK)              
1284:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_3_INJ           ((LL_ADC_CHANNEL_3  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1285:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_3_REG_INJ       ((LL_ADC_CHANNEL_3  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1286:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_4_REG           ((LL_ADC_CHANNEL_4  & ADC_CHANNEL_ID_MASK)              
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 24


1287:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_4_INJ           ((LL_ADC_CHANNEL_4  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1288:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_4_REG_INJ       ((LL_ADC_CHANNEL_4  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1289:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_5_REG           ((LL_ADC_CHANNEL_5  & ADC_CHANNEL_ID_MASK)              
1290:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_5_INJ           ((LL_ADC_CHANNEL_5  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1291:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_5_REG_INJ       ((LL_ADC_CHANNEL_5  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1292:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_6_REG           ((LL_ADC_CHANNEL_6  & ADC_CHANNEL_ID_MASK)              
1293:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_6_INJ           ((LL_ADC_CHANNEL_6  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1294:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_6_REG_INJ       ((LL_ADC_CHANNEL_6  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1295:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_7_REG           ((LL_ADC_CHANNEL_7  & ADC_CHANNEL_ID_MASK)              
1296:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_7_INJ           ((LL_ADC_CHANNEL_7  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1297:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_7_REG_INJ       ((LL_ADC_CHANNEL_7  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1298:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_8_REG           ((LL_ADC_CHANNEL_8  & ADC_CHANNEL_ID_MASK)              
1299:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_8_INJ           ((LL_ADC_CHANNEL_8  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1300:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_8_REG_INJ       ((LL_ADC_CHANNEL_8  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1301:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_9_REG           ((LL_ADC_CHANNEL_9  & ADC_CHANNEL_ID_MASK)              
1302:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_9_INJ           ((LL_ADC_CHANNEL_9  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1303:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_9_REG_INJ       ((LL_ADC_CHANNEL_9  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1304:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_10_REG          ((LL_ADC_CHANNEL_10 & ADC_CHANNEL_ID_MASK)              
1305:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_10_INJ          ((LL_ADC_CHANNEL_10 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1306:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_10_REG_INJ      ((LL_ADC_CHANNEL_10 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1307:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_11_REG          ((LL_ADC_CHANNEL_11 & ADC_CHANNEL_ID_MASK)              
1308:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_11_INJ          ((LL_ADC_CHANNEL_11 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1309:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_11_REG_INJ      ((LL_ADC_CHANNEL_11 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1310:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_12_REG          ((LL_ADC_CHANNEL_12 & ADC_CHANNEL_ID_MASK)              
1311:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_12_INJ          ((LL_ADC_CHANNEL_12 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1312:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_12_REG_INJ      ((LL_ADC_CHANNEL_12 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1313:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_13_REG          ((LL_ADC_CHANNEL_13 & ADC_CHANNEL_ID_MASK)              
1314:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_13_INJ          ((LL_ADC_CHANNEL_13 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1315:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_13_REG_INJ      ((LL_ADC_CHANNEL_13 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1316:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_14_REG          ((LL_ADC_CHANNEL_14 & ADC_CHANNEL_ID_MASK)              
1317:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_14_INJ          ((LL_ADC_CHANNEL_14 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1318:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_14_REG_INJ      ((LL_ADC_CHANNEL_14 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1319:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_15_REG          ((LL_ADC_CHANNEL_15 & ADC_CHANNEL_ID_MASK)              
1320:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_15_INJ          ((LL_ADC_CHANNEL_15 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1321:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_15_REG_INJ      ((LL_ADC_CHANNEL_15 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1322:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_16_REG          ((LL_ADC_CHANNEL_16 & ADC_CHANNEL_ID_MASK)              
1323:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_16_INJ          ((LL_ADC_CHANNEL_16 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1324:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_16_REG_INJ      ((LL_ADC_CHANNEL_16 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1325:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_17_REG          ((LL_ADC_CHANNEL_17 & ADC_CHANNEL_ID_MASK)              
1326:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_17_INJ          ((LL_ADC_CHANNEL_17 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1327:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_17_REG_INJ      ((LL_ADC_CHANNEL_17 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1328:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_18_REG          ((LL_ADC_CHANNEL_18 & ADC_CHANNEL_ID_MASK)              
1329:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_18_INJ          ((LL_ADC_CHANNEL_18 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1330:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_18_REG_INJ      ((LL_ADC_CHANNEL_18 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1331:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_19_REG          ((LL_ADC_CHANNEL_19 & ADC_CHANNEL_ID_MASK)              
1332:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_19_INJ          ((LL_ADC_CHANNEL_19 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1333:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_19_REG_INJ      ((LL_ADC_CHANNEL_19 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1334:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_VREFINT_REG          ((LL_ADC_CHANNEL_VREFINT       & ADC_CHANNEL_ID_MASK)   
1335:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_VREFINT_INJ          ((LL_ADC_CHANNEL_VREFINT       & ADC_CHANNEL_ID_MASK) | 
1336:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_VREFINT_REG_INJ      ((LL_ADC_CHANNEL_VREFINT       & ADC_CHANNEL_ID_MASK) | 
1337:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_REG       ((LL_ADC_CHANNEL_TEMPSENSOR    & ADC_CHANNEL_ID_MASK)   
1338:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_INJ       ((LL_ADC_CHANNEL_TEMPSENSOR    & ADC_CHANNEL_ID_MASK) | 
1339:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_REG_INJ   ((LL_ADC_CHANNEL_TEMPSENSOR    & ADC_CHANNEL_ID_MASK) | 
1340:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_VBAT_REG             ((LL_ADC_CHANNEL_VBAT          & ADC_CHANNEL_ID_MASK)   
1341:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_VBAT_INJ             ((LL_ADC_CHANNEL_VBAT          & ADC_CHANNEL_ID_MASK) | 
1342:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_VBAT_REG_INJ         ((LL_ADC_CHANNEL_VBAT          & ADC_CHANNEL_ID_MASK) | 
1343:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_DAC1CH1_ADC2_REG     ((LL_ADC_CHANNEL_DAC1CH1_ADC2  & ADC_CHANNEL_ID_MASK)   
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 25


1344:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_DAC1CH1_ADC2_INJ     ((LL_ADC_CHANNEL_DAC1CH1_ADC2  & ADC_CHANNEL_ID_MASK) | 
1345:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_DAC1CH1_ADC2_REG_INJ ((LL_ADC_CHANNEL_DAC1CH1_ADC2  & ADC_CHANNEL_ID_MASK) | 
1346:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_DAC1CH2_ADC2_REG     ((LL_ADC_CHANNEL_DAC1CH2_ADC2  & ADC_CHANNEL_ID_MASK)   
1347:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_DAC1CH2_ADC2_INJ     ((LL_ADC_CHANNEL_DAC1CH2_ADC2  & ADC_CHANNEL_ID_MASK) | 
1348:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_DAC1CH2_ADC2_REG_INJ ((LL_ADC_CHANNEL_DAC1CH2_ADC2  & ADC_CHANNEL_ID_MASK) | 
1349:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1350:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1351:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1352:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1353:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_THRESHOLDS  Analog watchdog - Thresholds
1354:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1355:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1356:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_THRESHOLD_HIGH          (0x1UL)                     /*!< ADC analog watchdog thr
1357:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_THRESHOLD_LOW           (0x0UL)                     /*!< ADC analog watchdog thr
1358:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1359:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1360:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1361:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
1362:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_FILTERING_CONFIG  Analog watchdog - filtering config
1363:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1364:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1365:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_NONE          (0x00000000UL)                                          
1366:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_2SAMPLES      (                                          ADC3_TR1_AWDF
1367:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_3SAMPLES      (                     ADC3_TR1_AWDFILT_1                
1368:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_4SAMPLES      (                     ADC3_TR1_AWDFILT_1 | ADC3_TR1_AWDF
1369:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_5SAMPLES      (ADC3_TR1_AWDFILT_2                                     
1370:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_6SAMPLES      (ADC3_TR1_AWDFILT_2 |                      ADC3_TR1_AWDF
1371:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_7SAMPLES      (ADC3_TR1_AWDFILT_2 | ADC3_TR1_AWDFILT_1                
1372:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_8SAMPLES      (ADC3_TR1_AWDFILT_2 | ADC3_TR1_AWDFILT_1 | ADC3_TR1_AWDF
1373:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1374:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1375:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1376:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
1377:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1378:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_SCOPE  Oversampling - Oversampling scope
1379:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1380:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1381:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_DISABLE                 (0x00000000UL)                                        /*
1382:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_GRP_REGULAR_CONTINUED   (                                    ADC_CFGR2_ROVSE) /*
1383:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_GRP_REGULAR_RESUMED     (ADC_CFGR2_ROVSM |                   ADC_CFGR2_ROVSE) /*
1384:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_GRP_INJECTED            (                  ADC_CFGR2_JOVSE                  ) /*
1385:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_GRP_INJ_REG_RESUMED     (                  ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE) /*
1386:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1387:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1388:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1389:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1390:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_DISCONT_MODE  Oversampling - Discontinuous mode
1391:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1392:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1393:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_REG_CONT                (0x00000000UL)         /*!< ADC oversampling discontinuo
1394:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_REG_DISCONT             (ADC_CFGR2_TROVS)      /*!< ADC oversampling discontinuo
1395:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1396:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1397:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1398:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
1399:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_RATIO  Oversampling - Ratio
1400:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 26


1401:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1402:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_2                 (0x00000000UL)                                          
1403:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_4                 (                                        ADC3_CFGR2_OVSR
1404:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_8                 (                    ADC3_CFGR2_OVSR_1                  
1405:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_16                (                    ADC3_CFGR2_OVSR_1 | ADC3_CFGR2_OVSR
1406:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_32                (ADC3_CFGR2_OVSR_2                                      
1407:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_64                (ADC3_CFGR2_OVSR_2                     | ADC3_CFGR2_OVSR
1408:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_128               (ADC3_CFGR2_OVSR_2 | ADC3_CFGR2_OVSR_1                  
1409:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_256               (ADC3_CFGR2_OVSR_2 | ADC3_CFGR2_OVSR_1 | ADC3_CFGR2_OVSR
1410:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1411:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1412:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1413:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
1414:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1415:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_SHIFT  Oversampling - Data shift
1416:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1417:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1418:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_NONE              (0x00000000UL)                                          
1419:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_1           (                                                       
1420:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_2           (                                      ADC_CFGR2_OVSS_1 
1421:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_3           (                                      ADC_CFGR2_OVSS_1 
1422:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_4           (                   ADC_CFGR2_OVSS_2                    
1423:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_5           (                   ADC_CFGR2_OVSS_2                    
1424:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_6           (                   ADC_CFGR2_OVSS_2 | ADC_CFGR2_OVSS_1 
1425:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_7           (                   ADC_CFGR2_OVSS_2 | ADC_CFGR2_OVSS_1 
1426:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_8           (ADC_CFGR2_OVSS_3                                       
1427:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_9           (ADC_CFGR2_OVSS_3                                       
1428:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_10          (ADC_CFGR2_OVSS_3                    | ADC_CFGR2_OVSS_1 
1429:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_11          (ADC_CFGR2_OVSS_3                    | ADC_CFGR2_OVSS_1 
1430:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1431:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1432:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1433:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1434:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_MULTI_MODE  Multimode - Mode
1435:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1436:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1437:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_INDEPENDENT           (0x00000000UL)                                          
1438:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_SIMULT       (                 ADC_CCR_DUAL_2 | ADC_CCR_DUAL_1       
1439:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_INTERL       (                 ADC_CCR_DUAL_2 | ADC_CCR_DUAL_1 | ADC_
1440:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_INJ_SIMULT       (                 ADC_CCR_DUAL_2                  | ADC_
1441:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_INJ_ALTERN       (ADC_CCR_DUAL_3                                   | ADC_
1442:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM  (                                                   ADC_
1443:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT  (                                  ADC_CCR_DUAL_1       
1444:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM  (                                  ADC_CCR_DUAL_1 | ADC_
1445:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1446:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1447:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1448:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1449:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_MULTI_DMA_TRANSFER  Multimode - DMA transfer
1450:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1451:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1452:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_REG_DMA_EACH_ADC        (0x00000000UL)                      /*!< ADC multimode
1453:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_REG_DMA_RES_32_10B      (ADC_CCR_DAMDF_1                  ) /*!< ADC multimode
1454:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_REG_DMA_RES_8B          (ADC_CCR_DAMDF_1 | ADC_CCR_DAMDF_0) /*!< ADC multimode
1455:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1456:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1457:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 27


1458:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1459:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_MULTI_TWOSMP_DELAY  Multimode - Delay between two sampling phases
1460:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1461:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1462:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_1CYCLE_5           (0x00000000UL)                                
1463:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_2CYCLES_5          (                                             
1464:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_3CYCLES_5          (                                    ADC_CCR_D
1465:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES_5          (                                    ADC_CCR_D
1466:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES_5_8_BITS   (                  ADC_CCR_DELAY_2 | ADC_CCR_D
1467:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES_5          (                  ADC_CCR_DELAY_2            
1468:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES_5_10_BITS  (                  ADC_CCR_DELAY_2 | ADC_CCR_D
1469:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES            (ADC_CCR_DELAY_3                              
1470:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES_5          (                  ADC_CCR_DELAY_2            
1471:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES_5_12_BITS  (                  ADC_CCR_DELAY_2 | ADC_CCR_D
1472:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_7CYCLES_5          (                  ADC_CCR_DELAY_2 | ADC_CCR_D
1473:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_8CYCLES            (ADC_CCR_DELAY_3                              
1474:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_9CYCLES            (ADC_CCR_DELAY_3                              
1475:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1476:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1477:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1478:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1479:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_MULTI_MASTER_SLAVE  Multimode - ADC master or slave
1480:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1481:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1482:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_MASTER                (                    ADC_CDR_RDATA_MST) /*!< In multimod
1483:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_SLAVE                 (ADC_CDR_RDATA_SLV                    ) /*!< In multimod
1484:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_MASTER_SLAVE          (ADC_CDR_RDATA_SLV | ADC_CDR_RDATA_MST) /*!< In multimod
1485:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1486:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1487:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1488:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1489:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1490:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1491:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_HW_DELAYS  Definitions of ADC hardware constraints delays
1492:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Only ADC peripheral HW delays are defined in ADC LL driver driver,
1493:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         not timeout values.
1494:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         For details on delays values, refer to descriptions in source code
1495:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         above each literal definition.
1496:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1497:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1498:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1499:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Note: Only ADC peripheral HW delays are defined in ADC LL driver driver,   */
1500:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       not timeout values.                                                  */
1501:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       Timeout values for ADC operations are dependent to device clock      */
1502:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       configuration (system clock versus ADC clock),                       */
1503:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       and therefore must be defined in user application.                   */
1504:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       Indications for estimation of ADC timeout delays, for this           */
1505:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       STM32 series:                                                         */
1506:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       - ADC calibration time: maximum delay is 16384/fADC.                   */
1507:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*         (refer to device datasheet, parameter "tCAL")                      */
1508:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       - ADC enable time: maximum delay is 1 conversion cycle.              */
1509:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*         (refer to device datasheet, parameter "tSTAB")                     */
1510:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       - ADC disable time: maximum delay should be a few ADC clock cycles   */
1511:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       - ADC stop conversion time: maximum delay should be a few ADC clock  */
1512:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*         cycles                                                             */
1513:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       - ADC conversion time: duration depending on ADC clock and ADC       */
1514:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*         configuration.                                                     */
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 28


1515:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*         (refer to device reference manual, section "Timing")               */
1516:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1517:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Delay for ADC stabilization time (ADC voltage regulator start-up time)     */
1518:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Delay set to maximum value (refer to device datasheet,                     */
1519:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* parameter "tADCVREG_STUP").                                                */
1520:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Unit: us                                                                   */
1521:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DELAY_INTERNAL_REGUL_STAB_US ( 10UL)  /*!< Delay for ADC stabilization time (ADC vol
1522:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1523:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Delay for internal voltage reference stabilization time.                   */
1524:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Delay set to maximum value (refer to device datasheet,                     */
1525:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* parameter "ts_vrefint").                                                   */
1526:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Unit: us                                                                   */
1527:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DELAY_VREFINT_STAB_US       (5UL)  /*!< Delay for internal voltage reference stabili
1528:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1529:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Delay for temperature sensor stabilization time.                           */
1530:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Literal set to maximum value (refer to device datasheet,                   */
1531:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* parameter "tSTART_RUN").                                                   */
1532:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Unit: us                                                                   */
1533:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DELAY_TEMPSENSOR_STAB_US    ( 26UL)  /*!< Delay for temperature sensor stabilization
1534:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1535:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Delay required between ADC end of calibration and ADC enable.              */
1536:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Note: On this STM32 series, a minimum number of ADC clock cycles            */
1537:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       are required between ADC end of calibration and ADC enable.          */
1538:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       Wait time can be computed in user application by waiting for the     */
1539:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       equivalent number of CPU cycles, by taking into account              */
1540:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       ratio of CPU clock versus ADC clock prescalers.                      */
1541:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Unit: ADC clock cycles.                                                    */
1542:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DELAY_CALIB_ENABLE_ADC_CYCLES (  4UL)  /*!< Delay required between ADC end of calibr
1543:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1544:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Fixed timeout value for ADC linearity word bit set/clear delay.                         */
1545:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Values defined to be higher than worst cases: low clock frequency,                      */
1546:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* maximum prescalers.                                                                     */
1547:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Ex of profile low frequency : f_ADC at 4,577 Khz (minimum value                         */
1548:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* according to Data sheet), linearity set/clear bit delay MAX = 6 / f_ADC + 3 cycles AHB  */
1549:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*           6 / 4577 = 1,311ms                                                            */
1550:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* At maximum CPU speed (400 MHz), this means                                              */
1551:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*    3.58 * 400 MHz = 524400 CPU cycles                                                   */
1552:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEARITY_BIT_TOGGLE_TIMEOUT         (524400UL)      /*!< ADC linearity set/clear bit d
1553:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1554:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1555:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1556:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1557:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1558:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1559:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1560:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1561:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1562:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1563:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Exported macro ------------------------------------------------------------*/
1564:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_Exported_Macros ADC Exported Macros
1565:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1566:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1567:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1568:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EM_WRITE_READ Common write and read registers Macros
1569:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1570:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1571:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 29


1572:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1573:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Write a value in ADC register
1574:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __INSTANCE__ ADC Instance
1575:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __REG__ Register to be written
1576:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __VALUE__ Value to be written in the register
1577:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
1578:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1579:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE
1580:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1581:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1582:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Read a value in ADC register
1583:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __INSTANCE__ ADC Instance
1584:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __REG__ Register to be read
1585:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Register value
1586:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1587:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
1588:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1589:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1590:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1591:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1592:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EM_HELPER_MACRO ADC helper macro
1593:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1594:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1595:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1596:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
1597:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1598:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to convert the resolution defines to STM32H73x/2x ADC3 registers values
1599:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         value corresponding to the ADC3 resolution according to the STM32H73x/2x RefMan.
1600:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The input can be a value from ADC3 resolution (12b, 10b, 8b,6b)
1601:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
1602:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1603:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
1604:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1605:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
1606:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1607:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg 0x00000000UL (value correspodning to ADC3 12 bits)
1608:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg ADC_CFGR_RES_0 = 0x00000004  (value corresponding to ADC3 10 bits)
1609:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg ADC_CFGR_RES_1 = 0x00000008 (value corresponding to ADC3 8 bits)
1610:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg 0x0000001C (value corresponding to ADC3 6 bits)
1611:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This helper macro is applicable for STM32H73x/2x devices only
1612:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1613:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC12_RESOLUTION_TO_ADC3(__ADC_RESOLUTION__)                      \
1614:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          (                                                                     \
1615:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            ((__ADC_RESOLUTION__) == LL_ADC_RESOLUTION_12B)                     \
1616:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****             ?(0x00000000UL)                                                    \
1617:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              :                                                                 \
1618:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ((__ADC_RESOLUTION__) == LL_ADC_RESOLUTION_10B)                   \
1619:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ?(ADC_CFGR_RES_0)                                               \
1620:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                 :                                                              \
1621:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                 ((__ADC_RESOLUTION__) == LL_ADC_RESOLUTION_8B)                 \
1622:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                   ?(ADC_CFGR_RES_1)                                            \
1623:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    :                                                           \
1624:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    ((__ADC_RESOLUTION__) == LL_ADC_RESOLUTION_6B)              \
1625:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                      ?((ADC_CFGR_RES_2|ADC_CFGR_RES_1 | ADC_CFGR_RES_0))       \
1626:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                        :(0x00000000UL)                                         \
1627:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          )
1628:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 30


1629:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
1630:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1631:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1632:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to get ADC channel number in decimal format
1633:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         from literals LL_ADC_CHANNEL_x.
1634:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Example:
1635:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           __LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_CHANNEL_4)
1636:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           will return decimal number "4".
1637:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The input can be a value from functions where a channel
1638:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         number is returned, either defined with number
1639:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or with bitfield (only one bit must be set).
1640:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1641:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
1642:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
1643:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
1644:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
1645:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
1646:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
1647:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1648:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1649:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1650:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1651:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1652:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1653:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1654:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1655:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1656:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1657:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1658:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1659:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1660:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
1661:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
1662:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
1663:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
1664:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
1665:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
1666:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
1667:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
1668:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
1669:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
1670:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
1671:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0 and Max_Data=18
1672:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1673:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CHANNEL_TO_DECIMAL_NB(__CHANNEL__)                                        \
1674:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((((__CHANNEL__) & ADC_CHANNEL_ID_BITFIELD_MASK) == 0UL)                                 \
1675:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ? (                                                                                    \
1676:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS \
1677:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                                    \
1678:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       :                                                                                    \
1679:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       (                                                                                    \
1680:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (uint32_t)POSITION_VAL((__CHANNEL__))                                               \
1681:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                                    \
1682:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
1683:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1684:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1685:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to get ADC channel in literal format LL_ADC_CHANNEL_x
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 31


1686:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         from number in decimal format.
1687:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Example:
1688:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           __LL_ADC_DECIMAL_NB_TO_CHANNEL(4)
1689:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           will return a data equivalent to "LL_ADC_CHANNEL_4".
1690:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __DECIMAL_NB__ Value between Min_Data=0 and Max_Data=18
1691:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1692:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
1693:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
1694:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
1695:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
1696:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
1697:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
1698:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1699:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1700:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1701:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1702:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1703:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1704:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1705:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1706:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1707:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1708:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1709:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1710:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1711:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
1712:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
1713:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
1714:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
1715:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
1716:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
1717:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
1718:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
1719:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
1720:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
1721:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).\n
1722:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1, 2) For ADC channel read back from ADC register,
1723:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                comparison with internal channel parameter to be done
1724:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
1725:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1726:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_DECIMAL_NB_TO_CHANNEL(__DECIMAL_NB__)                                             
1727:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((__DECIMAL_NB__) <= 9UL)                                                                       
1728:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ? (                                                                                            
1729:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__DECIMAL_NB__) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)                             |     
1730:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (ADC_AWD2CR_AWD2CH_0 << (__DECIMAL_NB__))                                             |     
1731:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (ADC_SMPR1_REGOFFSET | (((3UL * (__DECIMAL_NB__))) << ADC_CHANNEL_SMPx_BITOFFSET_POS))      
1732:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                                            
1733:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       :                                                                                            
1734:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       (                                                                                            
1735:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__DECIMAL_NB__) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)                                   
1736:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (ADC_AWD2CR_AWD2CH_0 << (__DECIMAL_NB__))                                                   
1737:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (ADC_SMPR2_REGOFFSET | (((3UL * ((__DECIMAL_NB__) - 10UL))) << ADC_CHANNEL_SMPx_BITOFFSET_PO
1738:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                                            
1739:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
1740:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1741:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1742:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to determine whether the selected channel
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 32


1743:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         corresponds to literal definitions of driver.
1744:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The different literal definitions of ADC channels are:
1745:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC internal channel:
1746:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           LL_ADC_CHANNEL_VREFINT, LL_ADC_CHANNEL_TEMPSENSOR, ...
1747:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC external channel (channel connected to a GPIO pin):
1748:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...
1749:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The channel parameter must be a value defined from literal
1750:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         definition of a ADC internal channel (LL_ADC_CHANNEL_VREFINT,
1751:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         LL_ADC_CHANNEL_TEMPSENSOR, ...),
1752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC external channel (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...),
1753:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         must not be a value from functions where a channel number is
1754:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         returned from ADC registers,
1755:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         because internal and external channels share the same channel
1756:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         number in ADC registers. The differentiation is made only with
1757:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         parameters definitions of driver.
1758:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1759:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
1760:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
1761:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
1762:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
1763:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
1764:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
1765:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1766:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1767:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1768:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1769:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1770:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1771:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1772:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1773:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1774:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1775:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1776:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1777:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1778:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
1779:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
1780:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
1781:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
1782:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
1783:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
1784:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
1785:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
1786:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
1787:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
1788:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
1789:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value "0" if the channel corresponds to a parameter definition of a ADC external channe
1790:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Value "1" if the channel corresponds to a parameter definition of a ADC internal channe
1791:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1792:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_IS_CHANNEL_INTERNAL(__CHANNEL__)                              \
1793:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((__CHANNEL__) & ADC_CHANNEL_ID_INTERNAL_CH_MASK) != 0UL)
1794:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1795:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1796:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to convert a channel defined from parameter
1797:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         definition of a ADC internal channel (LL_ADC_CHANNEL_VREFINT,
1798:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         LL_ADC_CHANNEL_TEMPSENSOR, ...),
1799:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         to its equivalent parameter definition of a ADC external channel
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 33


1800:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...).
1801:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The channel parameter can be, additionally to a value
1802:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         defined from parameter definition of a ADC internal channel
1803:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (LL_ADC_CHANNEL_VREFINT, LL_ADC_CHANNEL_TEMPSENSOR, ...),
1804:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a value defined from parameter definition of
1805:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC external channel (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...)
1806:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or a value from functions where a channel number is returned
1807:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         from ADC registers.
1808:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1809:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
1810:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
1811:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
1812:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
1813:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
1814:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
1815:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1816:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1817:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1818:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1819:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1820:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1821:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1822:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1823:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1824:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1825:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1826:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1827:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1828:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
1829:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
1830:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
1831:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
1832:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
1833:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
1834:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
1835:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
1836:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
1837:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
1838:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
1839:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1840:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1841:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
1842:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
1843:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
1844:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
1845:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
1846:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1847:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1848:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1849:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1850:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1851:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1852:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1853:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1854:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1855:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1856:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 34


1857:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1858:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1859:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
1860:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1861:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL(__CHANNEL__)                     \
1862:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((__CHANNEL__) & ~ADC_CHANNEL_ID_INTERNAL_CH_MASK)
1863:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1864:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1865:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to determine whether the internal channel
1866:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         selected is available on the ADC instance selected.
1867:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The channel parameter must be a value defined from parameter
1868:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         definition of a ADC internal channel (LL_ADC_CHANNEL_VREFINT,
1869:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         LL_ADC_CHANNEL_TEMPSENSOR, ...),
1870:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         must not be a value defined from parameter definition of
1871:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC external channel (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...)
1872:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or a value from functions where a channel number is
1873:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         returned from ADC registers,
1874:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         because internal and external channels share the same channel
1875:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         number in ADC registers. The differentiation is made only with
1876:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         parameters definitions of driver.
1877:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_INSTANCE__ ADC instance
1878:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1879:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
1880:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
1881:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
1882:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
1883:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
1884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
1885:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
1886:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.
1887:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value "0" if the internal channel selected is not available on the ADC instance selecte
1888:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Value "1" if the internal channel selected is available on the ADC instance selected.
1889:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1890:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC3)
1891:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_IS_CHANNEL_INTERNAL_AVAILABLE(__ADC_INSTANCE__, __CHANNEL__)  \
1892:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((((__ADC_INSTANCE__) == ADC2)                                               \
1893:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     &&(                                                                        \
1894:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_DAC1CH1_ADC2) ||                       \
1895:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_DAC1CH2_ADC2)                          \
1896:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
1897:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    )                                                                           \
1898:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    ||                                                                          \
1899:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    (((__ADC_INSTANCE__) == ADC3)                                               \
1900:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     &&(                                                                        \
1901:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_TEMPSENSOR)   ||                       \
1902:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VBAT)         ||                       \
1903:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)                               \
1904:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
1905:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    )                                                                           \
1906:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
1907:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
1908:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_IS_CHANNEL_INTERNAL_AVAILABLE(__ADC_INSTANCE__, __CHANNEL__)  \
1909:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((((__ADC_INSTANCE__) == ADC2)                                               \
1910:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     &&(                                                                        \
1911:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_DAC1CH1_ADC2) ||                       \
1912:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_DAC1CH2_ADC2) ||                       \
1913:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_TEMPSENSOR)   ||                       \
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 35


1914:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VBAT)         ||                       \
1915:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)                               \
1916:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
1917:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    )                                                                           \
1918:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
1919:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
1920:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1921:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1922:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to define ADC analog watchdog parameter:
1923:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         define a single channel to monitor with analog watchdog
1924:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         from sequencer channel and groups definition.
1925:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_SetAnalogWDMonitChannels().
1926:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example:
1927:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           LL_ADC_SetAnalogWDMonitChannels(
1928:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC1, LL_ADC_AWD1,
1929:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             __LL_ADC_ANALOGWD_CHANNEL_GROUP(LL_ADC_CHANNEL4, LL_ADC_GROUP_REGULAR))
1930:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1931:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
1932:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
1933:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
1934:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
1935:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
1936:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
1937:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1938:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1939:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1940:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1941:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1942:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1943:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1944:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1945:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1946:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1947:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1948:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1949:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1950:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
1951:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
1952:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
1953:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
1954:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
1955:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
1956:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
1957:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
1958:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
1959:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
1960:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).\n
1961:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1, 2) For ADC channel read back from ADC register,
1962:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                comparison with internal channel parameter to be done
1963:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
1964:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __GROUP__ This parameter can be one of the following values:
1965:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_GROUP_REGULAR
1966:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_GROUP_INJECTED
1967:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_GROUP_REGULAR_INJECTED
1968:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1969:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_DISABLE
1970:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG        (0)
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 36


1971:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_INJ        (0)
1972:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG_INJ
1973:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG           (0)
1974:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_INJ           (0)
1975:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG_INJ
1976:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG           (0)
1977:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_INJ           (0)
1978:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG_INJ
1979:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG           (0)
1980:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_INJ           (0)
1981:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG_INJ
1982:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG           (0)
1983:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_INJ           (0)
1984:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG_INJ
1985:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG           (0)
1986:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_INJ           (0)
1987:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG_INJ
1988:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG           (0)
1989:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_INJ           (0)
1990:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG_INJ
1991:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG           (0)
1992:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_INJ           (0)
1993:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG_INJ
1994:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG           (0)
1995:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_INJ           (0)
1996:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG_INJ
1997:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG           (0)
1998:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_INJ           (0)
1999:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG_INJ
2000:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG           (0)
2001:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_INJ           (0)
2002:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG_INJ
2003:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG          (0)
2004:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_INJ          (0)
2005:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG_INJ
2006:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG          (0)
2007:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_INJ          (0)
2008:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG_INJ
2009:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG          (0)
2010:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_INJ          (0)
2011:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG_INJ
2012:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG          (0)
2013:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_INJ          (0)
2014:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG_INJ
2015:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG          (0)
2016:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_INJ          (0)
2017:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG_INJ
2018:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG          (0)
2019:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_INJ          (0)
2020:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG_INJ
2021:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG          (0)
2022:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_INJ          (0)
2023:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG_INJ
2024:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG          (0)
2025:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_INJ          (0)
2026:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG_INJ
2027:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG          (0)
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 37


2028:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_INJ          (0)
2029:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG_INJ
2030:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_REG          (0)
2031:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_INJ          (0)
2032:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_REG_INJ
2033:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG          (0)(1)
2034:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_INJ          (0)(1)
2035:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG_INJ         (1)
2036:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG       (0)(1)
2037:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_INJ       (0)(1)
2038:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG_INJ      (1)
2039:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG             (0)(1)
2040:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_INJ             (0)(1)
2041:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG_INJ            (1)
2042:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH1_ADC2_REG     (0)(2)
2043:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH1_ADC2_INJ     (0)(2)
2044:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH1_ADC2_REG_INJ    (2)
2045:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH2_ADC2_REG     (0)(2)
2046:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH2_ADC2_INJ     (0)(2)
2047:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH2_ADC2_REG_INJ    (2)
2048:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
2049:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (0) On STM32H7, parameter available only on analog watchdog number: AWD1.\n
2050:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
2051:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.
2052:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2053:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_CHANNEL_GROUP(__CHANNEL__, __GROUP__)                                    
2054:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((__GROUP__) == LL_ADC_GROUP_REGULAR)                                                           
2055:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ? (((__CHANNEL__) & ADC_CHANNEL_ID_MASK) | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)                 
2056:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       :                                                                                            
2057:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       ((__GROUP__) == LL_ADC_GROUP_INJECTED)                                                       
2058:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ? (((__CHANNEL__) & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1SGL)             
2059:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          :                                                                                         
2060:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          (((__CHANNEL__) & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD
2061:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2062:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2063:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2064:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to set the value of ADC analog watchdog threshold high
2065:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or low in function of ADC resolution, when ADC resolution is
2066:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         different of 16 bits.
2067:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_SetAnalogWDThresholds().
2068:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example, with a ADC resolution of 8 bits, to set the value of
2069:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         analog watchdog threshold high (on 18 bits):
2070:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           LL_ADC_SetAnalogWDThresholds
2071:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            (< ADCx param >,
2072:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION(LL_ADC_RESOLUTION_8B, <threshold_value_1
2073:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            );
2074:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2075:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2076:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2077:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2078:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2079:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2080:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __AWD_THRESHOLD__ Value between Min_Data=0x000000 and Max_Data=0xFFFFFF
2081:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000000 and Max_Data=0xFFFFFF
2082:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2083:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION(__ADC_RESOLUTION__, __AWD_THRESHOLD__) \
2084:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((__AWD_THRESHOLD__) << ((__ADC_RESOLUTION__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1U )))
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 38


2085:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2086:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2087:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to get the value of ADC analog watchdog threshold high
2088:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or low in function of ADC resolution, when ADC resolution is
2089:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         different of 16 bits.
2090:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_GetAnalogWDThresholds().
2091:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example, with a ADC resolution of 8 bits, to get the value of
2092:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         analog watchdog threshold high (on 18 bits):
2093:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           < threshold_value_18_bits > = __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION
2094:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            (LL_ADC_RESOLUTION_8B,
2095:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_GetAnalogWDThresholds(<ADCx param>, LL_ADC_AWD_THRESHOLD_HIGH)
2096:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            );
2097:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2098:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2099:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2100:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2101:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2102:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2103:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __AWD_THRESHOLD_16_BITS__ Value between Min_Data=0x000000 and Max_Data=0xFFFFFF
2104:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000000 and Max_Data=0xFFFFFF
2105:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2106:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION(__ADC_RESOLUTION__, __AWD_THRESHOLD_16_BITS__) \
2107:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((__AWD_THRESHOLD_16_BITS__) >> ((__ADC_RESOLUTION__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1U )))
2108:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2109:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2110:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to set the ADC calibration value with both single ended
2111:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and differential modes calibration factors concatenated.
2112:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_SetCalibrationOffsetFactor().
2113:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example, to set calibration factors single ended to 0x55
2114:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and differential ended to 0x2A:
2115:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           LL_ADC_SetCalibrationOffsetFactor(
2116:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC1,
2117:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             __LL_ADC_CALIB_FACTOR_SINGLE_DIFF(0x55, 0x2A))
2118:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __CALIB_FACTOR_SINGLE_ENDED__ Value between Min_Data=0x00 and Max_Data=0x7F
2119:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __CALIB_FACTOR_DIFFERENTIAL__ Value between Min_Data=0x00 and Max_Data=0x7F
2120:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
2121:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2122:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CALIB_FACTOR_SINGLE_DIFF(__CALIB_FACTOR_SINGLE_ENDED__, __CALIB_FACTOR_DIFFERENTIA
2123:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((__CALIB_FACTOR_DIFFERENTIAL__) << ADC_CALFACT_CALFACT_D_Pos) | (__CALIB_FACTOR_SINGLE_ENDED__)
2124:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2125:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2126:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to get the ADC multimode conversion data of ADC master
2127:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or ADC slave from raw value with both ADC conversion data concatenated.
2128:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This macro is intended to be used when multimode transfer by DMA
2129:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is enabled: refer to function @ref LL_ADC_SetMultiDMATransfer().
2130:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         In this case the transferred data need to processed with this macro
2131:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         to separate the conversion data of ADC master and ADC slave.
2132:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_MULTI_MASTER_SLAVE__ This parameter can be one of the following values:
2133:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_MASTER
2134:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_SLAVE
2135:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_MULTI_CONV_DATA__ Value between Min_Data=0x000 and Max_Data=0xFFF
2136:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
2137:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2138:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_MULTI_CONV_DATA_MASTER_SLAVE(__ADC_MULTI_MASTER_SLAVE__, __ADC_MULTI_CONV_DATA__) 
2139:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((__ADC_MULTI_CONV_DATA__) >> ((ADC_CDR_RDATA_SLV_Pos) & ~(__ADC_MULTI_MASTER_SLAVE__))) & ADC_C
2140:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2141:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 39


2142:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to select, from a ADC instance, to which ADC instance
2143:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         it has a dependence in multimode (ADC master of the corresponding
2144:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC common instance).
2145:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of device with multimode available and a mix of
2146:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instances compliant and not compliant with multimode feature,
2147:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instances not compliant with multimode feature are
2148:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         considered as master instances (do not depend to
2149:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         any other ADC instance).
2150:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADCx__ ADC instance
2151:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval __ADCx__ ADC instance master of the corresponding ADC common instance
2152:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2153:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_MULTI_INSTANCE_MASTER(__ADCx__) \
2154:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ( ( ((__ADCx__) == ADC2)                                                     \
2155:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     )?                                                                         \
2156:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      (ADC1)                                                                    \
2157:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      :                                                                         \
2158:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      (__ADCx__)                                                                \
2159:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2160:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2161:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2162:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to select the ADC common instance
2163:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         to which is belonging the selected ADC instance.
2164:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   ADC common register instance can be used for:
2165:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Set parameters common to several ADC instances
2166:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Multimode (for devices with several ADC instances)
2167:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to functions having argument "ADCxy_COMMON" as parameter.
2168:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADCx__ ADC instance
2169:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval ADC common register instance
2170:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2171:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC3_COMMON)
2172:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_COMMON_INSTANCE(__ADCx__)                                     \
2173:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((((__ADCx__) == ADC1) || ((__ADCx__) == ADC2))                              \
2174:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ? (                                                                        \
2175:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (ADC12_COMMON)                                                          \
2176:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
2177:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       :                                                                        \
2178:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       (                                                                        \
2179:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (ADC3_COMMON)                                                           \
2180:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
2181:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2182:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
2183:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_COMMON_INSTANCE(__ADCx__)   (ADC12_COMMON)
2184:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
2185:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2186:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2187:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to check if all ADC instances sharing the same
2188:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC common instance are disabled.
2189:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This check is required by functions with setting conditioned to
2190:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
2191:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
2192:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to functions having argument "ADCxy_COMMON" as parameter.
2193:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On devices with only 1 ADC common instance, parameter of this macro
2194:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is useless and can be ignored (parameter kept for compatibility
2195:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         with devices featuring several ADC common instances).
2196:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADCXY_COMMON__ ADC common instance
2197:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2198:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value "0" if all ADC instances sharing the same ADC common instance
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 40


2199:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         are disabled.
2200:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Value "1" if at least one ADC instance sharing the same ADC common instance
2201:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is enabled.
2202:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2203:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC3_COMMON)
2204:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__ADCXY_COMMON__)              \
2205:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((__ADCXY_COMMON__) == ADC12_COMMON)                                        \
2206:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ? (                                                                        \
2207:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (LL_ADC_IsEnabled(ADC1) |                                               \
2208:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         LL_ADC_IsEnabled(ADC2)  )                                              \
2209:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
2210:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       :                                                                        \
2211:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       (                                                                        \
2212:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (LL_ADC_IsEnabled(ADC3))                                                \
2213:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
2214:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2215:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
2216:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__ADCXY_COMMON__)              \
2217:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                         (LL_ADC_IsEnabled(ADC1) | LL_ADC_IsEnabled(ADC2))
2218:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
2219:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2220:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2221:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to define the ADC conversion data full-scale digital
2222:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         value corresponding to the selected ADC resolution.
2223:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   ADC conversion data full-scale corresponds to voltage range
2224:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         determined by analog voltage references Vref+ and Vref-
2225:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (refer to reference manual).
2226:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2227:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2228:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2229:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2230:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2231:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2232:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval ADC conversion data full-scale digital value (unit: digital value of ADC conversion dat
2233:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2234:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__)                             \
2235:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (0xFFFFUL >> ((__ADC_RESOLUTION__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL)))
2236:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2237:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
2238:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2239:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to define the ADC conversion data full-scale digital
2240:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         value corresponding to the selected ADC resolution.
2241:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   ADC conversion data full-scale corresponds to voltage range
2242:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         determined by analog voltage references Vref+ and Vref-
2243:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (refer to reference manual).
2244:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2245:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2246:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2247:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2248:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2249:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval ADC conversion data equivalent voltage value (unit: digital value of ADC conversion bit
2250:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2251:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC3_DIGITAL_SCALE(__ADC_RESOLUTION__)                             \
2252:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     (0xFFFUL >> ((__ADC_RESOLUTION__) >> (ADC_CFGR_RES_BITOFFSET_POS_ADC3 - 1UL)))
2253:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
2254:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2255:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to convert the ADC conversion data from
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 41


2256:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a resolution to another resolution.
2257:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __DATA__ ADC conversion data to be converted
2258:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION_CURRENT__ Resolution of the data to be converted
2259:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This parameter can be one of the following values:
2260:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2261:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2262:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2263:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2264:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2265:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION_TARGET__ Resolution of the data after conversion
2266:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This parameter can be one of the following values:
2267:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2268:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2269:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2270:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2271:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2272:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval ADC conversion data to the requested resolution
2273:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2274:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_X) || defined(ADC_VER_V5_V90)
2275:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CONVERT_DATA_RESOLUTION(__DATA__,\
2276:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                          __ADC_RESOLUTION_CURRENT__,\
2277:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                          __ADC_RESOLUTION_TARGET__) \
2278:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** ( (__ADC_RESOLUTION_CURRENT__ == LL_ADC_RESOLUTION_8B)                                             
2279:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ?(                                                                                               
2280:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ((__DATA__)                                                                                    
2281:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     << (((__ADC_RESOLUTION_CURRENT__) & ~(ADC_CFGR_RES_1 | ADC_CFGR_RES_0) ) >> (ADC_CFGR_RES_BITOF
2282:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    >> ((__ADC_RESOLUTION_TARGET__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL))                          
2283:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    )                                                                                               
2284:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   :                                                                                                
2285:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    (                                                                                               
2286:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      (__ADC_RESOLUTION_TARGET__ == LL_ADC_RESOLUTION_8B) \
2287:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ? ( \
2288:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            ((__DATA__)                                                                             
2289:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****             << ((__ADC_RESOLUTION_CURRENT__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL)))               
2290:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            >> (((__ADC_RESOLUTION_TARGET__) & ~(ADC_CFGR_RES_1 | ADC_CFGR_RES_0) ) >> (ADC_CFGR_RES
2291:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            )                                                                                       
2292:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          :\
2293:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****           (\
2294:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ((__DATA__)                                                                                    
2295:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     << ((__ADC_RESOLUTION_CURRENT__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL)))                       
2296:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     >> ((__ADC_RESOLUTION_TARGET__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL))                         
2297:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      )                                                                                             
2298:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    )\
2299:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****  )
2300:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2301:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2302:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else /* defined(ADC_VER_V5_3) */
2303:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CONVERT_DATA_RESOLUTION(__DATA__,\
2304:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                          __ADC_RESOLUTION_CURRENT__,\
2305:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                          __ADC_RESOLUTION_TARGET__) \
2306:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** ( (__ADC_RESOLUTION_CURRENT__ == LL_ADC_RESOLUTION_8B)                                             
2307:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ?(                                                                                               
2308:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ((__DATA__)                                                                                    
2309:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     << (((__ADC_RESOLUTION_CURRENT__) & ~(ADC_CFGR_RES_1 | ADC_CFGR_RES_0) ) >> (ADC_CFGR_RES_BITOF
2310:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    >> ((__ADC_RESOLUTION_TARGET__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL))                          
2311:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    )                                                                                               
2312:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   :                                                                                                
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 42


2313:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    (                                                                                               
2314:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      (__ADC_RESOLUTION_TARGET__ == LL_ADC_RESOLUTION_8B) \
2315:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ? ( \
2316:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            ((__DATA__)                                                                             
2317:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****             << ((__ADC_RESOLUTION_CURRENT__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL)))               
2318:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            >> (((__ADC_RESOLUTION_TARGET__) & ~(ADC_CFGR_RES_1 | ADC_CFGR_RES_0) ) >> (ADC_CFGR_RES
2319:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            )                                                                                       
2320:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          :\
2321:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****           (\
2322:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ((__DATA__)                                                                                    
2323:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     << ((__ADC_RESOLUTION_CURRENT__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL)))                       
2324:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     >> ((__ADC_RESOLUTION_TARGET__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL))                         
2325:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      )                                                                                             
2326:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    )\
2327:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****  )
2328:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2329:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
2330:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2331:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
2332:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2333:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @brief  Helper macro to convert the ADC conversion data from
2334:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         a resolution to another resolution.
2335:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @param  __DATA__ ADC conversion data to be converted
2336:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @param  __ADC_RESOLUTION_CURRENT__ Resolution of the data to be converted
2337:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         This parameter can be one of the following values:
2338:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_12B
2339:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_10B
2340:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_8B
2341:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_6B
2342:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @param  __ADC_RESOLUTION_TARGET__ Resolution of the data after conversion
2343:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         This parameter can be one of the following values:
2344:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_12B
2345:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_10B
2346:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_8B
2347:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_6B
2348:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @retval ADC conversion data to the requested resolution
2349:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** */
2350:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CONVERT_DATA_RESOLUTION_ADC3(__DATA__,\
2351:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                          __ADC_RESOLUTION_CURRENT__,\
2352:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                          __ADC_RESOLUTION_TARGET__)            \
2353:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((__DATA__)                                                                 \
2354:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     << ((__ADC_RESOLUTION_CURRENT__) >> (ADC_CFGR_RES_BITOFFSET_POS_ADC3 - 1UL)))  \
2355:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    >> ((__ADC_RESOLUTION_TARGET__) >> (ADC_CFGR_RES_BITOFFSET_POS_ADC3 - 1UL))     \
2356:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2357:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
2358:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2359:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to calculate the voltage (unit: mVolt)
2360:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         corresponding to a ADC conversion data (unit: digital value).
2361:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Analog reference voltage (Vref+) must be either known from
2362:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         user board environment or can be calculated using ADC measurement
2363:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
2364:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __VREFANALOG_VOLTAGE__ Analog reference voltage (unit: mV)
2365:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_DATA__ ADC conversion data (resolution 16 bits)
2366:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                       (unit: digital value).
2367:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2368:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2369:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 43


2370:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2371:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2372:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2373:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval ADC conversion data equivalent voltage value (unit: mVolt)
2374:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2375:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CALC_DATA_TO_VOLTAGE(__VREFANALOG_VOLTAGE__,\
2376:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                       __ADC_DATA__,\
2377:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                       __ADC_RESOLUTION__)                      \
2378:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((__ADC_DATA__) * (__VREFANALOG_VOLTAGE__)                                   \
2379:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    / __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__)                                \
2380:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2381:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2382:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2383:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to calculate analog reference voltage (Vref+)
2384:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (unit: mVolt) from ADC conversion data of internal voltage
2385:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         reference VrefInt.
2386:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Computation is using VrefInt calibration value
2387:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         stored in system memory for each device during production.
2388:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This voltage depends on user board environment: voltage level
2389:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         connected to pin Vref+.
2390:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         On devices with small package, the pin Vref+ is not present
2391:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and internally bonded to pin Vdda.
2392:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, calibration data of internal voltage reference
2393:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         VrefInt corresponds to a resolution of 16 bits,
2394:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         this is the recommended ADC resolution to convert voltage of
2395:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal voltage reference VrefInt.
2396:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Otherwise, this macro performs the processing to scale
2397:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversion data to 16 bits.
2398:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __VREFINT_ADC_DATA__ ADC conversion data (resolution 16 bits)
2399:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of internal voltage reference VrefInt (unit: digital value).
2400:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2401:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2402:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2403:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2404:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2405:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2406:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Analog reference voltage (unit: mV)
2407:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2408:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CALC_VREFANALOG_VOLTAGE(__VREFINT_ADC_DATA__,\
2409:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                          __ADC_RESOLUTION__)                   \
2410:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((uint32_t)(*VREFINT_CAL_ADDR) * VREFINT_CAL_VREF)                          \
2411:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     / __LL_ADC_CONVERT_DATA_RESOLUTION((__VREFINT_ADC_DATA__),                 \
2412:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                        (__ADC_RESOLUTION__),                   \
2413:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                        LL_ADC_RESOLUTION_16B)                  \
2414:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2415:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2416:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2417:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to calculate the temperature (unit: degree Celsius)
2418:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         from ADC conversion data of internal temperature sensor.
2419:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Computation is using temperature sensor calibration values
2420:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         stored in system memory for each device during production.
2421:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Calculation formula:
2422:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Temperature = ((TS_ADC_DATA - TS_CAL1)
2423:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                           * (TS_CAL2_TEMP - TS_CAL1_TEMP))
2424:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                         / (TS_CAL2 - TS_CAL1) + TS_CAL1_TEMP
2425:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           with TS_ADC_DATA = temperature sensor raw data measured by ADC
2426:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                Avg_Slope = (TS_CAL2 - TS_CAL1)
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 44


2427:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                            / (TS_CAL2_TEMP - TS_CAL1_TEMP)
2428:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                TS_CAL1   = equivalent TS_ADC_DATA at temperature
2429:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                            TEMP_DEGC_CAL1 (calibrated in factory)
2430:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                TS_CAL2   = equivalent TS_ADC_DATA at temperature
2431:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                            TEMP_DEGC_CAL2 (calibrated in factory)
2432:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Caution: Calculation relevancy under reserve that calibration
2433:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  parameters are correct (address and data).
2434:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  To calculate temperature using temperature sensor
2435:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  datasheet typical values (generic values less, therefore
2436:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  less accurate than calibrated values),
2437:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  use helper macro @ref __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS().
2438:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   As calculation input, the analog reference voltage (Vref+) must be
2439:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         defined as it impacts the ADC LSB equivalent voltage.
2440:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Analog reference voltage (Vref+) must be either known from
2441:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         user board environment or can be calculated using ADC measurement
2442:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
2443:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, calibration data of temperature sensor
2444:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         corresponds to a resolution of 16 bits,
2445:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         this is the recommended ADC resolution to convert voltage of
2446:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         temperature sensor.
2447:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Otherwise, this macro performs the processing to scale
2448:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversion data to 16 bits.
2449:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __VREFANALOG_VOLTAGE__  Analog reference voltage (unit: mV)
2450:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __TEMPSENSOR_ADC_DATA__ ADC conversion data of internal
2451:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                 temperature sensor (unit: digital value).
2452:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__      ADC resolution at which internal temperature
2453:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                 sensor voltage has been measured.
2454:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This parameter can be one of the following values:
2455:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2456:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2457:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2458:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2459:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2460:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Temperature (unit: degree Celsius)
2461:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2462:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CALC_TEMPERATURE(__VREFANALOG_VOLTAGE__,\
2463:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                   __TEMPSENSOR_ADC_DATA__,\
2464:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                   __ADC_RESOLUTION__)                              \
2465:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((( ((int32_t)((__LL_ADC_CONVERT_DATA_RESOLUTION((__TEMPSENSOR_ADC_DATA__),     \
2466:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                     (__ADC_RESOLUTION__),          \
2467:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                     LL_ADC_RESOLUTION_16B)         \
2468:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    * (__VREFANALOG_VOLTAGE__))                                     \
2469:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                   / TEMPSENSOR_CAL_VREFANALOG)                                     \
2470:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         - (int32_t) *TEMPSENSOR_CAL1_ADDR)                                         \
2471:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      ) * (int32_t)(TEMPSENSOR_CAL2_TEMP - TEMPSENSOR_CAL1_TEMP)                    \
2472:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ) / (int32_t)((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) \
2473:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    ) + TEMPSENSOR_CAL1_TEMP                                                        \
2474:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2475:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2476:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2477:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to calculate the temperature (unit: degree Celsius)
2478:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         from ADC conversion data of internal temperature sensor.
2479:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Computation is using temperature sensor typical values
2480:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (refer to device datasheet).
2481:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Calculation formula:
2482:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Temperature = (TS_TYP_CALx_VOLT(uV) - TS_ADC_DATA * Conversion_uV)
2483:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                         / Avg_Slope + CALx_TEMP
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 45


2484:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           with TS_ADC_DATA      = temperature sensor raw data measured by ADC
2485:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                   (unit: digital value)
2486:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                Avg_Slope        = temperature sensor slope
2487:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                   (unit: uV/Degree Celsius)
2488:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                TS_TYP_CALx_VOLT = temperature sensor digital value at
2489:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                   temperature CALx_TEMP (unit: mV)
2490:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Caution: Calculation relevancy under reserve the temperature sensor
2491:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  of the current device has characteristics in line with
2492:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  datasheet typical values.
2493:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  If temperature sensor calibration values are available on
2494:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  on this device (presence of macro __LL_ADC_CALC_TEMPERATURE()),
2495:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  temperature calculation will be more accurate using
2496:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  helper macro @ref __LL_ADC_CALC_TEMPERATURE().
2497:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   As calculation input, the analog reference voltage (Vref+) must be
2498:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         defined as it impacts the ADC LSB equivalent voltage.
2499:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Analog reference voltage (Vref+) must be either known from
2500:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         user board environment or can be calculated using ADC measurement
2501:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
2502:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   ADC measurement data must correspond to a resolution of 16 bits
2503:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (full scale digital value 4095). If not the case, the data must be
2504:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         preliminarily rescaled to an equivalent resolution of 16 bits.
2505:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __TEMPSENSOR_TYP_AVGSLOPE__   Device datasheet data: Temperature sensor slope typical v
2506:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                       On STM32H7, refer to device datasheet parameter "Avg_Slop
2507:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __TEMPSENSOR_TYP_CALX_V__     Device datasheet data: Temperature sensor voltage typical
2508:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                       On STM32H7, refer to device datasheet parameter "V30" (co
2509:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __TEMPSENSOR_CALX_TEMP__      Device datasheet data: Temperature at which temperature s
2510:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __VREFANALOG_VOLTAGE__        Analog voltage reference (Vref+) voltage (unit: mV)
2511:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __TEMPSENSOR_ADC_DATA__       ADC conversion data of internal temperature sensor (unit:
2512:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__            ADC resolution at which internal temperature sensor volta
2513:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This parameter can be one of the following values:
2514:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2515:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2516:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2517:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2518:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2519:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Temperature (unit: degree Celsius)
2520:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2521:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(__TEMPSENSOR_TYP_AVGSLOPE__,\
2522:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              __TEMPSENSOR_TYP_CALX_V__,\
2523:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              __TEMPSENSOR_CALX_TEMP__,\
2524:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              __VREFANALOG_VOLTAGE__,\
2525:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              __TEMPSENSOR_ADC_DATA__,\
2526:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              __ADC_RESOLUTION__)               \
2527:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((( (                                                                        \
2528:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (int32_t)((((__TEMPSENSOR_ADC_DATA__) * (__VREFANALOG_VOLTAGE__))       \
2529:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                   / __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__))                \
2530:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                  * 1000UL)                                                     \
2531:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        -                                                                       \
2532:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (int32_t)(((__TEMPSENSOR_TYP_CALX_V__))                                 \
2533:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                  * 1000UL)                                                     \
2534:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
2535:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ) / (int32_t)(__TEMPSENSOR_TYP_AVGSLOPE__)                                 \
2536:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    ) + (int32_t)(__TEMPSENSOR_CALX_TEMP__)                                     \
2537:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2538:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2539:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2540:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 46


2541:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2542:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2543:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2544:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
2545:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2546:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2547:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2548:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Exported functions --------------------------------------------------------*/
2549:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_Exported_Functions ADC Exported Functions
2550:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
2551:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2552:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2553:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_DMA_Management ADC DMA management
2554:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
2555:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2556:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2557:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2558:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Function to help to configure DMA transfer from ADC: retrieve the
2559:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC register address from ADC instance and a list of ADC registers
2560:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         intended to be used (most commonly) with DMA transfer.
2561:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   These ADC registers are data registers:
2562:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         when ADC conversion data is available in ADC data registers,
2563:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC generates a DMA transfer request.
2564:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This macro is intended to be used with LL DMA driver, refer to
2565:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         function "LL_DMA_ConfigAddresses()".
2566:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example:
2567:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           LL_DMA_ConfigAddresses(DMA1,
2568:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                  LL_DMA_CHANNEL_1,
2569:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                  LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA),
2570:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                  (uint32_t)&< array or variable >,
2571:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                  LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
2572:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with several ADC: in multimode, some devices
2573:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use a different data register outside of ADC instance scope
2574:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (common data register). This macro manages this register difference,
2575:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         only ADC instance has to be set as parameter.
2576:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_DMA_GetRegAddr\n
2577:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CDR      RDATA_MST      LL_ADC_DMA_GetRegAddr\n
2578:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CDR      RDATA_SLV      LL_ADC_DMA_GetRegAddr
2579:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
2580:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Register This parameter can be one of the following values:
2581:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_DMA_REG_REGULAR_DATA
2582:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_DMA_REG_REGULAR_DATA_MULTI (1)
2583:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
2584:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) Available on devices with several ADC instances.
2585:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval ADC register address
2586:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2587:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
2588:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2589:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t data_reg_addr;
2590:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2591:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
2592:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2593:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Retrieve address of register DR */
2594:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     data_reg_addr = (uint32_t) & (ADCx->DR);
2595:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2596:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else /* (Register == LL_ADC_DMA_REG_REGULAR_DATA_MULTI) */
2597:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 47


2598:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Retrieve address of register CDR */
2599:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     data_reg_addr = (uint32_t) & ((__LL_ADC_COMMON_INSTANCE(ADCx))->CDR);
2600:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2601:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2602:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return data_reg_addr;
2603:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2604:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2605:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2606:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
2607:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2608:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2609:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Common Configuration of ADC hierarchical scope: common to
2610:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
2611:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2612:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2613:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2614:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set parameter common to several ADC: Clock source and prescaler.
2615:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, if ADC group injected is used, some
2616:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         clock ratio constraints between ADC clock and AHB clock
2617:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         must be respected.
2618:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to reference manual.
2619:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2620:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
2621:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
2622:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
2623:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instance or by using helper macro helper macro
2624:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
2625:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      CKMODE         LL_ADC_SetCommonClock\n
2626:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CCR      PRESC          LL_ADC_SetCommonClock
2627:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
2628:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2629:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  CommonClock This parameter can be one of the following values:
2630:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV1
2631:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV2
2632:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV4
2633:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV1
2634:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV2
2635:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV4
2636:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV6
2637:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV8
2638:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV10
2639:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV12
2640:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV16
2641:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV32
2642:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV64
2643:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
2644:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
2645:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
2646:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2647:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
2648:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
  27              		.loc 1 2648 1
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 48


  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 4
  35              		.cfi_offset 7, -4
  36 0002 83B0     		sub	sp, sp, #12
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 7860     		str	r0, [r7, #4]
  43 0008 3960     		str	r1, [r7]
2649:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
  44              		.loc 1 2649 3
  45 000a 7B68     		ldr	r3, [r7, #4]
  46 000c 9B68     		ldr	r3, [r3, #8]
  47 000e 23F47C12 		bic	r2, r3, #4128768
  48 0012 3B68     		ldr	r3, [r7]
  49 0014 1A43     		orrs	r2, r2, r3
  50 0016 7B68     		ldr	r3, [r7, #4]
  51 0018 9A60     		str	r2, [r3, #8]
2650:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
  52              		.loc 1 2650 1
  53 001a 00BF     		nop
  54 001c 0C37     		adds	r7, r7, #12
  55              	.LCFI3:
  56              		.cfi_def_cfa_offset 4
  57 001e BD46     		mov	sp, r7
  58              	.LCFI4:
  59              		.cfi_def_cfa_register 13
  60              		@ sp needed
  61 0020 5DF8047B 		ldr	r7, [sp], #4
  62              	.LCFI5:
  63              		.cfi_restore 7
  64              		.cfi_def_cfa_offset 0
  65 0024 7047     		bx	lr
  66              		.cfi_endproc
  67              	.LFE145:
  69              		.section	.text.LL_ADC_SetCommonPathInternalCh,"ax",%progbits
  70              		.align	1
  71              		.syntax unified
  72              		.thumb
  73              		.thumb_func
  75              	LL_ADC_SetCommonPathInternalCh:
  76              	.LFB147:
2651:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2652:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2653:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get parameter common to several ADC: Clock source and prescaler.
2654:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      CKMODE         LL_ADC_GetCommonClock\n
2655:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CCR      PRESC          LL_ADC_GetCommonClock
2656:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
2657:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2658:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2659:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV1
2660:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV2
2661:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV4
2662:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV1
2663:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV2
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 49


2664:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV4
2665:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV6
2666:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV8
2667:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV10
2668:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV12
2669:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV16
2670:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV32
2671:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV64
2672:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
2673:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
2674:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2675:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON)
2676:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2677:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC));
2678:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2679:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2680:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2681:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set parameter common to several ADC: measurement path to internal
2682:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         channels (VrefInt, temperature sensor, ...).
2683:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   One or several values can be selected.
2684:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example: (LL_ADC_PATH_INTERNAL_VREFINT |
2685:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                   LL_ADC_PATH_INTERNAL_TEMPSENSOR)
2686:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Stabilization time of measurement path to internal channel:
2687:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         After enabling internal paths, before starting ADC conversion,
2688:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a delay is required for internal voltage reference and
2689:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         temperature sensor stabilization time.
2690:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet.
2691:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_VREFINT_STAB_US.
2692:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_TEMPSENSOR_STAB_US.
2693:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   ADC internal channel sampling time constraint:
2694:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         For ADC conversion of internal channels,
2695:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a sampling time minimum value is required.
2696:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet.
2697:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2698:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
2699:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
2700:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
2701:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instance or by using helper macro helper macro
2702:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
2703:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      VREFEN         LL_ADC_SetCommonPathInternalCh\n
2704:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CCR      TSEN           LL_ADC_SetCommonPathInternalCh\n
2705:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CCR      VBATEN         LL_ADC_SetCommonPathInternalCh
2706:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
2707:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2708:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  PathInternal This parameter can be a combination of the following values:
2709:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
2710:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
2711:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
2712:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
2713:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
2714:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2715:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Path
2716:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
  77              		.loc 1 2716 1
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 8
  80              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 50


  81              		@ link register save eliminated.
  82 0000 80B4     		push	{r7}
  83              	.LCFI6:
  84              		.cfi_def_cfa_offset 4
  85              		.cfi_offset 7, -4
  86 0002 83B0     		sub	sp, sp, #12
  87              	.LCFI7:
  88              		.cfi_def_cfa_offset 16
  89 0004 00AF     		add	r7, sp, #0
  90              	.LCFI8:
  91              		.cfi_def_cfa_register 7
  92 0006 7860     		str	r0, [r7, #4]
  93 0008 3960     		str	r1, [r7]
2717:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
  94              		.loc 1 2717 3
  95 000a 7B68     		ldr	r3, [r7, #4]
  96 000c 9B68     		ldr	r3, [r3, #8]
  97 000e 23F0E072 		bic	r2, r3, #29360128
  98 0012 3B68     		ldr	r3, [r7]
  99 0014 1A43     		orrs	r2, r2, r3
 100 0016 7B68     		ldr	r3, [r7, #4]
 101 0018 9A60     		str	r2, [r3, #8]
2718:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 102              		.loc 1 2718 1
 103 001a 00BF     		nop
 104 001c 0C37     		adds	r7, r7, #12
 105              	.LCFI9:
 106              		.cfi_def_cfa_offset 4
 107 001e BD46     		mov	sp, r7
 108              	.LCFI10:
 109              		.cfi_def_cfa_register 13
 110              		@ sp needed
 111 0020 5DF8047B 		ldr	r7, [sp], #4
 112              	.LCFI11:
 113              		.cfi_restore 7
 114              		.cfi_def_cfa_offset 0
 115 0024 7047     		bx	lr
 116              		.cfi_endproc
 117              	.LFE147:
 119              		.section	.text.LL_ADC_GetCommonPathInternalCh,"ax",%progbits
 120              		.align	1
 121              		.syntax unified
 122              		.thumb
 123              		.thumb_func
 125              	LL_ADC_GetCommonPathInternalCh:
 126              	.LFB148:
2719:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2720:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2721:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get parameter common to several ADC: measurement path to internal
2722:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         channels (VrefInt, temperature sensor, ...).
2723:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   One or several values can be selected.
2724:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example: (LL_ADC_PATH_INTERNAL_VREFINT |
2725:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                   LL_ADC_PATH_INTERNAL_TEMPSENSOR)
2726:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      VREFEN         LL_ADC_GetCommonPathInternalCh\n
2727:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CCR      TSEN           LL_ADC_GetCommonPathInternalCh\n
2728:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CCR      VBATEN         LL_ADC_GetCommonPathInternalCh
2729:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 51


2730:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2731:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be a combination of the following values:
2732:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
2733:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
2734:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
2735:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
2736:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2737:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
2738:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 127              		.loc 1 2738 1
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 8
 130              		@ frame_needed = 1, uses_anonymous_args = 0
 131              		@ link register save eliminated.
 132 0000 80B4     		push	{r7}
 133              	.LCFI12:
 134              		.cfi_def_cfa_offset 4
 135              		.cfi_offset 7, -4
 136 0002 83B0     		sub	sp, sp, #12
 137              	.LCFI13:
 138              		.cfi_def_cfa_offset 16
 139 0004 00AF     		add	r7, sp, #0
 140              	.LCFI14:
 141              		.cfi_def_cfa_register 7
 142 0006 7860     		str	r0, [r7, #4]
2739:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 143              		.loc 1 2739 21
 144 0008 7B68     		ldr	r3, [r7, #4]
 145 000a 9B68     		ldr	r3, [r3, #8]
 146              		.loc 1 2739 10
 147 000c 03F0E073 		and	r3, r3, #29360128
2740:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 148              		.loc 1 2740 1
 149 0010 1846     		mov	r0, r3
 150 0012 0C37     		adds	r7, r7, #12
 151              	.LCFI15:
 152              		.cfi_def_cfa_offset 4
 153 0014 BD46     		mov	sp, r7
 154              	.LCFI16:
 155              		.cfi_def_cfa_register 13
 156              		@ sp needed
 157 0016 5DF8047B 		ldr	r7, [sp], #4
 158              	.LCFI17:
 159              		.cfi_restore 7
 160              		.cfi_def_cfa_offset 0
 161 001a 7047     		bx	lr
 162              		.cfi_endproc
 163              	.LFE148:
 165              		.section	.text.LL_ADC_SetOffset,"ax",%progbits
 166              		.align	1
 167              		.syntax unified
 168              		.thumb
 169              		.thumb_func
 171              	LL_ADC_SetOffset:
 172              	.LFB160:
2741:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2742:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 52


2743:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set parameter common to several ADC: measurement path to
2744:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal channels (VrefInt, temperature sensor, ...).
2745:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Add paths to the current configuration.
2746:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   One or several values can be selected.
2747:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example: (LL_ADC_PATH_INTERNAL_VREFINT |
2748:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                   LL_ADC_PATH_INTERNAL_TEMPSENSOR)
2749:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Stabilization time of measurement path to internal channel:
2750:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         After enabling internal paths, before starting ADC conversion,
2751:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a delay is required for internal voltage reference and
2752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         temperature sensor stabilization time.
2753:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet.
2754:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_VREFINT_STAB_US.
2755:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_TEMPSENSOR_STAB_US.
2756:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   ADC internal channel sampling time constraint:
2757:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         For ADC conversion of internal channels,
2758:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a sampling time minimum value is required.
2759:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet.
2760:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      VREFEN         LL_ADC_SetCommonPathInternalChAdd\n
2761:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CCR      TSEN           LL_ADC_SetCommonPathInternalChAdd\n
2762:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CCR      VBATEN        LL_ADC_SetCommonPathInternalChAdd
2763:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
2764:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2765:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  PathInternal This parameter can be a combination of the following values:
2766:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
2767:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
2768:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
2769:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
2770:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
2771:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2772:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCommonPathInternalChAdd(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t P
2773:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2774:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCxy_COMMON->CCR, PathInternal);
2775:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2776:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2777:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2778:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set parameter common to several ADC: measurement path to
2779:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal channels (VrefInt, temperature sensor, ...).
2780:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Remove paths to the current configuration.
2781:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   One or several values can be selected.
2782:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example: (LL_ADC_PATH_INTERNAL_VREFINT |
2783:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                   LL_ADC_PATH_INTERNAL_TEMPSENSOR)
2784:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      VREFEN         LL_ADC_SetCommonPathInternalChRem\n
2785:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CCR      TSEN           LL_ADC_SetCommonPathInternalChRem\n
2786:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CCR      VBATEN        LL_ADC_SetCommonPathInternalChRem
2787:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
2788:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2789:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  PathInternal This parameter can be a combination of the following values:
2790:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
2791:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
2792:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
2793:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
2794:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
2795:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2796:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCommonPathInternalChRem(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t P
2797:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2798:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCxy_COMMON->CCR, PathInternal);
2799:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 53


2800:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2801:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2802:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
2803:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2804:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2805:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Instance Configuration of ADC hierarchical scope: ADC ins
2806:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
2807:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2808:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2809:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2810:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC calibration factor in the mode single-ended
2811:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or differential (for devices with differential mode available).
2812:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function is intended to set calibration parameters
2813:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without having to perform a new calibration using
2814:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref LL_ADC_StartCalibration().
2815:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with differential mode available:
2816:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Calibration of offset is specific to each of
2817:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         single-ended and differential modes
2818:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (calibration factor must be specified for each of these
2819:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         differential modes, if used afterwards and if the application
2820:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         requires their calibration).
2821:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Calibration of linearity is common to both
2822:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         single-ended and differential modes
2823:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (calibration factor can be specified only once).
2824:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of setting calibration factors of both modes single ended
2825:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and differential (parameter LL_ADC_BOTH_SINGLE_DIFF_ENDED):
2826:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         both calibration factors must be concatenated.
2827:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         To perform this processing, use helper macro
2828:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_CALIB_FACTOR_SINGLE_DIFF().
2829:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2830:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
2831:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be enabled, without calibration on going, without conversion
2832:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on group regular.
2833:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CALFACT  CALFACT_S      LL_ADC_SetCalibrationOffsetFactor\n
2834:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CALFACT  CALFACT_D      LL_ADC_SetCalibrationOffsetFactor
2835:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
2836:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SingleDiff This parameter can be one of the following values:
2837:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SINGLE_ENDED
2838:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
2839:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_BOTH_SINGLE_DIFF_ENDED
2840:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  CalibrationFactor Value between Min_Data=0x00 and Max_Data=0x7F
2841:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
2842:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2843:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCalibrationOffsetFactor(ADC_TypeDef *ADCx, uint32_t SingleDiff, uint
2844:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2845:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)  
2846:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CALFACT_RES13,
2847:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              SingleDiff & ADC_SINGLEDIFF_CALIB_FACTOR_MASK,
2848:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              CalibrationFactor << (((SingleDiff & ADC_SINGLEDIFF_CALIB_F_BIT_D_MASK) >> ADC_SINGLED
2849:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
2850:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CALFACT,
2851:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              SingleDiff & ADC_SINGLEDIFF_CALIB_FACTOR_MASK,
2852:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              CalibrationFactor << (((SingleDiff & ADC_SINGLEDIFF_CALIB_F_BIT_D_MASK) >> ADC_SINGLED
2853:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
2854:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2855:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2856:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 54


2857:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC calibration factor in the mode single-ended
2858:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or differential (for devices with differential mode available).
2859:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Calibration factors are set by hardware after performing
2860:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a calibration run using function @ref LL_ADC_StartCalibration().
2861:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with differential mode available:
2862:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Calibration of offset is specific to each of
2863:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         single-ended and differential modes
2864:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Calibration of linearity is common to both
2865:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         single-ended and differential modes
2866:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CALFACT  CALFACT_S      LL_ADC_GetCalibrationOffsetFactor\n
2867:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CALFACT  CALFACT_D      LL_ADC_GetCalibrationOffsetFactor
2868:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
2869:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SingleDiff This parameter can be one of the following values:
2870:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SINGLE_ENDED
2871:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
2872:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x7F
2873:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2874:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCalibrationOffsetFactor(ADC_TypeDef *ADCx, uint32_t SingleDiff)
2875:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2876:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Retrieve bits with position in register depending on parameter           */
2877:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* "SingleDiff".                                                            */
2878:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameter used with mask "ADC_SINGLEDIFF_CALIB_FACTOR_MASK" because      */
2879:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
2880:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
2881:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CALFACT_RES13, (SingleDiff & ADC_SINGLEDIFF_CALIB_FACTOR_MASK)) 
2882:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
2883:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CALFACT, (SingleDiff & ADC_SINGLEDIFF_CALIB_FACTOR_MASK)) >> ((S
2884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
2885:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2886:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2887:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2888:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC Linear calibration factor in the mode single-ended.
2889:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function is intended to set linear calibration parameters
2890:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without having to perform a new calibration using
2891:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref LL_ADC_StartCalibration().
2892:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2893:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
2894:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be enabled, without calibration on going, without conversion
2895:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on group regular.
2896:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CALFACT2  LINCALFACT      LL_ADC_SetCalibrationLinearFactor\n
2897:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CALFACT2  LINCALFACT      LL_ADC_SetCalibrationLinearFactor
2898:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
2899:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  LinearityWord This parameter can be one of the following values:
2900:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD1
2901:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD2
2902:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD3
2903:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD4
2904:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD5
2905:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD6
2906:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  CalibrationFactor Value between Min_Data=0x00 and Max_Data=0x3FFFFFFF
2907:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
2908:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2909:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCalibrationLinearFactor(ADC_TypeDef *ADCx, uint32_t LinearityWord, u
2910:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2911:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
2912:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx != ADC3)
2913:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 55


2914:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     uint32_t timeout_cpu_cycles = ADC_LINEARITY_BIT_TOGGLE_TIMEOUT;
2915:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CALFACT2_RES14, ADC_CALFACT2_LINCALFACT, CalibrationFactor);
2916:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CR, ADC_CR_ADCALLIN, LinearityWord);
2917:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     while ((READ_BIT(ADCx->CR, LinearityWord) == 0UL) && (timeout_cpu_cycles > 0UL))
2918:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
2919:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       timeout_cpu_cycles--;
2920:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
2921:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2922:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else /* ADC_VER_V5_V90 */
2923:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t timeout_cpu_cycles = ADC_LINEARITY_BIT_TOGGLE_TIMEOUT;
2924:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CALFACT2, ADC_CALFACT2_LINCALFACT, CalibrationFactor);
2925:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR, ADC_CR_ADCALLIN, LinearityWord);
2926:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   while ((READ_BIT(ADCx->CR, LinearityWord) == 0UL) && (timeout_cpu_cycles > 0UL))
2927:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2928:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     timeout_cpu_cycles--;
2929:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2930:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
2931:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2932:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2933:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2934:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC Linear calibration factor in the mode single-ended.
2935:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Calibration factors are set by hardware after performing
2936:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a calibration run using function @ref LL_ADC_StartCalibration().
2937:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CALFACT2  LINCALFACT      LL_ADC_GetCalibrationLinearFactor\n
2938:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CALFACT2  LINCALFACT      LL_ADC_GetCalibrationLinearFactor
2939:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
2940:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  LinearityWord This parameter can be one of the following values:
2941:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD1
2942:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD2
2943:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD3
2944:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD4
2945:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD5
2946:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD6
2947:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x3FFFFFFF
2948:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2949:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCalibrationLinearFactor(ADC_TypeDef *ADCx, uint32_t LinearityWor
2950:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2951:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t timeout_cpu_cycles = ADC_LINEARITY_BIT_TOGGLE_TIMEOUT;
2952:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->CR, LinearityWord);
2953:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   while ((READ_BIT(ADCx->CR, LinearityWord) != 0UL) && (timeout_cpu_cycles > 0UL))
2954:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2955:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     timeout_cpu_cycles--;
2956:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2957:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
2958:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CALFACT2_RES14, ADC_CALFACT2_LINCALFACT));
2959:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
2960:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CALFACT2, ADC_CALFACT2_LINCALFACT));
2961:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
2962:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2963:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2964:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC resolution.
2965:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to reference manual for alignments formats
2966:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         dependencies to ADC resolutions.
2967:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2968:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
2969:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2970:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 56


2971:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     RES            LL_ADC_SetResolution
2972:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
2973:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Resolution This parameter can be one of the following values:
2974:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2975:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2976:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2977:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2978:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2979:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
2980:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2981:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
2982:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2983:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_3)
2984:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2985:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution);
2986:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2987:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #elif defined(ADC_VER_V5_V90)
2988:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
2989:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2990:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CFGR, ADC3_CFGR_RES, ((__LL_ADC12_RESOLUTION_TO_ADC3(Resolution)  & (ADC_CFGR_
2991:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2992:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
2993:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2994:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     if ((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Rev.Y */
2995:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
2996:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution);
2997:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
2998:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     else /* Rev.V */
2999:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
3000:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       if (LL_ADC_RESOLUTION_8B == Resolution)
3001:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       {
3002:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution | 0x0000000CUL);
3003:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       }
3004:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       else
3005:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       {
3006:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution);
3007:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       }
3008:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
3009:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3010:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else /* ADC_VER_V5_V90 */
3011:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if ((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Rev.Y */
3012:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3013:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution);
3014:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3015:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else /* Rev.V */
3016:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3017:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     if (LL_ADC_RESOLUTION_8B == Resolution)
3018:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
3019:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution | 0x0000000CUL);
3020:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
3021:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     else
3022:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
3023:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution);
3024:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
3025:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3026:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3027:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_X*/
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 57


3028:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3029:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3030:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3031:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC resolution.
3032:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to reference manual for alignments formats
3033:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         dependencies to ADC resolutions.
3034:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     RES            LL_ADC_GetResolution
3035:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3036:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3037:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
3038:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
3039:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
3040:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
3041:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
3042:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    *         @arg @ref LL_ADC_RESOLUTION_6B   **Value available for ADC3 on STM32H72x/3x devices on
3043:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3044:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetResolution(ADC_TypeDef *ADCx)
3045:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3046:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined (ADC_VER_V5_3)
3047:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3048:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
3049:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3050:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #elif defined(ADC_VER_V5_V90)
3051:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3052:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3053:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t)(READ_BIT(ADCx->CFGR, ADC3_CFGR_RES));
3054:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3055:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
3056:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3057:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     if ((uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES)) == 0x0000001CUL)
3058:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
3059:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       return (LL_ADC_RESOLUTION_8B);
3060:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
3061:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     else
3062:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
3063:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
3064:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
3065:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3066:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3067:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else  /* ADC_VER_V5_V90 */
3068:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if ((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Rev.Y */
3069:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3070:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
3071:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3072:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else /* Rev.V */
3073:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3074:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     if ((uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES)) == 0x0000001CUL)
3075:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
3076:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       return (LL_ADC_RESOLUTION_8B);
3077:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
3078:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     else
3079:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
3080:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
3081:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
3082:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3083:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3084:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_X */
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 58


3085:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3086:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3087:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3088:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC low power mode.
3089:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Description of ADC low power modes:
3090:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC low power mode "auto wait": Dynamic low power mode,
3091:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions occurrences are limited to the minimum necessary
3092:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           in order to reduce power consumption.
3093:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           New ADC conversion starts only when the previous
3094:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           unitary conversion data (for ADC group regular)
3095:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           or previous sequence conversions data (for ADC group injected)
3096:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           has been retrieved by user software.
3097:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           In the meantime, ADC remains idle: does not performs any
3098:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           other conversion.
3099:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This mode allows to automatically adapt the ADC conversions
3100:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           triggers to the speed of the software that reads the data.
3101:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Moreover, this avoids risk of overrun for low frequency
3102:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           applications.
3103:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           How to use this low power mode:
3104:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - It is not recommended to use with interruption or DMA
3105:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             since these modes have to clear immediately the EOC flag
3106:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             (by CPU to free the IRQ pending event or by DMA).
3107:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Auto wait will work but fort a very short time, discarding
3108:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             its intended benefit (except specific case of high load of CPU
3109:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             or DMA transfers which can justify usage of auto wait).
3110:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Do use with polling: 1. Start conversion,
3111:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             2. Later on, when conversion data is needed: poll for end of
3112:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             conversion  to ensure that conversion is completed and
3113:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             retrieve ADC conversion data. This will trig another
3114:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC conversion start.
3115:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC low power mode "auto power-off" (feature available on
3116:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           this device if parameter LL_ADC_LP_AUTOPOWEROFF is available):
3117:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           the ADC automatically powers-off after a conversion and
3118:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           automatically wakes up when a new conversion is triggered
3119:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (with startup time between trigger and start of sampling).
3120:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This feature can be combined with low power mode "auto wait".
3121:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   With ADC low power mode "auto wait", the ADC conversion data read
3122:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is corresponding to previous ADC conversion start, independently
3123:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of delay during which ADC was idle.
3124:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Therefore, the ADC conversion data may be outdated: does not
3125:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         correspond to the current voltage level on the selected
3126:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC channel.
3127:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3128:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3129:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3130:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
3131:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     AUTDLY         LL_ADC_SetLowPowerMode
3132:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3133:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  LowPowerMode This parameter can be one of the following values:
3134:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_MODE_NONE
3135:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_AUTOWAIT
3136:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3137:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3138:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetLowPowerMode(ADC_TypeDef *ADCx, uint32_t LowPowerMode)
3139:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3140:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
3141:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 59


3142:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3143:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3144:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC low power mode:
3145:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Description of ADC low power modes:
3146:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC low power mode "auto wait": Dynamic low power mode,
3147:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions occurrences are limited to the minimum necessary
3148:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           in order to reduce power consumption.
3149:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           New ADC conversion starts only when the previous
3150:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           unitary conversion data (for ADC group regular)
3151:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           or previous sequence conversions data (for ADC group injected)
3152:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           has been retrieved by user software.
3153:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           In the meantime, ADC remains idle: does not performs any
3154:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           other conversion.
3155:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This mode allows to automatically adapt the ADC conversions
3156:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           triggers to the speed of the software that reads the data.
3157:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Moreover, this avoids risk of overrun for low frequency
3158:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           applications.
3159:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           How to use this low power mode:
3160:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - It is not recommended to use with interruption or DMA
3161:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             since these modes have to clear immediately the EOC flag
3162:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             (by CPU to free the IRQ pending event or by DMA).
3163:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Auto wait will work but fort a very short time, discarding
3164:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             its intended benefit (except specific case of high load of CPU
3165:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             or DMA transfers which can justify usage of auto wait).
3166:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Do use with polling: 1. Start conversion,
3167:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             2. Later on, when conversion data is needed: poll for end of
3168:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             conversion  to ensure that conversion is completed and
3169:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             retrieve ADC conversion data. This will trig another
3170:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC conversion start.
3171:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC low power mode "auto power-off" (feature available on
3172:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           this device if parameter LL_ADC_LP_AUTOPOWEROFF is available):
3173:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           the ADC automatically powers-off after a conversion and
3174:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           automatically wakes up when a new conversion is triggered
3175:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (with startup time between trigger and start of sampling).
3176:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This feature can be combined with low power mode "auto wait".
3177:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   With ADC low power mode "auto wait", the ADC conversion data read
3178:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is corresponding to previous ADC conversion start, independently
3179:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of delay during which ADC was idle.
3180:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Therefore, the ADC conversion data may be outdated: does not
3181:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         correspond to the current voltage level on the selected
3182:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC channel.
3183:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     AUTDLY         LL_ADC_GetLowPowerMode
3184:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3185:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3186:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_MODE_NONE
3187:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_AUTOWAIT
3188:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3189:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetLowPowerMode(ADC_TypeDef *ADCx)
3190:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3191:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_AUTDLY));
3192:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3193:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3194:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3195:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC selected Channel.
3196:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function set the pre-selection of channel configuration.
3197:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Caution: Channel selections is dependent to ADC instance and IP version:
3198:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         For STM32H72x/3x This is applicable only for ADC1/ADC2
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 60


3199:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         For Rest of STM32H7xxx This is applicable only all the ADCs instances.
3200:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * 
3201:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3202:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
3203:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           
3204:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           
3205:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           
3206:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           
3207:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           
3208:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           
3209:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
3210:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
3211:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
3212:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
3213:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
3214:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
3215:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
3216:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
3217:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
3218:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
3219:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
3220:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
3221:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
3222:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
3223:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3224:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3225:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetChannelPreSelection(ADC_TypeDef *ADCx, uint32_t Channel)
3226:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3227:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
3228:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     if (ADCx != ADC3)
3229:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
3230:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       /* ADC channels preselection */
3231:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
3232:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
3233:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
3234:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* ADC channels preselection */
3235:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
3236:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
3237:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3238:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3239:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3240:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC selected offset number 1, 2, 3 or 4.
3241:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function set the 2 items of offset configuration:
3242:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC channel to which the offset programmed will be applied
3243:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (independently of channel mapped on ADC group regular
3244:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           or group injected)
3245:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Offset level (offset to be subtracted from the raw
3246:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           converted data).
3247:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Caution: Offset format is dependent to ADC resolution:
3248:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         offset has to be left-aligned on bit 11, the LSB (right bits)
3249:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         are set to 0.
3250:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function enables the offset, by default. It can be forced
3251:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         to disable state using function LL_ADC_SetOffsetState().
3252:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If a channel is mapped on several offsets numbers, only the offset
3253:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         with the lowest value is considered for the subtraction.
3254:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3255:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 61


3256:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3257:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
3258:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On STM32H7, some fast channels are available: fast analog inputs
3259:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         coming from GPIO pads (ADC_IN0..5).
3260:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1_CH     LL_ADC_SetOffset\n
3261:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR1     OFFSET1        LL_ADC_SetOffset\n
3262:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR1     OFFSET1_EN     LL_ADC_SetOffset\n
3263:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSET2_CH     LL_ADC_SetOffset\n
3264:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSET2        LL_ADC_SetOffset\n
3265:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSET2_EN     LL_ADC_SetOffset\n
3266:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSET3_CH     LL_ADC_SetOffset\n
3267:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSET3        LL_ADC_SetOffset\n
3268:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSET3_EN     LL_ADC_SetOffset\n
3269:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSET4_CH     LL_ADC_SetOffset\n
3270:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSET4        LL_ADC_SetOffset\n
3271:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSET4_EN     LL_ADC_SetOffset
3272:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3273:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3274:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3275:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3276:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3277:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3278:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
3279:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
3280:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
3281:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
3282:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
3283:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
3284:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
3285:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
3286:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
3287:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
3288:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
3289:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
3290:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
3291:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
3292:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
3293:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
3294:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
3295:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
3296:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
3297:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
3298:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
3299:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
3300:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
3301:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
3302:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
3303:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
3304:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
3305:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
3306:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
3307:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
3308:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
3309:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
3310:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3311:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3312:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 62


3313:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 173              		.loc 1 3313 1
 174              		.cfi_startproc
 175              		@ args = 0, pretend = 0, frame = 24
 176              		@ frame_needed = 1, uses_anonymous_args = 0
 177              		@ link register save eliminated.
 178 0000 80B4     		push	{r7}
 179              	.LCFI18:
 180              		.cfi_def_cfa_offset 4
 181              		.cfi_offset 7, -4
 182 0002 87B0     		sub	sp, sp, #28
 183              	.LCFI19:
 184              		.cfi_def_cfa_offset 32
 185 0004 00AF     		add	r7, sp, #0
 186              	.LCFI20:
 187              		.cfi_def_cfa_register 7
 188 0006 F860     		str	r0, [r7, #12]
 189 0008 B960     		str	r1, [r7, #8]
 190 000a 7A60     		str	r2, [r7, #4]
 191 000c 3B60     		str	r3, [r7]
3314:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 192              		.loc 1 3314 25
 193 000e FB68     		ldr	r3, [r7, #12]
 194 0010 6033     		adds	r3, r3, #96
 195 0012 1A46     		mov	r2, r3
 196 0014 BB68     		ldr	r3, [r7, #8]
 197 0016 9B00     		lsls	r3, r3, #2
 198 0018 1344     		add	r3, r3, r2
 199              		.loc 1 3314 18
 200 001a 7B61     		str	r3, [r7, #20]
3315:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
3316:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3317:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3318:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
3319:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
3320:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
3321:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3322:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
3323:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
3324:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3325:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
 201              		.loc 1 3325 5
 202 001c 7B69     		ldr	r3, [r7, #20]
 203 001e 1B68     		ldr	r3, [r3]
 204 0020 03F00042 		and	r2, r3, #-2147483648
 205 0024 7B68     		ldr	r3, [r7, #4]
 206 0026 03F0F841 		and	r1, r3, #2080374784
 207 002a 3B68     		ldr	r3, [r7]
 208 002c 0B43     		orrs	r3, r3, r1
 209 002e 1A43     		orrs	r2, r2, r3
 210 0030 7B69     		ldr	r3, [r7, #20]
 211 0032 1A60     		str	r2, [r3]
3326:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
3327:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
3328:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3329:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 212              		.loc 1 3329 1
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 63


 213 0034 00BF     		nop
 214 0036 1C37     		adds	r7, r7, #28
 215              	.LCFI21:
 216              		.cfi_def_cfa_offset 4
 217 0038 BD46     		mov	sp, r7
 218              	.LCFI22:
 219              		.cfi_def_cfa_register 13
 220              		@ sp needed
 221 003a 5DF8047B 		ldr	r7, [sp], #4
 222              	.LCFI23:
 223              		.cfi_restore 7
 224              		.cfi_def_cfa_offset 0
 225 003e 7047     		bx	lr
 226              		.cfi_endproc
 227              	.LFE160:
 229              		.section	.text.LL_ADC_SetDataRightShift,"ax",%progbits
 230              		.align	1
 231              		.syntax unified
 232              		.thumb
 233              		.thumb_func
 235              	LL_ADC_SetDataRightShift:
 236              	.LFB163:
3330:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3331:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3332:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3333:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Channel to which the offset programmed will be applied
3334:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (independently of channel mapped on ADC group regular
3335:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or group injected)
3336:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Usage of the returned channel number:
3337:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
3338:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
3339:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
3340:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
3341:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
3342:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
3343:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           as parameter for another function.
3344:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To get the channel number in decimal format:
3345:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           process the returned value with the helper macro
3346:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
3347:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On STM32H7, some fast channels are available: fast analog inputs
3348:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         coming from GPIO pads (ADC_IN0..5).
3349:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1_CH     LL_ADC_GetOffsetChannel\n
3350:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSET2_CH     LL_ADC_GetOffsetChannel\n
3351:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSET3_CH     LL_ADC_GetOffsetChannel\n
3352:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSET4_CH     LL_ADC_GetOffsetChannel
3353:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3354:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3355:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3356:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3357:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3358:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3359:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3360:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
3361:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
3362:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
3363:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
3364:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 64


3365:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
3366:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
3367:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
3368:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
3369:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
3370:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
3371:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
3372:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
3373:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
3374:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
3375:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
3376:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
3377:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
3378:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
3379:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
3380:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
3381:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
3382:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
3383:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
3384:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
3385:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
3386:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
3387:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
3388:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
3389:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).\n
3390:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1, 2) For ADC channel read back from ADC register,
3391:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                comparison with internal channel parameter to be done
3392:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
3393:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3394:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
3395:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3396:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3397:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3398:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
3399:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3400:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3401:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3402:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3403:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Offset level (offset to be subtracted from the raw
3404:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         converted data).
3405:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Caution: Offset format is dependent to ADC resolution:
3406:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         offset has to be left-aligned on bit 11, the LSB (right bits)
3407:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         are set to 0.
3408:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1        LL_ADC_GetOffsetLevel\n
3409:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSET2        LL_ADC_GetOffsetLevel\n
3410:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSET3        LL_ADC_GetOffsetLevel\n
3411:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSET4        LL_ADC_GetOffsetLevel
3412:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3413:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3414:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3415:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3416:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3417:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3418:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
3419:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3420:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetLevel(ADC_TypeDef *ADCx, uint32_t Offsety)
3421:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 65


3422:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3423:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3424:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1);
3425:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3426:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3427:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3428:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3429:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set data right shift for the ADC selected offset number 1, 2, 3 or 4:
3430:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         signed offset saturation if enabled or disabled.
3431:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    RSHIFT          LL_ADC_SetDataRightShift\n
3432:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3433:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3434:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3435:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3436:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3437:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3438:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  RigthShift This parameter can be one of the following values:
3439:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
3440:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
3441:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned None
3442:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3443:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthSh
3444:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 237              		.loc 1 3444 1
 238              		.cfi_startproc
 239              		@ args = 0, pretend = 0, frame = 16
 240              		@ frame_needed = 1, uses_anonymous_args = 0
 241              		@ link register save eliminated.
 242 0000 80B4     		push	{r7}
 243              	.LCFI24:
 244              		.cfi_def_cfa_offset 4
 245              		.cfi_offset 7, -4
 246 0002 85B0     		sub	sp, sp, #20
 247              	.LCFI25:
 248              		.cfi_def_cfa_offset 24
 249 0004 00AF     		add	r7, sp, #0
 250              	.LCFI26:
 251              		.cfi_def_cfa_register 7
 252 0006 F860     		str	r0, [r7, #12]
 253 0008 B960     		str	r1, [r7, #8]
 254 000a 7A60     		str	r2, [r7, #4]
3445:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RS
 255              		.loc 1 3445 3
 256 000c FB68     		ldr	r3, [r7, #12]
 257 000e 1B69     		ldr	r3, [r3, #16]
 258 0010 23F4F042 		bic	r2, r3, #30720
 259 0014 BB68     		ldr	r3, [r7, #8]
 260 0016 03F01F03 		and	r3, r3, #31
 261 001a 7968     		ldr	r1, [r7, #4]
 262 001c 01FA03F3 		lsl	r3, r1, r3
 263 0020 1A43     		orrs	r2, r2, r3
 264 0022 FB68     		ldr	r3, [r7, #12]
 265 0024 1A61     		str	r2, [r3, #16]
3446:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 266              		.loc 1 3446 1
 267 0026 00BF     		nop
 268 0028 1437     		adds	r7, r7, #20
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 66


 269              	.LCFI27:
 270              		.cfi_def_cfa_offset 4
 271 002a BD46     		mov	sp, r7
 272              	.LCFI28:
 273              		.cfi_def_cfa_register 13
 274              		@ sp needed
 275 002c 5DF8047B 		ldr	r7, [sp], #4
 276              	.LCFI29:
 277              		.cfi_restore 7
 278              		.cfi_def_cfa_offset 0
 279 0030 7047     		bx	lr
 280              		.cfi_endproc
 281              	.LFE163:
 283              		.section	.text.LL_ADC_SetOffsetSignedSaturation,"ax",%progbits
 284              		.align	1
 285              		.syntax unified
 286              		.thumb
 287              		.thumb_func
 289              	LL_ADC_SetOffsetSignedSaturation:
 290              	.LFB165:
3447:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3448:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3449:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get data right shift for the ADC selected offset number 1, 2, 3 or 4:
3450:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         signed offset saturation if enabled or disabled.
3451:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    RSHIFT          LL_ADC_GetDataRightShift\n
3452:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3453:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3454:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3455:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3456:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3457:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3458:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3459:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
3460:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
3461:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3462:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety)
3463:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3464:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)((READ_BIT(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 << (Offsety & 0x1FUL)))) >> (Offsety 
3465:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3466:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3467:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3468:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set signed saturation for the ADC selected offset number 1, 2, 3 or 4:
3469:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         signed offset saturation if enabled or disabled.
3470:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     SSATE          LL_ADC_SetOffsetSignedSaturation\n
3471:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     SSATE          LL_ADC_SetOffsetSignedSaturation\n
3472:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     SSATE          LL_ADC_SetOffsetSignedSaturation\n
3473:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     SSATE          LL_ADC_SetOffsetSignedSaturation
3474:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3475:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3476:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3477:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3478:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3479:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3480:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  OffsetSignedSaturation This parameter can be one of the following values:
3481:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
3482:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
3483:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned None
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 67


3484:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3485:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t
3486:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 291              		.loc 1 3486 1
 292              		.cfi_startproc
 293              		@ args = 0, pretend = 0, frame = 24
 294              		@ frame_needed = 1, uses_anonymous_args = 0
 295              		@ link register save eliminated.
 296 0000 80B4     		push	{r7}
 297              	.LCFI30:
 298              		.cfi_def_cfa_offset 4
 299              		.cfi_offset 7, -4
 300 0002 87B0     		sub	sp, sp, #28
 301              	.LCFI31:
 302              		.cfi_def_cfa_offset 32
 303 0004 00AF     		add	r7, sp, #0
 304              	.LCFI32:
 305              		.cfi_def_cfa_register 7
 306 0006 F860     		str	r0, [r7, #12]
 307 0008 B960     		str	r1, [r7, #8]
 308 000a 7A60     		str	r2, [r7, #4]
 309              	.LBB50:
3487:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
3488:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3489:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3490:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Function not available on this instance */
3491:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3492:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
3493:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
3494:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3495:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 310              		.loc 1 3495 27
 311 000c FB68     		ldr	r3, [r7, #12]
 312 000e 6033     		adds	r3, r3, #96
 313 0010 1A46     		mov	r2, r3
 314 0012 BB68     		ldr	r3, [r7, #8]
 315 0014 9B00     		lsls	r3, r3, #2
 316 0016 1344     		add	r3, r3, r2
 317              		.loc 1 3495 20
 318 0018 7B61     		str	r3, [r7, #20]
3496:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 319              		.loc 1 3496 5
 320 001a 7B69     		ldr	r3, [r7, #20]
 321 001c 1B68     		ldr	r3, [r3]
 322 001e 23F00042 		bic	r2, r3, #-2147483648
 323 0022 7B68     		ldr	r3, [r7, #4]
 324 0024 1A43     		orrs	r2, r2, r3
 325 0026 7B69     		ldr	r3, [r7, #20]
 326 0028 1A60     		str	r2, [r3]
 327              	.LBE50:
3497:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3498:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 328              		.loc 1 3498 1
 329 002a 00BF     		nop
 330 002c 1C37     		adds	r7, r7, #28
 331              	.LCFI33:
 332              		.cfi_def_cfa_offset 4
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 68


 333 002e BD46     		mov	sp, r7
 334              	.LCFI34:
 335              		.cfi_def_cfa_register 13
 336              		@ sp needed
 337 0030 5DF8047B 		ldr	r7, [sp], #4
 338              	.LCFI35:
 339              		.cfi_restore 7
 340              		.cfi_def_cfa_offset 0
 341 0034 7047     		bx	lr
 342              		.cfi_endproc
 343              	.LFE165:
 345              		.section	.text.LL_ADC_REG_IsTriggerSourceSWStart,"ax",%progbits
 346              		.align	1
 347              		.syntax unified
 348              		.thumb
 349              		.thumb_func
 351              	LL_ADC_REG_IsTriggerSourceSWStart:
 352              	.LFB169:
3499:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3500:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3501:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get signed saturation for the ADC selected offset number 1, 2, 3 or 4:
3502:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         signed offset saturation if enabled or disabled.
3503:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     SSATE          LL_ADC_GetOffsetSignedSaturation\n
3504:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     SSATE          LL_ADC_GetOffsetSignedSaturation\n
3505:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     SSATE          LL_ADC_GetOffsetSignedSaturation\n
3506:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     SSATE          LL_ADC_GetOffsetSignedSaturation
3507:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3508:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3509:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3510:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3511:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3512:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3513:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3514:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
3515:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
3516:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3517:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety)
3518:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3519:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
3520:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3521:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3522:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Function not available on this instance */
3523:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return 0UL;
3524:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3525:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
3526:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
3527:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3528:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3529:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t) READ_BIT(*preg, ADC_OFR1_SSATE);
3530:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3531:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3532:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3533:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
3534:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3535:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set for the ADC selected offset number 1, 2, 3 or 4:
3536:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         choose offset saturation mode.
3537:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 69


3538:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3539:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3540:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
3541:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     SATEN          LL_ADC_SetOffsetSaturation\n
3542:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     SATEN          LL_ADC_SetOffsetSaturation\n
3543:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     SATEN          LL_ADC_SetOffsetSaturation\n
3544:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     SATEN          LL_ADC_SetOffsetSaturation
3545:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3546:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3547:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3548:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3549:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3550:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3551:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  OffsetSaturation This parameter can be one of the following values:
3552:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
3553:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
3554:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3555:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3556:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Offse
3557:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3558:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3559:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3560:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3561:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3562:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
3563:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_SATEN,
3564:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                OffsetSaturation);
3565:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3566:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3567:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3568:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3569:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3570:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         offset saturation if enabled or disabled.
3571:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     SATEN          LL_ADC_GetOffsetSaturation\n
3572:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     SATEN          LL_ADC_GetOffsetSaturation\n
3573:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     SATEN          LL_ADC_GetOffsetSaturation\n
3574:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     SATEN          LL_ADC_GetOffsetSaturation
3575:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3576:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3577:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3578:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3579:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3580:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3581:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3582:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
3583:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
3584:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3585:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety)
3586:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3587:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3588:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3589:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3590:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3591:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t) READ_BIT(*preg, ADC3_OFR1_SATEN);
3592:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }else
3593:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3594:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return 0UL;
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 70


3595:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3596:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3597:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3598:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3599:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set for the ADC selected offset number 1, 2, 3 or 4:
3600:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         choose offset sign.
3601:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3602:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3603:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3604:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
3605:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     OFFSETPOS      LL_ADC_SetOffsetSign\n
3606:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSETPOS      LL_ADC_SetOffsetSign\n
3607:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSETPOS      LL_ADC_SetOffsetSign\n
3608:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSETPOS      LL_ADC_SetOffsetSign
3609:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3610:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3611:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3612:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3613:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3614:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3615:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  OffsetSign This parameter can be one of the following values:
3616:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
3617:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
3618:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3619:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3620:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
3621:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3622:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3623:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3624:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3625:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3626:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
3627:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_OFFSETPOS,
3628:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                OffsetSign);
3629:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3630:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3631:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3632:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3633:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3634:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         offset sign if positive or negative.
3635:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     OFFSETPOS      LL_ADC_GetOffsetSign\n
3636:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSETPOS      LL_ADC_GetOffsetSign\n
3637:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSETPOS      LL_ADC_GetOffsetSign\n
3638:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSETPOS      LL_ADC_GetOffsetSign
3639:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3640:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3641:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3642:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3643:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3644:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3645:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3646:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
3647:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
3648:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3649:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety)
3650:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3651:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 71


3652:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3653:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3654:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3655:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t) READ_BIT(*preg, ADC3_OFR1_OFFSETPOS);
3656:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3657:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
3658:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   { 
3659:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return 0UL;
3660:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3661:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3662:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3663:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3664:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set for the ADC selected offset number 1, 2, 3 or 4:
3665:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         force offset state disable or enable
3666:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without modifying offset channel or offset value.
3667:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function should be needed only in case of offset to be
3668:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         enabled-disabled dynamically, and should not be needed in other cases:
3669:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         function LL_ADC_SetOffset() automatically enables the offset.
3670:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3671:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3672:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3673:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
3674:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1_EN     LL_ADC_SetOffsetState\n
3675:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSET2_EN     LL_ADC_SetOffsetState\n
3676:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSET3_EN     LL_ADC_SetOffsetState\n
3677:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSET4_EN     LL_ADC_SetOffsetState
3678:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3679:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3680:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3681:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3682:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3683:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3684:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  OffsetState This parameter can be one of the following values:
3685:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_DISABLE
3686:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_ENABLE
3687:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3688:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3689:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetStat
3690:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3691:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3692:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3693:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3694:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
3695:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_OFFSET1_EN,
3696:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                OffsetState);
3697:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3698:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
3699:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3700:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
3701:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC_OFR1_SSATE,
3702:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                OffsetState);
3703:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3704:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3705:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3706:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3707:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3708:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         offset state disabled or enabled.
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 72


3709:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1_EN     LL_ADC_GetOffsetState\n
3710:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSET2_EN     LL_ADC_GetOffsetState\n
3711:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSET3_EN     LL_ADC_GetOffsetState\n
3712:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSET4_EN     LL_ADC_GetOffsetState
3713:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3714:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3715:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3716:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3717:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3718:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3719:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3720:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_DISABLE
3721:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_ENABLE
3722:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3723:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety)
3724:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3725:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3726:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3727:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3728:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t) READ_BIT(*preg, ADC3_OFR1_OFFSET1_EN);
3729:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3730:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
3731:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3732:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t) READ_BIT(*preg, ADC_OFR1_SSATE);
3733:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3734:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3735:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3736:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
3737:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3738:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3739:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
3740:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3741:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3742:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Group_Regular Configuration of ADC hierarchical scope: gr
3743:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
3744:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3745:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3746:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3747:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group regular conversion trigger source:
3748:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal (SW start) or from external peripheral (timer event,
3749:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         external interrupt line).
3750:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting trigger source to external trigger
3751:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         also set trigger polarity to rising edge
3752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (default setting for compatibility with some ADC on other
3753:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         STM32 families having this setting set by HW default value).
3754:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         In case of need to modify trigger edge, use
3755:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         function @ref LL_ADC_REG_SetTriggerEdge().
3756:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer
3757:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         depends on timers availability on the selected device.
3758:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3759:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3760:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3761:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
3762:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     EXTSEL         LL_ADC_REG_SetTriggerSource\n
3763:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     EXTEN          LL_ADC_REG_SetTriggerSource
3764:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3765:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  TriggerSource This parameter can be one of the following values:
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 73


3766:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_SOFTWARE
3767:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH1
3768:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH2
3769:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH3
3770:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_CH2
3771:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_TRGO
3772:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_CH4
3773:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_EXTI_LINE11
3774:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO
3775:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO2
3776:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO
3777:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO2
3778:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_TRGO
3779:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_TRGO
3780:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM6_TRGO
3781:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM15_TRGO
3782:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_CH4
3783:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG1
3784:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG3
3785:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_LPTIM1_OUT
3786:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_LPTIM2_OUT
3787:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_LPTIM3_OUT
3788:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3789:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3790:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetTriggerSource(ADC_TypeDef *ADCx, uint32_t TriggerSource)
3791:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3792:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
3793:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3794:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3795:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3796:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion trigger source:
3797:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal (SW start) or from external peripheral (timer event,
3798:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         external interrupt line).
3799:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To determine whether group regular trigger source is
3800:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal (SW start) or external, without detail
3801:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of which peripheral is selected as external trigger,
3802:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (equivalent to
3803:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         "if(LL_ADC_REG_GetTriggerSource(ADC1) == LL_ADC_REG_TRIG_SOFTWARE)")
3804:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use function @ref LL_ADC_REG_IsTriggerSourceSWStart.
3805:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer
3806:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         depends on timers availability on the selected device.
3807:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     EXTSEL         LL_ADC_REG_GetTriggerSource\n
3808:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     EXTEN          LL_ADC_REG_GetTriggerSource
3809:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3810:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3811:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_SOFTWARE
3812:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH1
3813:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH2
3814:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH3
3815:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_CH2
3816:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_TRGO
3817:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_CH4
3818:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_EXTI_LINE11
3819:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO
3820:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO2
3821:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO
3822:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO2
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 74


3823:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_TRGO
3824:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_TRGO
3825:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM6_TRGO
3826:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM15_TRGO
3827:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_CH4
3828:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG1
3829:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG3
3830:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_LPTIM1_OUT
3831:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_LPTIM2_OUT
3832:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_LPTIM3_OUT
3833:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3834:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetTriggerSource(ADC_TypeDef *ADCx)
3835:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3836:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t TriggerSource = READ_BIT(ADCx->CFGR, ADC_CFGR_EXTSEL | ADC_CFGR_EXTEN);
3837:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3838:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Value for shift of {0; 4; 8; 12} depending on value of bitfield          */
3839:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* corresponding to ADC_CFGR_EXTEN {0; 1; 2; 3}.                            */
3840:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t ShiftExten = ((TriggerSource & ADC_CFGR_EXTEN) >> (ADC_REG_TRIG_EXTEN_BITOFFSET_POS - 2U
3841:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3842:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bitfield corresponding to ADC_CFGR_EXTEN and ADC_CFGR_EXTSEL         */
3843:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* to match with triggers literals definition.                              */
3844:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((TriggerSource
3845:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            & (ADC_REG_TRIG_SOURCE_MASK >> ShiftExten) & ADC_CFGR_EXTSEL)
3846:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****           | ((ADC_REG_TRIG_EDGE_MASK >> ShiftExten) & ADC_CFGR_EXTEN)
3847:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          );
3848:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3849:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3850:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3851:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion trigger source internal (SW start)
3852:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or external.
3853:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of group regular trigger source set to external trigger,
3854:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         to determine which peripheral is selected as external trigger,
3855:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use function @ref LL_ADC_REG_GetTriggerSource().
3856:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     EXTEN          LL_ADC_REG_IsTriggerSourceSWStart
3857:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3858:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value "0" if trigger source external trigger
3859:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Value "1" if trigger source SW start.
3860:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3861:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
3862:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 353              		.loc 1 3862 1
 354              		.cfi_startproc
 355              		@ args = 0, pretend = 0, frame = 8
 356              		@ frame_needed = 1, uses_anonymous_args = 0
 357              		@ link register save eliminated.
 358 0000 80B4     		push	{r7}
 359              	.LCFI36:
 360              		.cfi_def_cfa_offset 4
 361              		.cfi_offset 7, -4
 362 0002 83B0     		sub	sp, sp, #12
 363              	.LCFI37:
 364              		.cfi_def_cfa_offset 16
 365 0004 00AF     		add	r7, sp, #0
 366              	.LCFI38:
 367              		.cfi_def_cfa_register 7
 368 0006 7860     		str	r0, [r7, #4]
3863:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 75


 369              		.loc 1 3863 12
 370 0008 7B68     		ldr	r3, [r7, #4]
 371 000a DB68     		ldr	r3, [r3, #12]
 372 000c 03F44063 		and	r3, r3, #3072
 373              		.loc 1 3863 103
 374 0010 002B     		cmp	r3, #0
 375 0012 01D1     		bne	.L9
 376              		.loc 1 3863 103 is_stmt 0 discriminator 1
 377 0014 0123     		movs	r3, #1
 378 0016 00E0     		b	.L11
 379              	.L9:
 380              		.loc 1 3863 103 discriminator 2
 381 0018 0023     		movs	r3, #0
 382              	.L11:
3864:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 383              		.loc 1 3864 1 is_stmt 1 discriminator 5
 384 001a 1846     		mov	r0, r3
 385 001c 0C37     		adds	r7, r7, #12
 386              	.LCFI39:
 387              		.cfi_def_cfa_offset 4
 388 001e BD46     		mov	sp, r7
 389              	.LCFI40:
 390              		.cfi_def_cfa_register 13
 391              		@ sp needed
 392 0020 5DF8047B 		ldr	r7, [sp], #4
 393              	.LCFI41:
 394              		.cfi_restore 7
 395              		.cfi_def_cfa_offset 0
 396 0024 7047     		bx	lr
 397              		.cfi_endproc
 398              	.LFE169:
 400              		.section	.text.LL_ADC_REG_SetSequencerRanks,"ax",%progbits
 401              		.align	1
 402              		.syntax unified
 403              		.thumb
 404              		.thumb_func
 406              	LL_ADC_REG_SetSequencerRanks:
 407              	.LFB176:
3865:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3866:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3867:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group regular conversion trigger polarity.
3868:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Applicable only for trigger source set to external trigger.
3869:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3870:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3871:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3872:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
3873:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     EXTEN          LL_ADC_REG_SetTriggerEdge
3874:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3875:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ExternalTriggerEdge This parameter can be one of the following values:
3876:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISING
3877:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_FALLING
3878:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISINGFALLING
3879:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3880:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3881:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetTriggerEdge(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
3882:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3883:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN, ExternalTriggerEdge);
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 76


3884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3885:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3886:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3887:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion trigger polarity.
3888:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Applicable only for trigger source set to external trigger.
3889:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     EXTEN          LL_ADC_REG_GetTriggerEdge
3890:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3891:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3892:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISING
3893:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_FALLING
3894:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISINGFALLING
3895:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3896:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetTriggerEdge(ADC_TypeDef *ADCx)
3897:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3898:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN));
3899:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3900:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3901:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
3902:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3903:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC sampling mode.
3904:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function set the ADC conversion sampling mode
3905:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This mode applies to regular group only.
3906:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Set sampling mode is applied to all conversion of regular group.
3907:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3908:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3909:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3910:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
3911:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    BULB           LL_ADC_REG_SetSamplingMode\n
3912:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR2    SMPTRIG        LL_ADC_REG_SetSamplingMode
3913:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3914:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SamplingMode This parameter can be one of the following values:
3915:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SAMPLING_MODE_NORMAL
3916:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SAMPLING_MODE_BULB
3917:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SAMPLING_MODE_TRIGGER_CONTROLED
3918:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3919:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3920:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSamplingMode(ADC_TypeDef *ADCx, uint32_t SamplingMode)
3921:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3922:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx != ADC3)
3923:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3924:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Function not available on this instance */
3925:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3926:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
3927:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3928:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, SamplingMode);
3929:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3930:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3931:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
3932:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3933:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3934:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group regular sequencer length and scan direction.
3935:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Description of ADC group regular sequencer features:
3936:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - For devices with sequencer fully configurable
3937:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerRanks()" available):
3938:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
3939:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           are configurable.
3940:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This function performs configuration of:
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 77


3941:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence.
3942:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
3943:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             scan direction is forward (from rank 1 to rank n).
3944:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Sequencer ranks are selected using
3945:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerRanks()".
3946:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - For devices with sequencer not fully configurable
3947:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerChannels()" available):
3948:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
3949:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           are defined by channel number.
3950:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This function performs configuration of:
3951:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence is
3952:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             defined by number of channels set in the sequence,
3953:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             rank of each channel is fixed by channel HW number.
3954:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             (channel 0 fixed on rank 0, channel 1 fixed on rank1, ...).
3955:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
3956:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             scan direction is forward (from lowest channel number to
3957:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             highest channel number).
3958:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Sequencer ranks are selected using
3959:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerChannels()".
3960:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
3961:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
3962:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3963:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3964:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3965:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
3966:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll SQR1     L              LL_ADC_REG_SetSequencerLength
3967:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3968:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SequencerNbRanks This parameter can be one of the following values:
3969:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_DISABLE
3970:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS
3971:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS
3972:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS
3973:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS
3974:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS
3975:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS
3976:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS
3977:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_9RANKS
3978:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_10RANKS
3979:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_11RANKS
3980:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_12RANKS
3981:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_13RANKS
3982:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_14RANKS
3983:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
3984:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
3985:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3986:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3987:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
3988:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3989:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
3990:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3991:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3992:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3993:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular sequencer length and scan direction.
3994:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Description of ADC group regular sequencer features:
3995:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - For devices with sequencer fully configurable
3996:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerRanks()" available):
3997:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 78


3998:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           are configurable.
3999:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This function retrieves:
4000:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence.
4001:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
4002:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             scan direction is forward (from rank 1 to rank n).
4003:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Sequencer ranks are selected using
4004:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerRanks()".
4005:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - For devices with sequencer not fully configurable
4006:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerChannels()" available):
4007:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
4008:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           are defined by channel number.
4009:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This function retrieves:
4010:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence is
4011:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             defined by number of channels set in the sequence,
4012:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             rank of each channel is fixed by channel HW number.
4013:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             (channel 0 fixed on rank 0, channel 1 fixed on rank1, ...).
4014:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
4015:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             scan direction is forward (from lowest channel number to
4016:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             highest channel number).
4017:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Sequencer ranks are selected using
4018:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerChannels()".
4019:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
4020:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
4021:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll SQR1     L              LL_ADC_REG_GetSequencerLength
4022:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4023:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4024:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_DISABLE
4025:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS
4026:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS
4027:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS
4028:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS
4029:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS
4030:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS
4031:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS
4032:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_9RANKS
4033:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_10RANKS
4034:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_11RANKS
4035:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_12RANKS
4036:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_13RANKS
4037:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_14RANKS
4038:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
4039:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
4040:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4041:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerLength(ADC_TypeDef *ADCx)
4042:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4043:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->SQR1, ADC_SQR1_L));
4044:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4045:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4046:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4047:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group regular sequencer discontinuous mode:
4048:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
4049:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         number of ranks.
4050:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group regular
4051:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         continuous mode and sequencer discontinuous mode.
4052:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   It is not possible to enable both ADC auto-injected mode
4053:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and ADC group regular sequencer discontinuous mode.
4054:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 79


4055:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4056:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4057:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
4058:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     DISCEN         LL_ADC_REG_SetSequencerDiscont\n
4059:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     DISCNUM        LL_ADC_REG_SetSequencerDiscont
4060:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4061:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SeqDiscont This parameter can be one of the following values:
4062:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_DISABLE
4063:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_1RANK
4064:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_2RANKS
4065:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_3RANKS
4066:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_4RANKS
4067:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_5RANKS
4068:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_6RANKS
4069:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_7RANKS
4070:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_8RANKS
4071:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4072:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4073:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerDiscont(ADC_TypeDef *ADCx, uint32_t SeqDiscont)
4074:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4075:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_DISCEN | ADC_CFGR_DISCNUM, SeqDiscont);
4076:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4077:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4078:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4079:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular sequencer discontinuous mode:
4080:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
4081:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         number of ranks.
4082:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     DISCEN         LL_ADC_REG_GetSequencerDiscont\n
4083:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     DISCNUM        LL_ADC_REG_GetSequencerDiscont
4084:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4085:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4086:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_DISABLE
4087:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_1RANK
4088:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_2RANKS
4089:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_3RANKS
4090:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_4RANKS
4091:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_5RANKS
4092:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_6RANKS
4093:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_7RANKS
4094:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_8RANKS
4095:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4096:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerDiscont(ADC_TypeDef *ADCx)
4097:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4098:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DISCEN | ADC_CFGR_DISCNUM));
4099:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4100:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4101:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4102:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group regular sequence: channel on the selected
4103:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         scan sequence rank.
4104:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function performs configuration of:
4105:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Channels ordering into each rank of scan sequence:
4106:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           whatever channel can be placed into whatever rank.
4107:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, ADC group regular sequencer is
4108:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         fully configurable: sequencer length and each rank
4109:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         affectation to a channel are configurable.
4110:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to description of function @ref LL_ADC_REG_SetSequencerLength().
4111:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 80


4112:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
4113:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, to measure internal channels (VrefInt,
4114:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
4115:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         enabled separately.
4116:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
4117:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4118:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4119:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4120:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
4121:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll SQR1     SQ1            LL_ADC_REG_SetSequencerRanks\n
4122:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR1     SQ2            LL_ADC_REG_SetSequencerRanks\n
4123:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR1     SQ3            LL_ADC_REG_SetSequencerRanks\n
4124:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR1     SQ4            LL_ADC_REG_SetSequencerRanks\n
4125:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ5            LL_ADC_REG_SetSequencerRanks\n
4126:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ6            LL_ADC_REG_SetSequencerRanks\n
4127:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ7            LL_ADC_REG_SetSequencerRanks\n
4128:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ8            LL_ADC_REG_SetSequencerRanks\n
4129:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ9            LL_ADC_REG_SetSequencerRanks\n
4130:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ10           LL_ADC_REG_SetSequencerRanks\n
4131:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ11           LL_ADC_REG_SetSequencerRanks\n
4132:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ12           LL_ADC_REG_SetSequencerRanks\n
4133:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ13           LL_ADC_REG_SetSequencerRanks\n
4134:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ14           LL_ADC_REG_SetSequencerRanks\n
4135:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR4     SQ15           LL_ADC_REG_SetSequencerRanks\n
4136:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR4     SQ16           LL_ADC_REG_SetSequencerRanks
4137:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4138:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
4139:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_1
4140:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_2
4141:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_3
4142:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_4
4143:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_5
4144:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_6
4145:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_7
4146:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_8
4147:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_9
4148:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_10
4149:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_11
4150:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_12
4151:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_13
4152:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_14
4153:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_15
4154:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_16
4155:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
4156:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
4157:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
4158:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
4159:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
4160:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
4161:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
4162:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
4163:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
4164:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
4165:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
4166:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
4167:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
4168:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 81


4169:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
4170:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
4171:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
4172:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
4173:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
4174:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
4175:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
4176:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
4177:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
4178:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
4179:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
4180:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
4181:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
4182:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
4183:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
4184:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
4185:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
4186:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4187:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4188:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channe
4189:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 408              		.loc 1 4189 1
 409              		.cfi_startproc
 410              		@ args = 0, pretend = 0, frame = 24
 411              		@ frame_needed = 1, uses_anonymous_args = 0
 412              		@ link register save eliminated.
 413 0000 80B4     		push	{r7}
 414              	.LCFI42:
 415              		.cfi_def_cfa_offset 4
 416              		.cfi_offset 7, -4
 417 0002 87B0     		sub	sp, sp, #28
 418              	.LCFI43:
 419              		.cfi_def_cfa_offset 32
 420 0004 00AF     		add	r7, sp, #0
 421              	.LCFI44:
 422              		.cfi_def_cfa_register 7
 423 0006 F860     		str	r0, [r7, #12]
 424 0008 B960     		str	r1, [r7, #8]
 425 000a 7A60     		str	r2, [r7, #4]
4190:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bits with content of parameter "Channel" with bits position          */
4191:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* in register and register position depending on parameter "Rank".         */
4192:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameters "Rank" and "Channel" are used with masks because containing   */
4193:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
4194:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> A
 426              		.loc 1 4194 25
 427 000c FB68     		ldr	r3, [r7, #12]
 428 000e 3033     		adds	r3, r3, #48
 429 0010 1A46     		mov	r2, r3
 430 0012 BB68     		ldr	r3, [r7, #8]
 431 0014 1B0A     		lsrs	r3, r3, #8
 432 0016 9B00     		lsls	r3, r3, #2
 433 0018 03F00C03 		and	r3, r3, #12
 434 001c 1344     		add	r3, r3, r2
 435              		.loc 1 4194 18
 436 001e 7B61     		str	r3, [r7, #20]
4195:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4196:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(*preg,
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 82


 437              		.loc 1 4196 3
 438 0020 7B69     		ldr	r3, [r7, #20]
 439 0022 1A68     		ldr	r2, [r3]
 440 0024 BB68     		ldr	r3, [r7, #8]
 441 0026 03F01F03 		and	r3, r3, #31
 442 002a 1F21     		movs	r1, #31
 443 002c 01FA03F3 		lsl	r3, r1, r3
 444 0030 DB43     		mvns	r3, r3
 445 0032 1A40     		ands	r2, r2, r3
 446 0034 7B68     		ldr	r3, [r7, #4]
 447 0036 9B0E     		lsrs	r3, r3, #26
 448 0038 03F01F01 		and	r1, r3, #31
 449 003c BB68     		ldr	r3, [r7, #8]
 450 003e 03F01F03 		and	r3, r3, #31
 451 0042 01FA03F3 		lsl	r3, r1, r3
 452 0046 1A43     		orrs	r2, r2, r3
 453 0048 7B69     		ldr	r3, [r7, #20]
 454 004a 1A60     		str	r2, [r3]
4197:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
4198:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Ra
4199:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 455              		.loc 1 4199 1
 456 004c 00BF     		nop
 457 004e 1C37     		adds	r7, r7, #28
 458              	.LCFI45:
 459              		.cfi_def_cfa_offset 4
 460 0050 BD46     		mov	sp, r7
 461              	.LCFI46:
 462              		.cfi_def_cfa_register 13
 463              		@ sp needed
 464 0052 5DF8047B 		ldr	r7, [sp], #4
 465              	.LCFI47:
 466              		.cfi_restore 7
 467              		.cfi_def_cfa_offset 0
 468 0056 7047     		bx	lr
 469              		.cfi_endproc
 470              	.LFE176:
 472              		.section	.text.LL_ADC_REG_SetDataTransferMode,"ax",%progbits
 473              		.align	1
 474              		.syntax unified
 475              		.thumb
 476              		.thumb_func
 478              	LL_ADC_REG_SetDataTransferMode:
 479              	.LFB180:
4200:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4201:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4202:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular sequence: channel on the selected
4203:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         scan sequence rank.
4204:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, ADC group regular sequencer is
4205:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         fully configurable: sequencer length and each rank
4206:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         affectation to a channel are configurable.
4207:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to description of function @ref LL_ADC_REG_SetSequencerLength().
4208:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
4209:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
4210:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Usage of the returned channel number:
4211:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
4212:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 83


4213:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
4214:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
4215:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
4216:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
4217:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           as parameter for another function.
4218:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To get the channel number in decimal format:
4219:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           process the returned value with the helper macro
4220:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
4221:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll SQR1     SQ1            LL_ADC_REG_GetSequencerRanks\n
4222:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR1     SQ2            LL_ADC_REG_GetSequencerRanks\n
4223:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR1     SQ3            LL_ADC_REG_GetSequencerRanks\n
4224:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR1     SQ4            LL_ADC_REG_GetSequencerRanks\n
4225:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ5            LL_ADC_REG_GetSequencerRanks\n
4226:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ6            LL_ADC_REG_GetSequencerRanks\n
4227:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ7            LL_ADC_REG_GetSequencerRanks\n
4228:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ8            LL_ADC_REG_GetSequencerRanks\n
4229:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ9            LL_ADC_REG_GetSequencerRanks\n
4230:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ10           LL_ADC_REG_GetSequencerRanks\n
4231:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ11           LL_ADC_REG_GetSequencerRanks\n
4232:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ12           LL_ADC_REG_GetSequencerRanks\n
4233:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ13           LL_ADC_REG_GetSequencerRanks\n
4234:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ14           LL_ADC_REG_GetSequencerRanks\n
4235:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR4     SQ15           LL_ADC_REG_GetSequencerRanks\n
4236:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR4     SQ16           LL_ADC_REG_GetSequencerRanks
4237:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4238:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
4239:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_1
4240:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_2
4241:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_3
4242:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_4
4243:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_5
4244:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_6
4245:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_7
4246:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_8
4247:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_9
4248:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_10
4249:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_11
4250:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_12
4251:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_13
4252:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_14
4253:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_15
4254:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_16
4255:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4256:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
4257:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
4258:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
4259:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
4260:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
4261:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
4262:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
4263:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
4264:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
4265:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
4266:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
4267:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
4268:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
4269:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 84


4270:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
4271:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
4272:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
4273:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
4274:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
4275:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
4276:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
4277:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
4278:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
4279:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
4280:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
4281:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
4282:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
4283:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
4284:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
4285:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).\n
4286:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1, 2) For ADC channel read back from ADC register,
4287:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                comparison with internal channel parameter to be done
4288:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
4289:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4290:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank)
4291:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4292:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK
4293:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4294:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)((READ_BIT(*preg,
4295:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                               ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MA
4296:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                      >> (Rank & ADC_REG_RANK_ID_SQRX_MASK)) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS
4297:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    );
4298:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4299:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4300:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4301:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC continuous conversion mode on ADC group regular.
4302:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Description of ADC continuous conversion mode:
4303:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - single mode: one conversion per trigger
4304:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - continuous mode: after the first trigger, following
4305:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           conversions launched successively automatically.
4306:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group regular
4307:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         continuous mode and sequencer discontinuous mode.
4308:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4309:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4310:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4311:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
4312:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     CONT           LL_ADC_REG_SetContinuousMode
4313:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4314:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Continuous This parameter can be one of the following values:
4315:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_SINGLE
4316:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_CONTINUOUS
4317:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4318:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4319:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetContinuousMode(ADC_TypeDef *ADCx, uint32_t Continuous)
4320:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4321:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
4322:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4323:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4324:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4325:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC continuous conversion mode on ADC group regular.
4326:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Description of ADC continuous conversion mode:
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 85


4327:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - single mode: one conversion per trigger
4328:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - continuous mode: after the first trigger, following
4329:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           conversions launched successively automatically.
4330:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     CONT           LL_ADC_REG_GetContinuousMode
4331:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4332:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4333:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_SINGLE
4334:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_CONTINUOUS
4335:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4336:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetContinuousMode(ADC_TypeDef *ADCx)
4337:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4338:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_CONT));
4339:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4340:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4341:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC data transfer mode
4342:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Conversion data can be either:
4343:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Available in Data Register
4344:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Transferred by DMA in one shot mode
4345:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Transferred by DMA in circular mode
4346:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Transferred to DFSDM data register
4347:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     DMNGT           LL_ADC_REG_SetDataTransferMode
4348:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4349:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  DataTransferMode Select Data Management configuration
4350:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4351:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4352:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
4353:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 480              		.loc 1 4353 1
 481              		.cfi_startproc
 482              		@ args = 0, pretend = 0, frame = 8
 483              		@ frame_needed = 1, uses_anonymous_args = 0
 484              		@ link register save eliminated.
 485 0000 80B4     		push	{r7}
 486              	.LCFI48:
 487              		.cfi_def_cfa_offset 4
 488              		.cfi_offset 7, -4
 489 0002 83B0     		sub	sp, sp, #12
 490              	.LCFI49:
 491              		.cfi_def_cfa_offset 16
 492 0004 00AF     		add	r7, sp, #0
 493              	.LCFI50:
 494              		.cfi_def_cfa_register 7
 495 0006 7860     		str	r0, [r7, #4]
 496 0008 3960     		str	r1, [r7]
4354:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 497              		.loc 1 4354 3
 498 000a 7B68     		ldr	r3, [r7, #4]
 499 000c DB68     		ldr	r3, [r3, #12]
 500 000e 23F00302 		bic	r2, r3, #3
 501 0012 3B68     		ldr	r3, [r7]
 502 0014 1A43     		orrs	r2, r2, r3
 503 0016 7B68     		ldr	r3, [r7, #4]
 504 0018 DA60     		str	r2, [r3, #12]
4355:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 505              		.loc 1 4355 1
 506 001a 00BF     		nop
 507 001c 0C37     		adds	r7, r7, #12
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 86


 508              	.LCFI51:
 509              		.cfi_def_cfa_offset 4
 510 001e BD46     		mov	sp, r7
 511              	.LCFI52:
 512              		.cfi_def_cfa_register 13
 513              		@ sp needed
 514 0020 5DF8047B 		ldr	r7, [sp], #4
 515              	.LCFI53:
 516              		.cfi_restore 7
 517              		.cfi_def_cfa_offset 0
 518 0024 7047     		bx	lr
 519              		.cfi_endproc
 520              	.LFE180:
 522              		.section	.text.LL_ADC_INJ_IsTriggerSourceSWStart,"ax",%progbits
 523              		.align	1
 524              		.syntax unified
 525              		.thumb
 526              		.thumb_func
 528              	LL_ADC_INJ_IsTriggerSourceSWStart:
 529              	.LFB186:
4356:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4357:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
4358:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4359:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable DMA requests for ADC3.
4360:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
4361:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4362:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4363:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4364:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
4365:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4366:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
4367:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4368:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4369:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableDMAReq(ADC_TypeDef *ADCx)
4370:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4371:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT (ADCx->CFGR, ADC3_CFGR_DMAEN);
4372:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4373:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4374:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsEnabledDMAReq (ADC_TypeDef *ADCx)
4375:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4376:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN) == (ADC3_CFGR_DMAEN)) ? 1UL : 0UL);
4377:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4378:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4379:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group regular conversion data transfer: no transfer or
4380:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         transfer by DMA, and DMA requests mode.
4381:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If transfer by DMA selected, specifies the DMA requests
4382:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         mode:
4383:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
4384:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           when number of DMA data transfers (number of
4385:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions) is reached.
4386:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
4387:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
4388:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
4389:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions).
4390:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
4391:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
4392:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         mode non-circular:
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 87


4393:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
4394:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
4395:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *        (overrun flag and interruption if enabled).
4396:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with several ADC instances: ADC multimode DMA
4397:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         settings are available using function @ref LL_ADC_SetMultiDMATransfer().
4398:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To configure DMA source address (peripheral address),
4399:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use function @ref LL_ADC_DMA_GetRegAddr().
4400:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4401:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4402:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4403:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
4404:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransferMode\n
4405:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     DMACFG         LL_ADC_REG_SetDMATransferMode
4406:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4407:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  DMATransfer This parameter can be one of the following values:
4408:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_NONE
4409:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
4410:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
4411:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4412:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4413:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
4414:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4415:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
4416:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
4417:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
4418:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
4419:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4420:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4421:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4422:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data transfer: no transfer or
4423:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         transfer by DMA, and DMA requests mode.
4424:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If transfer by DMA selected, specifies the DMA requests
4425:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         mode:
4426:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
4427:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           when number of DMA data transfers (number of
4428:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions) is reached.
4429:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
4430:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
4431:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
4432:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions).
4433:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
4434:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
4435:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         mode non-circular:
4436:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
4437:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
4438:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (overrun flag and interruption if enabled).
4439:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with several ADC instances: ADC multimode DMA
4440:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         settings are available using function @ref LL_ADC_GetMultiDMATransfer().
4441:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To configure DMA source address (peripheral address),
4442:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use function @ref LL_ADC_DMA_GetRegAddr().
4443:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     DMAEN          LL_ADC_REG_GetDMATransfer\n
4444:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     DMACFG         LL_ADC_REG_GetDMATransfer
4445:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4446:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4447:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_NONE
4448:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
4449:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 88


4450:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4451:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransferMode(ADC_TypeDef *ADCx)
4452:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4453:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
4454:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
4455:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t)(READ_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG));
4456:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
4457:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    else
4458:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   { 
4459:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return 0UL;
4460:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
4461:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4462:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4463:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
4464:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4465:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4466:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC data transfer mode
4467:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Conversion data can be either:
4468:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Available in Data Register
4469:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Transferred by DMA in one shot mode
4470:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Transferred by DMA in circular mode
4471:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Transferred to DFSDM data register
4472:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     DMNGT           LL_ADC_REG_GetDataTransferMode
4473:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4474:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4475:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DR_TRANSFER
4476:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
4477:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
4478:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DFSDM_TRANSFER
4479:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4480:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetDataTransferMode(ADC_TypeDef *ADCx)
4481:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4482:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMNGT));
4483:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4484:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4485:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4486:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4487:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group regular behavior in case of overrun:
4488:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         data preserved or overwritten.
4489:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Compatibility with devices without feature overrun:
4490:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         other devices without this feature have a behavior
4491:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         equivalent to data overwritten.
4492:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         The default setting of overrun is data preserved.
4493:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Therefore, for compatibility with all devices, parameter
4494:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         overrun should be set to data overwritten.
4495:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4496:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4497:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4498:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
4499:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     OVRMOD         LL_ADC_REG_SetOverrun
4500:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4501:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Overrun This parameter can be one of the following values:
4502:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_PRESERVED
4503:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_OVERWRITTEN
4504:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4505:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4506:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetOverrun(ADC_TypeDef *ADCx, uint32_t Overrun)
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 89


4507:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4508:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_OVRMOD, Overrun);
4509:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4510:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4511:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4512:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular behavior in case of overrun:
4513:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         data preserved or overwritten.
4514:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     OVRMOD         LL_ADC_REG_GetOverrun
4515:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4516:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4517:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_PRESERVED
4518:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_OVERWRITTEN
4519:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4520:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetOverrun(ADC_TypeDef *ADCx)
4521:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4522:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_OVRMOD));
4523:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4524:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4525:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4526:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
4527:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4528:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4529:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Group_Injected Configuration of ADC hierarchical scope: g
4530:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
4531:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4532:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4533:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4534:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group injected conversion trigger source:
4535:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal (SW start) or from external peripheral (timer event,
4536:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         external interrupt line).
4537:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting trigger source to external trigger
4538:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         also set trigger polarity to rising edge
4539:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (default setting for compatibility with some ADC on other
4540:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         STM32 families having this setting set by HW default value).
4541:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         In case of need to modify trigger edge, use
4542:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         function @ref LL_ADC_INJ_SetTriggerEdge().
4543:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer
4544:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         depends on timers availability on the selected device.
4545:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4546:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4547:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4548:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on either groups regular or injected.
4549:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JEXTSEL        LL_ADC_INJ_SetTriggerSource\n
4550:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JEXTEN         LL_ADC_INJ_SetTriggerSource
4551:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4552:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  TriggerSource This parameter can be one of the following values:
4553:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_SOFTWARE
4554:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO
4555:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_CH4
4556:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_TRGO
4557:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_CH1
4558:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH4
4559:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_TRGO
4560:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_EXTI_LINE15
4561:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH4
4562:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO2
4563:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 90


4564:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO2
4565:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH3
4566:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_TRGO
4567:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH1
4568:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM6_TRGO
4569:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM15_TRGO
4570:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG2
4571:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG4
4572:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM1_OUT
4573:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM2_OUT
4574:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM3_OUT
4575:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4576:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4577:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetTriggerSource(ADC_TypeDef *ADCx, uint32_t TriggerSource)
4578:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4579:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR, ADC_JSQR_JEXTSEL | ADC_JSQR_JEXTEN, TriggerSource);
4580:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4581:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4582:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4583:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion trigger source:
4584:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal (SW start) or from external peripheral (timer event,
4585:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         external interrupt line).
4586:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To determine whether group injected trigger source is
4587:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal (SW start) or external, without detail
4588:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of which peripheral is selected as external trigger,
4589:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (equivalent to
4590:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         "if(LL_ADC_INJ_GetTriggerSource(ADC1) == LL_ADC_INJ_TRIG_SOFTWARE)")
4591:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use function @ref LL_ADC_INJ_IsTriggerSourceSWStart.
4592:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer
4593:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         depends on timers availability on the selected device.
4594:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JEXTSEL        LL_ADC_INJ_GetTriggerSource\n
4595:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JEXTEN         LL_ADC_INJ_GetTriggerSource
4596:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4597:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4598:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_SOFTWARE
4599:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO
4600:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_CH4
4601:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_TRGO
4602:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_CH1
4603:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH4
4604:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_TRGO
4605:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_EXTI_LINE15
4606:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH4
4607:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO2
4608:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO
4609:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO2
4610:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH3
4611:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_TRGO
4612:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH1
4613:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM6_TRGO
4614:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM15_TRGO
4615:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG2
4616:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG4
4617:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM1_OUT
4618:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM2_OUT
4619:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM3_OUT
4620:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 91


4621:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetTriggerSource(ADC_TypeDef *ADCx)
4622:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4623:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t TriggerSource = READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTSEL | ADC_JSQR_JEXTEN);
4624:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4625:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Value for shift of {0; 4; 8; 12} depending on value of bitfield          */
4626:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* corresponding to ADC_JSQR_JEXTEN {0; 1; 2; 3}.                           */
4627:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t ShiftJexten = ((TriggerSource & ADC_JSQR_JEXTEN) >> (ADC_INJ_TRIG_EXTEN_BITOFFSET_POS - 
4628:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4629:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bitfield corresponding to ADC_JSQR_JEXTEN and ADC_JSQR_JEXTSEL       */
4630:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* to match with triggers literals definition.                              */
4631:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((TriggerSource
4632:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            & (ADC_INJ_TRIG_SOURCE_MASK >> ShiftJexten) & ADC_JSQR_JEXTSEL)
4633:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****           | ((ADC_INJ_TRIG_EDGE_MASK >> ShiftJexten) & ADC_JSQR_JEXTEN)
4634:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          );
4635:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4636:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4637:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4638:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion trigger source internal (SW start)
4639:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****             or external
4640:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of group injected trigger source set to external trigger,
4641:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         to determine which peripheral is selected as external trigger,
4642:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use function @ref LL_ADC_INJ_GetTriggerSource.
4643:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JEXTEN         LL_ADC_INJ_IsTriggerSourceSWStart
4644:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4645:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value "0" if trigger source external trigger
4646:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Value "1" if trigger source SW start.
4647:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4648:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
4649:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 530              		.loc 1 4649 1
 531              		.cfi_startproc
 532              		@ args = 0, pretend = 0, frame = 8
 533              		@ frame_needed = 1, uses_anonymous_args = 0
 534              		@ link register save eliminated.
 535 0000 80B4     		push	{r7}
 536              	.LCFI54:
 537              		.cfi_def_cfa_offset 4
 538              		.cfi_offset 7, -4
 539 0002 83B0     		sub	sp, sp, #12
 540              	.LCFI55:
 541              		.cfi_def_cfa_offset 16
 542 0004 00AF     		add	r7, sp, #0
 543              	.LCFI56:
 544              		.cfi_def_cfa_register 7
 545 0006 7860     		str	r0, [r7, #4]
4650:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ?
 546              		.loc 1 4650 12
 547 0008 7B68     		ldr	r3, [r7, #4]
 548 000a DB6C     		ldr	r3, [r3, #76]
 549 000c 03F4C073 		and	r3, r3, #384
 550              		.loc 1 4650 105
 551 0010 002B     		cmp	r3, #0
 552 0012 01D1     		bne	.L15
 553              		.loc 1 4650 105 is_stmt 0 discriminator 1
 554 0014 0123     		movs	r3, #1
 555 0016 00E0     		b	.L17
 556              	.L15:
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 92


 557              		.loc 1 4650 105 discriminator 2
 558 0018 0023     		movs	r3, #0
 559              	.L17:
4651:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 560              		.loc 1 4651 1 is_stmt 1 discriminator 5
 561 001a 1846     		mov	r0, r3
 562 001c 0C37     		adds	r7, r7, #12
 563              	.LCFI57:
 564              		.cfi_def_cfa_offset 4
 565 001e BD46     		mov	sp, r7
 566              	.LCFI58:
 567              		.cfi_def_cfa_register 13
 568              		@ sp needed
 569 0020 5DF8047B 		ldr	r7, [sp], #4
 570              	.LCFI59:
 571              		.cfi_restore 7
 572              		.cfi_def_cfa_offset 0
 573 0024 7047     		bx	lr
 574              		.cfi_endproc
 575              	.LFE186:
 577              		.section	.text.LL_ADC_SetChannelSamplingTime,"ax",%progbits
 578              		.align	1
 579              		.syntax unified
 580              		.thumb
 581              		.thumb_func
 583              	LL_ADC_SetChannelSamplingTime:
 584              	.LFB200:
4652:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4653:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4654:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group injected conversion trigger polarity.
4655:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Applicable only for trigger source set to external trigger.
4656:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4657:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4658:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4659:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on either groups regular or injected.
4660:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JEXTEN         LL_ADC_INJ_SetTriggerEdge
4661:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4662:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ExternalTriggerEdge This parameter can be one of the following values:
4663:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISING
4664:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_FALLING
4665:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISINGFALLING
4666:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4667:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4668:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetTriggerEdge(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
4669:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4670:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR, ADC_JSQR_JEXTEN, ExternalTriggerEdge);
4671:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4672:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4673:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4674:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion trigger polarity.
4675:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Applicable only for trigger source set to external trigger.
4676:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JEXTEN         LL_ADC_INJ_GetTriggerEdge
4677:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4678:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4679:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISING
4680:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_FALLING
4681:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISINGFALLING
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 93


4682:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4683:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetTriggerEdge(ADC_TypeDef *ADCx)
4684:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4685:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN));
4686:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4687:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4688:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4689:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group injected sequencer length and scan direction.
4690:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function performs configuration of:
4691:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Sequence length: Number of ranks in the scan sequence.
4692:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Sequence direction: Unless specified in parameters, sequencer
4693:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           scan direction is forward (from rank 1 to rank n).
4694:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
4695:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
4696:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4697:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4698:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4699:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on either groups regular or injected.
4700:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JL             LL_ADC_INJ_SetSequencerLength
4701:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4702:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SequencerNbRanks This parameter can be one of the following values:
4703:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_DISABLE
4704:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS
4705:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
4706:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
4707:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4708:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4709:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
4710:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4711:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
4712:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4713:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4714:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4715:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected sequencer length and scan direction.
4716:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function retrieves:
4717:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Sequence length: Number of ranks in the scan sequence.
4718:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Sequence direction: Unless specified in parameters, sequencer
4719:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           scan direction is forward (from rank 1 to rank n).
4720:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
4721:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
4722:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JL             LL_ADC_INJ_GetSequencerLength
4723:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4724:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4725:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_DISABLE
4726:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS
4727:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
4728:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
4729:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4730:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetSequencerLength(ADC_TypeDef *ADCx)
4731:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4732:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->JSQR, ADC_JSQR_JL));
4733:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4734:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4735:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4736:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group injected sequencer discontinuous mode:
4737:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
4738:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         number of ranks.
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 94


4739:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group injected
4740:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         auto-injected mode and sequencer discontinuous mode.
4741:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     JDISCEN        LL_ADC_INJ_SetSequencerDiscont
4742:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4743:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SeqDiscont This parameter can be one of the following values:
4744:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_DISCONT_DISABLE
4745:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_DISCONT_1RANK
4746:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4747:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4748:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetSequencerDiscont(ADC_TypeDef *ADCx, uint32_t SeqDiscont)
4749:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4750:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_JDISCEN, SeqDiscont);
4751:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4753:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4754:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected sequencer discontinuous mode:
4755:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
4756:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         number of ranks.
4757:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     JDISCEN        LL_ADC_INJ_GetSequencerDiscont
4758:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4759:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4760:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_DISCONT_DISABLE
4761:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_DISCONT_1RANK
4762:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4763:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetSequencerDiscont(ADC_TypeDef *ADCx)
4764:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4765:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JDISCEN));
4766:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4767:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4768:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4769:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group injected sequence: channel on the selected
4770:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sequence rank.
4771:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
4772:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
4773:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, to measure internal channels (VrefInt,
4774:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
4775:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         enabled separately.
4776:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
4777:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On STM32H7, some fast channels are available: fast analog inputs
4778:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         coming from GPIO pads (ADC_IN0..5).
4779:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4780:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4781:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4782:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on either groups regular or injected.
4783:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JSQ1           LL_ADC_INJ_SetSequencerRanks\n
4784:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ2           LL_ADC_INJ_SetSequencerRanks\n
4785:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ3           LL_ADC_INJ_SetSequencerRanks\n
4786:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ4           LL_ADC_INJ_SetSequencerRanks
4787:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4788:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
4789:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
4790:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
4791:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
4792:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
4793:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
4794:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
4795:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 95


4796:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
4797:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
4798:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
4799:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
4800:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
4801:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
4802:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
4803:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
4804:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
4805:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
4806:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
4807:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
4808:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
4809:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
4810:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
4811:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
4812:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
4813:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
4814:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
4815:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
4816:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
4817:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
4818:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
4819:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
4820:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
4821:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
4822:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
4823:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
4824:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4825:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4826:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channe
4827:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4828:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bits with content of parameter "Channel" with bits position          */
4829:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* in register depending on parameter "Rank".                               */
4830:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameters "Rank" and "Channel" are used with masks because containing   */
4831:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
4832:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR,
4833:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (ADC_CHANNEL_ID_NUMBER_MASK >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_INJ
4834:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Ra
4835:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4836:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4837:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4838:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected sequence: channel on the selected
4839:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sequence rank.
4840:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
4841:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
4842:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Usage of the returned channel number:
4843:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
4844:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
4845:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
4846:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
4847:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
4848:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
4849:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           as parameter for another function.
4850:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To get the channel number in decimal format:
4851:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           process the returned value with the helper macro
4852:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 96


4853:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JSQ1           LL_ADC_INJ_GetSequencerRanks\n
4854:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ2           LL_ADC_INJ_GetSequencerRanks\n
4855:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ3           LL_ADC_INJ_GetSequencerRanks\n
4856:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ4           LL_ADC_INJ_GetSequencerRanks
4857:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4858:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
4859:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
4860:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
4861:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
4862:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
4863:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4864:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
4865:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
4866:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
4867:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
4868:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
4869:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
4870:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
4871:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
4872:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
4873:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
4874:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
4875:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
4876:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
4877:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
4878:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
4879:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
4880:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
4881:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
4882:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
4883:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
4884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
4885:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
4886:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
4887:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
4888:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
4889:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
4890:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
4891:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
4892:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
4893:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).\n
4894:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1, 2) For ADC channel read back from ADC register,
4895:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                comparison with internal channel parameter to be done
4896:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
4897:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4898:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank)
4899:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4900:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)((READ_BIT(ADCx->JSQR,
4901:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                              (ADC_CHANNEL_ID_NUMBER_MASK >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) <<
4902:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                     >> (Rank & ADC_INJ_RANK_ID_JSQR_MASK)) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS
4903:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    );
4904:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4905:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4906:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4907:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group injected conversion trigger:
4908:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         independent or from ADC group regular.
4909:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This mode can be used to extend number of data registers
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 97


4910:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         updated after one ADC conversion trigger and with data
4911:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         permanently kept (not erased by successive conversions of scan of
4912:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC sequencer ranks), up to 5 data registers:
4913:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         1 data register on ADC group regular, 4 data registers
4914:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on ADC group injected.
4915:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC group injected injected trigger source is set to an
4916:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         external trigger, this feature must be must be set to
4917:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         independent trigger.
4918:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC group injected automatic trigger is compliant only with
4919:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         group injected trigger source set to SW start, without any
4920:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         further action on  ADC group injected conversion start or stop:
4921:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         in this case, ADC group injected is controlled only
4922:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         from ADC group regular.
4923:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group injected
4924:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         auto-injected mode and sequencer discontinuous mode.
4925:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4926:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4927:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4928:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
4929:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     JAUTO          LL_ADC_INJ_SetTrigAuto
4930:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4931:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  TrigAuto This parameter can be one of the following values:
4932:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_INDEPENDENT
4933:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_FROM_GRP_REGULAR
4934:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4935:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4936:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetTrigAuto(ADC_TypeDef *ADCx, uint32_t TrigAuto)
4937:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4938:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_JAUTO, TrigAuto);
4939:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4940:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4941:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4942:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion trigger:
4943:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         independent or from ADC group regular.
4944:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     JAUTO          LL_ADC_INJ_GetTrigAuto
4945:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4946:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4947:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_INDEPENDENT
4948:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_FROM_GRP_REGULAR
4949:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4950:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetTrigAuto(ADC_TypeDef *ADCx)
4951:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4952:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
4953:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4954:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4955:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4956:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group injected contexts queue mode.
4957:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   A context is a setting of group injected sequencer:
4958:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - group injected trigger
4959:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - sequencer length
4960:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - sequencer ranks
4961:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         If contexts queue is disabled:
4962:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - only 1 sequence can be configured
4963:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           and is active perpetually.
4964:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         If contexts queue is enabled:
4965:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - up to 2 contexts can be queued
4966:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           and are checked in and out as a FIFO stack (first-in, first-out).
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 98


4967:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - If a new context is set when queues is full, error is triggered
4968:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           by interruption "Injected Queue Overflow".
4969:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Two behaviors are possible when all contexts have been processed:
4970:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           the contexts queue can maintain the last context active perpetually
4971:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           or can be empty and injected group triggers are disabled.
4972:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Triggers can be only external (not internal SW start)
4973:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Caution: The sequence must be fully configured in one time
4974:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (one write of register JSQR makes a check-in of a new context
4975:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           into the queue).
4976:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Therefore functions to set separately injected trigger and
4977:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           sequencer channels cannot be used, register JSQR must be set
4978:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           using function @ref LL_ADC_INJ_ConfigQueueContext().
4979:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This parameter can be modified only when no conversion is on going
4980:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
4981:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   A modification of the context mode (bit JQDIS) causes the contexts
4982:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         queue to be flushed and the register JSQR is cleared.
4983:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4984:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4985:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4986:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
4987:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     JQM            LL_ADC_INJ_SetQueueMode\n
4988:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     JQDIS          LL_ADC_INJ_SetQueueMode
4989:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4990:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  QueueMode This parameter can be one of the following values:
4991:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_DISABLE
4992:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_2CONTEXTS_LAST_ACTIVE
4993:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY
4994:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4995:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4996:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetQueueMode(ADC_TypeDef *ADCx, uint32_t QueueMode)
4997:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4998:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
4999:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
5000:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5001:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5002:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected context queue mode.
5003:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     JQM            LL_ADC_INJ_GetQueueMode\n
5004:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     JQDIS          LL_ADC_INJ_GetQueueMode
5005:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5006:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
5007:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_DISABLE
5008:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_2CONTEXTS_LAST_ACTIVE
5009:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY
5010:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5011:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetQueueMode(ADC_TypeDef *ADCx)
5012:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5013:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS));
5014:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
5015:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5016:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5017:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set one context on ADC group injected that will be checked in
5018:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         contexts queue.
5019:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   A context is a setting of group injected sequencer:
5020:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - group injected trigger
5021:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - sequencer length
5022:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - sequencer ranks
5023:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This function is intended to be used when contexts queue is enabled,
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 99


5024:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         because the sequence must be fully configured in one time
5025:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (functions to set separately injected trigger and sequencer channels
5026:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         cannot be used):
5027:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to function @ref LL_ADC_INJ_SetQueueMode().
5028:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In the contexts queue, only the active context can be read.
5029:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         The parameters of this function can be read using functions:
5030:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_GetTriggerSource()
5031:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_GetTriggerEdge()
5032:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_GetSequencerRanks()
5033:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, to measure internal channels (VrefInt,
5034:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
5035:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         enabled separately.
5036:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
5037:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On STM32H7, some fast channels are available: fast analog inputs
5038:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         coming from GPIO pads (ADC_IN0..5).
5039:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
5040:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
5041:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
5042:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on either groups regular or injected.
5043:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JEXTSEL        LL_ADC_INJ_ConfigQueueContext\n
5044:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JEXTEN         LL_ADC_INJ_ConfigQueueContext\n
5045:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JL             LL_ADC_INJ_ConfigQueueContext\n
5046:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ1           LL_ADC_INJ_ConfigQueueContext\n
5047:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ2           LL_ADC_INJ_ConfigQueueContext\n
5048:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ3           LL_ADC_INJ_ConfigQueueContext\n
5049:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ4           LL_ADC_INJ_ConfigQueueContext
5050:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5051:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  TriggerSource This parameter can be one of the following values:
5052:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_SOFTWARE
5053:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO
5054:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_CH4
5055:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_TRGO
5056:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_CH1
5057:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH4
5058:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_TRGO
5059:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_EXTI_LINE15
5060:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH4
5061:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO2
5062:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO
5063:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO2
5064:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH3
5065:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_TRGO
5066:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH1
5067:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM6_TRGO
5068:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM15_TRGO
5069:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG2
5070:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG4
5071:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM1_OUT
5072:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM2_OUT
5073:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM3_OUT
5074:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ExternalTriggerEdge This parameter can be one of the following values:
5075:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISING
5076:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_FALLING
5077:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISINGFALLING
5078:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5079:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Note: This parameter is discarded in case of SW start:
5080:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *               parameter "TriggerSource" set to "LL_ADC_INJ_TRIG_SOFTWARE".
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 100


5081:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SequencerNbRanks This parameter can be one of the following values:
5082:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_DISABLE
5083:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS
5084:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
5085:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
5086:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank1_Channel This parameter can be one of the following values:
5087:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
5088:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
5089:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
5090:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
5091:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
5092:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
5093:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5094:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5095:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5096:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5097:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5098:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5099:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5100:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5101:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5102:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5103:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5104:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5105:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5106:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5107:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
5108:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
5109:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
5110:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
5111:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
5112:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5113:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
5114:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
5115:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
5116:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
5117:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank2_Channel This parameter can be one of the following values:
5118:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
5119:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
5120:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
5121:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
5122:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
5123:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
5124:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5125:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5126:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5127:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5128:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5129:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5130:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5131:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5132:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5133:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5134:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5135:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5136:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5137:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 101


5138:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
5139:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
5140:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
5141:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
5142:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
5143:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5144:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
5145:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
5146:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
5147:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
5148:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank3_Channel This parameter can be one of the following values:
5149:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
5150:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
5151:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
5152:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
5153:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
5154:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
5155:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5156:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5157:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5158:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5159:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5160:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5161:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5162:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5163:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5164:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5165:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5166:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5167:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5168:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5169:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
5170:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
5171:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
5172:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
5173:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
5174:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5175:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
5176:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
5177:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
5178:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
5179:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank4_Channel This parameter can be one of the following values:
5180:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
5181:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
5182:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
5183:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
5184:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
5185:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
5186:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5187:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5188:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5189:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5190:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5191:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5192:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5193:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5194:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 102


5195:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5196:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5197:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5198:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5199:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5200:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
5201:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
5202:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
5203:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
5204:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
5205:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5206:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
5207:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
5208:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
5209:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
5210:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
5211:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5212:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_ConfigQueueContext(ADC_TypeDef *ADCx,
5213:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    uint32_t TriggerSource,
5214:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    uint32_t ExternalTriggerEdge,
5215:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    uint32_t SequencerNbRanks,
5216:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    uint32_t Rank1_Channel,
5217:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    uint32_t Rank2_Channel,
5218:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    uint32_t Rank3_Channel,
5219:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    uint32_t Rank4_Channel)
5220:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5221:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bits with content of parameter "Rankx_Channel" with bits position    */
5222:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* in register depending on literal "LL_ADC_INJ_RANK_x".                    */
5223:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameters "Rankx_Channel" and "LL_ADC_INJ_RANK_x" are used with masks   */
5224:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* because containing other bits reserved for other purpose.                */
5225:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* If parameter "TriggerSource" is set to SW start, then parameter          */
5226:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* "ExternalTriggerEdge" is discarded.                                      */
5227:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t is_trigger_not_sw = (uint32_t)((TriggerSource != LL_ADC_INJ_TRIG_SOFTWARE) ? 1UL : 0UL);
5228:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR,
5229:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_JSQR_JEXTSEL |
5230:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_JSQR_JEXTEN  |
5231:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_JSQR_JSQ4    |
5232:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_JSQR_JSQ3    |
5233:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_JSQR_JSQ2    |
5234:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_JSQR_JSQ1    |
5235:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_JSQR_JL,
5236:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (TriggerSource & ADC_JSQR_JEXTSEL)        |
5237:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (ExternalTriggerEdge * (is_trigger_not_sw)) |
5238:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (((Rank4_Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
5239:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (((Rank3_Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
5240:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (((Rank2_Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
5241:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (((Rank1_Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
5242:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              SequencerNbRanks
5243:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****             );
5244:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
5245:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5246:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5247:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
5248:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5249:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5250:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_Channels Configuration of ADC hierarchical scope: channels
5251:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 103


5252:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5253:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5254:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5255:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set sampling time of the selected ADC channel
5256:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Unit: ADC clock cycles.
5257:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this device, sampling time is on channel scope: independently
5258:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of channel mapped on ADC group regular or injected.
5259:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of internal channel (VrefInt, TempSensor, ...) to be
5260:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         converted:
5261:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sampling time constraints must be respected (sampling time can be
5262:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         adjusted in function of ADC clock frequency and sampling time
5263:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         setting).
5264:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet for timings values (parameters TS_vrefint,
5265:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TS_temp, ...).
5266:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Conversion time is the addition of sampling time and processing time.
5267:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         On this STM32 series, ADC processing time is:
5268:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 12.5 ADC clock cycles at ADC resolution 12 bits
5269:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 10.5 ADC clock cycles at ADC resolution 10 bits
5270:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 8.5 ADC clock cycles at ADC resolution 8 bits
5271:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 6.5 ADC clock cycles at ADC resolution 6 bits
5272:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of ADC conversion of internal channel (VrefInt,
5273:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         temperature sensor, ...), a sampling time minimum value
5274:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is required.
5275:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet.
5276:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
5277:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
5278:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
5279:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
5280:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll SMPR1    SMP0           LL_ADC_SetChannelSamplingTime\n
5281:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP1           LL_ADC_SetChannelSamplingTime\n
5282:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP2           LL_ADC_SetChannelSamplingTime\n
5283:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP3           LL_ADC_SetChannelSamplingTime\n
5284:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP4           LL_ADC_SetChannelSamplingTime\n
5285:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP5           LL_ADC_SetChannelSamplingTime\n
5286:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP6           LL_ADC_SetChannelSamplingTime\n
5287:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP7           LL_ADC_SetChannelSamplingTime\n
5288:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP8           LL_ADC_SetChannelSamplingTime\n
5289:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP9           LL_ADC_SetChannelSamplingTime\n
5290:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP10          LL_ADC_SetChannelSamplingTime\n
5291:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP11          LL_ADC_SetChannelSamplingTime\n
5292:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP12          LL_ADC_SetChannelSamplingTime\n
5293:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP13          LL_ADC_SetChannelSamplingTime\n
5294:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP14          LL_ADC_SetChannelSamplingTime\n
5295:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP15          LL_ADC_SetChannelSamplingTime\n
5296:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP16          LL_ADC_SetChannelSamplingTime\n
5297:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP17          LL_ADC_SetChannelSamplingTime\n
5298:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP18          LL_ADC_SetChannelSamplingTime
5299:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5300:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
5301:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
5302:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
5303:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
5304:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
5305:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
5306:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
5307:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5308:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 104


5309:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5310:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5311:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5312:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5313:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5314:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5315:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5316:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5317:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5318:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5319:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5320:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5321:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
5322:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
5323:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
5324:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
5325:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
5326:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5327:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
5328:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
5329:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
5330:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
5331:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SamplingTime This parameter can be one of the following values:
5332:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_1CYCLE_5
5333:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_2CYCLES_5
5334:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_8CYCLES_5
5335:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_16CYCLES_5
5336:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_32CYCLES_5
5337:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_64CYCLES_5
5338:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
5339:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
5340:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
5341:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5342:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t Sa
5343:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 585              		.loc 1 5343 1
 586              		.cfi_startproc
 587              		@ args = 0, pretend = 0, frame = 24
 588              		@ frame_needed = 1, uses_anonymous_args = 0
 589              		@ link register save eliminated.
 590 0000 80B4     		push	{r7}
 591              	.LCFI60:
 592              		.cfi_def_cfa_offset 4
 593              		.cfi_offset 7, -4
 594 0002 87B0     		sub	sp, sp, #28
 595              	.LCFI61:
 596              		.cfi_def_cfa_offset 32
 597 0004 00AF     		add	r7, sp, #0
 598              	.LCFI62:
 599              		.cfi_def_cfa_register 7
 600 0006 F860     		str	r0, [r7, #12]
 601 0008 B960     		str	r1, [r7, #8]
 602 000a 7A60     		str	r2, [r7, #4]
5344:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bits with content of parameter "SamplingTime" with bits position     */
5345:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* in register and register position depending on parameter "Channel".      */
5346:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameter "Channel" is used with masks because containing                */
5347:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 105


5348:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_M
 603              		.loc 1 5348 25
 604 000c FB68     		ldr	r3, [r7, #12]
 605 000e 1433     		adds	r3, r3, #20
 606 0010 1A46     		mov	r2, r3
 607 0012 BB68     		ldr	r3, [r7, #8]
 608 0014 5B0E     		lsrs	r3, r3, #25
 609 0016 9B00     		lsls	r3, r3, #2
 610 0018 03F00403 		and	r3, r3, #4
 611 001c 1344     		add	r3, r3, r2
 612              		.loc 1 5348 18
 613 001e 7B61     		str	r3, [r7, #20]
5349:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5350:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(*preg,
 614              		.loc 1 5350 3
 615 0020 7B69     		ldr	r3, [r7, #20]
 616 0022 1A68     		ldr	r2, [r3]
 617 0024 BB68     		ldr	r3, [r7, #8]
 618 0026 1B0D     		lsrs	r3, r3, #20
 619 0028 03F01F03 		and	r3, r3, #31
 620 002c 0721     		movs	r1, #7
 621 002e 01FA03F3 		lsl	r3, r1, r3
 622 0032 DB43     		mvns	r3, r3
 623 0034 1A40     		ands	r2, r2, r3
 624 0036 BB68     		ldr	r3, [r7, #8]
 625 0038 1B0D     		lsrs	r3, r3, #20
 626 003a 03F01F03 		and	r3, r3, #31
 627 003e 7968     		ldr	r1, [r7, #4]
 628 0040 01FA03F3 		lsl	r3, r1, r3
 629 0044 1A43     		orrs	r2, r2, r3
 630 0046 7B69     		ldr	r3, [r7, #20]
 631 0048 1A60     		str	r2, [r3]
5351:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BIT
5352:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BIT
5353:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 632              		.loc 1 5353 1
 633 004a 00BF     		nop
 634 004c 1C37     		adds	r7, r7, #28
 635              	.LCFI63:
 636              		.cfi_def_cfa_offset 4
 637 004e BD46     		mov	sp, r7
 638              	.LCFI64:
 639              		.cfi_def_cfa_register 13
 640              		@ sp needed
 641 0050 5DF8047B 		ldr	r7, [sp], #4
 642              	.LCFI65:
 643              		.cfi_restore 7
 644              		.cfi_def_cfa_offset 0
 645 0054 7047     		bx	lr
 646              		.cfi_endproc
 647              	.LFE200:
 649              		.section	.text.LL_ADC_SetChannelSingleDiff,"ax",%progbits
 650              		.align	1
 651              		.syntax unified
 652              		.thumb
 653              		.thumb_func
 655              	LL_ADC_SetChannelSingleDiff:
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 106


 656              	.LFB202:
5354:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5355:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5356:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get sampling time of the selected ADC channel
5357:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Unit: ADC clock cycles.
5358:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this device, sampling time is on channel scope: independently
5359:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of channel mapped on ADC group regular or injected.
5360:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Conversion time is the addition of sampling time and processing time.
5361:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         On this STM32 series, ADC processing time is:
5362:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 12.5 ADC clock cycles at ADC resolution 12 bits
5363:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 10.5 ADC clock cycles at ADC resolution 10 bits
5364:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 8.5 ADC clock cycles at ADC resolution 8 bits
5365:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 6.5 ADC clock cycles at ADC resolution 6 bits
5366:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll SMPR1    SMP0           LL_ADC_GetChannelSamplingTime\n
5367:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP1           LL_ADC_GetChannelSamplingTime\n
5368:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP2           LL_ADC_GetChannelSamplingTime\n
5369:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP3           LL_ADC_GetChannelSamplingTime\n
5370:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP4           LL_ADC_GetChannelSamplingTime\n
5371:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP5           LL_ADC_GetChannelSamplingTime\n
5372:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP6           LL_ADC_GetChannelSamplingTime\n
5373:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP7           LL_ADC_GetChannelSamplingTime\n
5374:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP8           LL_ADC_GetChannelSamplingTime\n
5375:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP9           LL_ADC_GetChannelSamplingTime\n
5376:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP10          LL_ADC_GetChannelSamplingTime\n
5377:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP11          LL_ADC_GetChannelSamplingTime\n
5378:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP12          LL_ADC_GetChannelSamplingTime\n
5379:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP13          LL_ADC_GetChannelSamplingTime\n
5380:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP14          LL_ADC_GetChannelSamplingTime\n
5381:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP15          LL_ADC_GetChannelSamplingTime\n
5382:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP16          LL_ADC_GetChannelSamplingTime\n
5383:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP17          LL_ADC_GetChannelSamplingTime\n
5384:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP18          LL_ADC_GetChannelSamplingTime
5385:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5386:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
5387:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
5388:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
5389:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
5390:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
5391:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
5392:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
5393:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5394:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5395:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5396:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5397:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5398:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5399:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5400:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5401:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5402:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5403:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5404:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5405:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5406:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5407:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
5408:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
5409:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 107


5410:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
5411:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
5412:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5413:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
5414:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
5415:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
5416:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
5417:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
5418:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_1CYCLE_5
5419:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_2CYCLES_5
5420:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_8CYCLES_5
5421:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_16CYCLES_5
5422:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_32CYCLES_5
5423:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_64CYCLES_5
5424:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
5425:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
5426:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5427:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel)
5428:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5429:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOF
5430:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5431:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(*preg,
5432:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                              ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_
5433:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                     >> ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_P
5434:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    );
5435:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
5436:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5437:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5438:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set mode single-ended or differential input of the selected
5439:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC channel.
5440:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Channel ending is on channel scope: independently of channel mapped
5441:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on ADC group regular or injected.
5442:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         In differential mode: Differential measurement is carried out
5443:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         between the selected channel 'i' (positive input) and
5444:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         channel 'i+1' (negative input). Only channel 'i' has to be
5445:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         configured, channel 'i+1' is configured automatically.
5446:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Refer to Reference Manual to ensure the selected channel is
5447:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         available in differential mode.
5448:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         For example, internal channels (VrefInt, TempSensor, ...) are
5449:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         not available in differential mode.
5450:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   When configuring a channel 'i' in differential mode,
5451:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         the channel 'i+1' is not usable separately.
5452:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On STM32H7, some channels are internally fixed to single-ended inputs
5453:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         configuration:
5454:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC1: Channels 0, 6, 7, 8, 9, 13, 14, 15, 17, and 19
5455:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC2: Channels 0, 6, 7, 8, 9, 13, 14, 15 and 19
5456:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC3: Channels 0, 6, 7, 8, 9, 12, 16, 17, and 19
5457:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For ADC channels configured in differential mode, both inputs
5458:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         should be biased at (Vref+)/2 +/-200mV.
5459:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (Vref+ is the analog voltage reference)
5460:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
5461:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
5462:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be ADC disabled.
5463:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   One or several values can be selected.
5464:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example: (LL_ADC_CHANNEL_4 | LL_ADC_CHANNEL_12 | ...)
5465:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DIFSEL   DIFSEL         LL_ADC_SetChannelSingleDiff
5466:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 108


5467:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
5468:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
5469:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
5470:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
5471:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
5472:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
5473:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5474:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5475:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5476:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5477:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5478:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5479:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5480:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5481:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5482:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5483:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SingleDiff This parameter can be a combination of the following values:
5484:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SINGLE_ENDED
5485:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
5486:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
5487:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5488:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t Sing
5489:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 657              		.loc 1 5489 1
 658              		.cfi_startproc
 659              		@ args = 0, pretend = 0, frame = 16
 660              		@ frame_needed = 1, uses_anonymous_args = 0
 661              		@ link register save eliminated.
 662 0000 80B4     		push	{r7}
 663              	.LCFI66:
 664              		.cfi_def_cfa_offset 4
 665              		.cfi_offset 7, -4
 666 0002 85B0     		sub	sp, sp, #20
 667              	.LCFI67:
 668              		.cfi_def_cfa_offset 24
 669 0004 00AF     		add	r7, sp, #0
 670              	.LCFI68:
 671              		.cfi_def_cfa_register 7
 672 0006 F860     		str	r0, [r7, #12]
 673 0008 B960     		str	r1, [r7, #8]
 674 000a 7A60     		str	r2, [r7, #4]
5490:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
5491:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Bits of channels in single or differential mode are set only for         */
5492:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* differential mode (for single mode, mask of bits allowed to be set is    */
5493:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* shifted out of range of bits of channels in single or differential mode. */
5494:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
5495:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
5496:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->LTR2_DIFSEL,
5497:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
5498:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SI
5499:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
5500:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
5501:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
5502:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->DIFSEL_RES12,
5503:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
5504:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SI
5505:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 109


5506:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else  /* ADC_VER_V5_V90 */
5507:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Bits of channels in single or differential mode are set only for         */
5508:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* differential mode (for single mode, mask of bits allowed to be set is    */
5509:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* shifted out of range of bits of channels in single or differential mode. */
5510:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->DIFSEL,
 675              		.loc 1 5510 3
 676 000c FB68     		ldr	r3, [r7, #12]
 677 000e D3F8C020 		ldr	r2, [r3, #192]
 678 0012 BB68     		ldr	r3, [r7, #8]
 679 0014 C3F31303 		ubfx	r3, r3, #0, #20
 680 0018 DB43     		mvns	r3, r3
 681 001a 1A40     		ands	r2, r2, r3
 682 001c 7B68     		ldr	r3, [r7, #4]
 683 001e 03F01803 		and	r3, r3, #24
 684 0022 0849     		ldr	r1, .L20
 685 0024 D940     		lsrs	r1, r1, r3
 686 0026 BB68     		ldr	r3, [r7, #8]
 687 0028 0B40     		ands	r3, r3, r1
 688 002a C3F31303 		ubfx	r3, r3, #0, #20
 689 002e 1A43     		orrs	r2, r2, r3
 690 0030 FB68     		ldr	r3, [r7, #12]
 691 0032 C3F8C020 		str	r2, [r3, #192]
5511:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
5512:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SING
5513:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
5514:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 692              		.loc 1 5514 1
 693 0036 00BF     		nop
 694 0038 1437     		adds	r7, r7, #20
 695              	.LCFI69:
 696              		.cfi_def_cfa_offset 4
 697 003a BD46     		mov	sp, r7
 698              	.LCFI70:
 699              		.cfi_def_cfa_register 13
 700              		@ sp needed
 701 003c 5DF8047B 		ldr	r7, [sp], #4
 702              	.LCFI71:
 703              		.cfi_restore 7
 704              		.cfi_def_cfa_offset 0
 705 0040 7047     		bx	lr
 706              	.L21:
 707 0042 00BF     		.align	2
 708              	.L20:
 709 0044 FFFF0F00 		.word	1048575
 710              		.cfi_endproc
 711              	.LFE202:
 713              		.section	.text.LL_ADC_SetAnalogWDMonitChannels,"ax",%progbits
 714              		.align	1
 715              		.syntax unified
 716              		.thumb
 717              		.thumb_func
 719              	LL_ADC_SetAnalogWDMonitChannels:
 720              	.LFB204:
5515:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5516:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5517:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get mode single-ended or differential input of the selected
5518:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC channel.
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 110


5519:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   When configuring a channel 'i' in differential mode,
5520:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         the channel 'i+1' is not usable separately.
5521:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Therefore, to ensure a channel is configured in single-ended mode,
5522:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         the configuration of channel itself and the channel 'i-1' must be
5523:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         read back (to ensure that the selected channel channel has not been
5524:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         configured in differential mode by the previous channel).
5525:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Refer to Reference Manual to ensure the selected channel is
5526:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         available in differential mode.
5527:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         For example, internal channels (VrefInt, TempSensor, ...) are
5528:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         not available in differential mode.
5529:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   When configuring a channel 'i' in differential mode,
5530:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         the channel 'i+1' is not usable separately.
5531:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On STM32H7, some channels are internally fixed to single-ended inputs
5532:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         configuration:
5533:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC1: Channels 0, 6, 7, 8, 9, 13, 14, 15, 17, and 19
5534:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC2: Channels 0, 6, 7, 8, 9, 13, 14, 15 and 19
5535:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC3: Channels 0, 6, 7, 8, 9, 12, 16, 17, and 19
5536:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   One or several values can be selected. In this case, the value
5537:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         returned is null if all channels are in single ended-mode.
5538:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example: (LL_ADC_CHANNEL_4 | LL_ADC_CHANNEL_12 | ...)
5539:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DIFSEL   DIFSEL         LL_ADC_GetChannelSingleDiff
5540:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5541:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be a combination of the following values:
5542:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
5543:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
5544:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
5545:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
5546:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
5547:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5548:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5549:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5550:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5551:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5552:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5553:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5554:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5555:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5556:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5557:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: channel in single-ended mode, else: channel in differential mode
5558:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5559:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel)
5560:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5561:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)  
5562:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->DIFSEL_RES12, (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)));
5563:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else  
5564:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->DIFSEL, (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)));
5565:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
5566:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
5567:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5568:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5569:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
5570:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5571:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5572:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_AnalogWatchdog Configuration of ADC transversal scope: an
5573:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
5574:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5575:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 111


5576:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5577:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC analog watchdog monitored channels:
5578:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a single channel, multiple channels or all channels,
5579:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on ADC groups regular and-or injected.
5580:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Once monitored channels are selected, analog watchdog
5581:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is enabled.
5582:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of need to define a single channel to monitor
5583:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         with analog watchdog from sequencer channel definition,
5584:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use helper macro @ref __LL_ADC_ANALOGWD_CHANNEL_GROUP().
5585:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, there are 2 kinds of analog watchdog
5586:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         instance:
5587:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
5588:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
5589:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: ADC groups regular and-or injected.
5590:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
5591:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC resolution configured).
5592:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
5593:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
5594:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
5595:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
5596:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             be selected. For example:
5597:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
5598:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
5599:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             groups regular and injected).
5600:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
5601:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
5602:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
5603:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is limited to 8 bits: if ADC resolution is
5604:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             12 bits the 4 LSB are ignored, if ADC resolution is 10 bits
5605:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             the 2 LSB are ignored.
5606:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
5607:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
5608:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
5609:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
5610:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     AWD1CH         LL_ADC_SetAnalogWDMonitChannels\n
5611:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     AWD1SGL        LL_ADC_SetAnalogWDMonitChannels\n
5612:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     AWD1EN         LL_ADC_SetAnalogWDMonitChannels\n
5613:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     JAWD1EN        LL_ADC_SetAnalogWDMonitChannels\n
5614:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         AWD2CR   AWD2CH         LL_ADC_SetAnalogWDMonitChannels\n
5615:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         AWD3CR   AWD3CH         LL_ADC_SetAnalogWDMonitChannels
5616:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5617:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5618:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5619:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
5620:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
5621:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDChannelGroup This parameter can be one of the following values:
5622:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_DISABLE
5623:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG        (0)
5624:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_INJ        (0)
5625:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG_INJ
5626:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG           (0)
5627:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_INJ           (0)
5628:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG_INJ
5629:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG           (0)
5630:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_INJ           (0)
5631:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG_INJ
5632:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG           (0)
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 112


5633:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_INJ           (0)
5634:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG_INJ
5635:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG           (0)
5636:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_INJ           (0)
5637:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG_INJ
5638:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG           (0)
5639:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_INJ           (0)
5640:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG_INJ
5641:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG           (0)
5642:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_INJ           (0)
5643:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG_INJ
5644:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG           (0)
5645:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_INJ           (0)
5646:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG_INJ
5647:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG           (0)
5648:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_INJ           (0)
5649:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG_INJ
5650:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG           (0)
5651:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_INJ           (0)
5652:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG_INJ
5653:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG           (0)
5654:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_INJ           (0)
5655:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG_INJ
5656:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG          (0)
5657:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_INJ          (0)
5658:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG_INJ
5659:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG          (0)
5660:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_INJ          (0)
5661:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG_INJ
5662:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG          (0)
5663:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_INJ          (0)
5664:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG_INJ
5665:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG          (0)
5666:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_INJ          (0)
5667:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG_INJ
5668:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG          (0)
5669:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_INJ          (0)
5670:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG_INJ
5671:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG          (0)
5672:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_INJ          (0)
5673:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG_INJ
5674:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG          (0)
5675:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_INJ          (0)
5676:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG_INJ
5677:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG          (0)
5678:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_INJ          (0)
5679:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG_INJ
5680:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG          (0)
5681:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_INJ          (0)
5682:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG_INJ
5683:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_REG          (0)
5684:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_INJ          (0)
5685:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_REG_INJ
5686:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG          (0)(1)
5687:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_INJ          (0)(1)
5688:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG_INJ         (1)
5689:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG       (0)(1)
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 113


5690:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_INJ       (0)(1)
5691:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG_INJ      (1)
5692:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG             (0)(1)
5693:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_INJ             (0)(1)
5694:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG_INJ            (1)
5695:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH1_ADC2_REG     (0)(2)
5696:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH1_ADC2_INJ     (0)(2)
5697:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH1_ADC2_REG_INJ    (2)
5698:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH2_ADC2_REG     (0)(2)
5699:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH2_ADC2_INJ     (0)(2)
5700:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH2_ADC2_REG_INJ    (2)
5701:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5702:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (0) On STM32H7, parameter available only on analog watchdog number: AWD1.\n
5703:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
5704:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.
5705:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
5706:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5707:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWD
5708:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 721              		.loc 1 5708 1
 722              		.cfi_startproc
 723              		@ args = 0, pretend = 0, frame = 24
 724              		@ frame_needed = 1, uses_anonymous_args = 0
 725              		@ link register save eliminated.
 726 0000 80B4     		push	{r7}
 727              	.LCFI72:
 728              		.cfi_def_cfa_offset 4
 729              		.cfi_offset 7, -4
 730 0002 87B0     		sub	sp, sp, #28
 731              	.LCFI73:
 732              		.cfi_def_cfa_offset 32
 733 0004 00AF     		add	r7, sp, #0
 734              	.LCFI74:
 735              		.cfi_def_cfa_register 7
 736 0006 F860     		str	r0, [r7, #12]
 737 0008 B960     		str	r1, [r7, #8]
 738 000a 7A60     		str	r2, [r7, #4]
5709:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
5710:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* in register and register position depending on parameter "AWDy".         */
5711:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
5712:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
5713:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> AD
 739              		.loc 1 5713 25
 740 000c FB68     		ldr	r3, [r7, #12]
 741 000e 0C33     		adds	r3, r3, #12
 742 0010 1846     		mov	r0, r3
 743 0012 BB68     		ldr	r3, [r7, #8]
 744 0014 1B0D     		lsrs	r3, r3, #20
 745 0016 03F00301 		and	r1, r3, #3
 746 001a BB68     		ldr	r3, [r7, #8]
 747 001c 03F00102 		and	r2, r3, #1
 748 0020 1346     		mov	r3, r2
 749 0022 DB00     		lsls	r3, r3, #3
 750 0024 1344     		add	r3, r3, r2
 751 0026 9B00     		lsls	r3, r3, #2
 752 0028 0B44     		add	r3, r3, r1
 753 002a 9B00     		lsls	r3, r3, #2
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 114


 754 002c 0344     		add	r3, r3, r0
 755              		.loc 1 5713 18
 756 002e 7B61     		str	r3, [r7, #20]
5714:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                       + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * 
5715:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5716:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(*preg,
 757              		.loc 1 5716 3
 758 0030 7B69     		ldr	r3, [r7, #20]
 759 0032 1A68     		ldr	r2, [r3]
 760 0034 B968     		ldr	r1, [r7, #8]
 761 0036 084B     		ldr	r3, .L23
 762 0038 0B40     		ands	r3, r3, r1
 763 003a DB43     		mvns	r3, r3
 764 003c 1A40     		ands	r2, r2, r3
 765 003e 7968     		ldr	r1, [r7, #4]
 766 0040 BB68     		ldr	r3, [r7, #8]
 767 0042 0B40     		ands	r3, r3, r1
 768 0044 1A43     		orrs	r2, r2, r3
 769 0046 7B69     		ldr	r3, [r7, #20]
 770 0048 1A60     		str	r2, [r3]
5717:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
5718:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              AWDChannelGroup & AWDy);
5719:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 771              		.loc 1 5719 1
 772 004a 00BF     		nop
 773 004c 1C37     		adds	r7, r7, #28
 774              	.LCFI75:
 775              		.cfi_def_cfa_offset 4
 776 004e BD46     		mov	sp, r7
 777              	.LCFI76:
 778              		.cfi_def_cfa_register 13
 779              		@ sp needed
 780 0050 5DF8047B 		ldr	r7, [sp], #4
 781              	.LCFI77:
 782              		.cfi_restore 7
 783              		.cfi_def_cfa_offset 0
 784 0054 7047     		bx	lr
 785              	.L24:
 786 0056 00BF     		.align	2
 787              	.L23:
 788 0058 FFFFCF7D 		.word	2110783487
 789              		.cfi_endproc
 790              	.LFE204:
 792              		.section	.text.LL_ADC_GetMultimode,"ax",%progbits
 793              		.align	1
 794              		.syntax unified
 795              		.thumb
 796              		.thumb_func
 798              	LL_ADC_GetMultimode:
 799              	.LFB218:
5720:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5721:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5722:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC analog watchdog monitored channel.
5723:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Usage of the returned channel number:
5724:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
5725:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
5726:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 115


5727:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
5728:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
5729:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
5730:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           as parameter for another function.
5731:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To get the channel number in decimal format:
5732:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           process the returned value with the helper macro
5733:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
5734:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Applicable only when the analog watchdog is set to monitor
5735:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           one channel.
5736:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, there are 2 kinds of analog watchdog
5737:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         instance:
5738:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
5739:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
5740:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: ADC groups regular and-or injected.
5741:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
5742:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC resolution configured).
5743:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
5744:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
5745:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
5746:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
5747:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             be selected. For example:
5748:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
5749:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
5750:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             groups regular and injected).
5751:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
5752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
5753:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
5754:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is limited to 8 bits: if ADC resolution is
5755:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             12 bits the 4 LSB are ignored, if ADC resolution is 10 bits
5756:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             the 2 LSB are ignored.
5757:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
5758:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
5759:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
5760:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
5761:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     AWD1CH         LL_ADC_GetAnalogWDMonitChannels\n
5762:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     AWD1SGL        LL_ADC_GetAnalogWDMonitChannels\n
5763:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     AWD1EN         LL_ADC_GetAnalogWDMonitChannels\n
5764:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     JAWD1EN        LL_ADC_GetAnalogWDMonitChannels\n
5765:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         AWD2CR   AWD2CH         LL_ADC_GetAnalogWDMonitChannels\n
5766:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         AWD3CR   AWD3CH         LL_ADC_GetAnalogWDMonitChannels
5767:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5768:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5769:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5770:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2 (1)
5771:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3 (1)
5772:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5773:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On this AWD number, monitored channel can be retrieved
5774:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             if only 1 channel is programmed (or none or all channels).
5775:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             This function cannot retrieve monitored channel if
5776:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             multiple channels are programmed simultaneously
5777:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             by bitfield.
5778:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
5779:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_DISABLE
5780:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG        (0)
5781:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_INJ        (0)
5782:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG_INJ
5783:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG           (0)
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 116


5784:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_INJ           (0)
5785:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG_INJ
5786:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG           (0)
5787:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_INJ           (0)
5788:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG_INJ
5789:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG           (0)
5790:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_INJ           (0)
5791:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG_INJ
5792:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG           (0)
5793:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_INJ           (0)
5794:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG_INJ
5795:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG           (0)
5796:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_INJ           (0)
5797:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG_INJ
5798:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG           (0)
5799:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_INJ           (0)
5800:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG_INJ
5801:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG           (0)
5802:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_INJ           (0)
5803:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG_INJ
5804:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG           (0)
5805:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_INJ           (0)
5806:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG_INJ
5807:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG           (0)
5808:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_INJ           (0)
5809:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG_INJ
5810:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG           (0)
5811:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_INJ           (0)
5812:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG_INJ
5813:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG          (0)
5814:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_INJ          (0)
5815:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG_INJ
5816:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG          (0)
5817:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_INJ          (0)
5818:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG_INJ
5819:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG          (0)
5820:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_INJ          (0)
5821:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG_INJ
5822:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG          (0)
5823:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_INJ          (0)
5824:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG_INJ
5825:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG          (0)
5826:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_INJ          (0)
5827:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG_INJ
5828:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG          (0)
5829:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_INJ          (0)
5830:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG_INJ
5831:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG          (0)
5832:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_INJ          (0)
5833:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG_INJ
5834:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG          (0)
5835:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_INJ          (0)
5836:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG_INJ
5837:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG          (0)
5838:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_INJ          (0)
5839:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG_INJ
5840:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_REG          (0)
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 117


5841:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_INJ          (0)
5842:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_REG_INJ
5843:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5844:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (0) On STM32H7, parameter available only on analog watchdog number: AWD1.
5845:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5846:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy)
5847:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5848:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK)
5849:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MA
5850:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5851:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t AnalogWDMonitChannels = (READ_BIT(*preg, AWDy) & AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK);
5852:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5853:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* If "AnalogWDMonitChannels" == 0, then the selected AWD is disabled       */
5854:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* (parameter value LL_ADC_AWD_DISABLE).                                    */
5855:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Else, the selected AWD is enabled and is monitoring a group of channels  */
5856:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* or a single channel.                                                     */
5857:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (AnalogWDMonitChannels != 0UL)
5858:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
5859:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     if (AWDy == LL_ADC_AWD1)
5860:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
5861:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       if ((AnalogWDMonitChannels & ADC_CFGR_AWD1SGL) == 0UL)
5862:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       {
5863:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         /* AWD monitoring a group of channels */
5864:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         AnalogWDMonitChannels = ((AnalogWDMonitChannels
5865:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                   | (ADC_AWD_CR23_CHANNEL_MASK)
5866:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                  )
5867:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                  & (~(ADC_CFGR_AWD1CH))
5868:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                 );
5869:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       }
5870:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       else
5871:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       {
5872:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         /* AWD monitoring a single channel */
5873:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         AnalogWDMonitChannels = (AnalogWDMonitChannels
5874:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                  | (ADC_AWD2CR_AWD2CH_0 << (AnalogWDMonitChannels >> ADC_CFGR_AWD1C
5875:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                 );
5876:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       }
5877:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
5878:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     else
5879:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
5880:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       if ((AnalogWDMonitChannels & ADC_AWD_CR23_CHANNEL_MASK) == ADC_AWD_CR23_CHANNEL_MASK)
5881:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       {
5882:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         /* AWD monitoring a group of channels */
5883:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         AnalogWDMonitChannels = (ADC_AWD_CR23_CHANNEL_MASK
5884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                  | ((ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN))
5885:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                 );
5886:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       }
5887:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       else
5888:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       {
5889:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         /* AWD monitoring a single channel */
5890:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         /* AWD monitoring a group of channels */
5891:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         AnalogWDMonitChannels = (AnalogWDMonitChannels
5892:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                  | (ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
5893:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                  | (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDMonitChannels) << ADC_CF
5894:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                 );
5895:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       }
5896:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
5897:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 118


5898:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5899:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return AnalogWDMonitChannels;
5900:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
5901:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5902:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5903:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC analog watchdog threshold value of threshold
5904:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         high or low.
5905:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of ADC resolution different of 12 bits,
5906:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         analog watchdog thresholds data require a specific shift.
5907:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Use helper macro @ref __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION().
5908:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, there are 2 kinds of analog watchdog
5909:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         instance:
5910:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
5911:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
5912:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: ADC groups regular and-or injected.
5913:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
5914:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC resolution configured).
5915:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
5916:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
5917:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
5918:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
5919:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             be selected. For example:
5920:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
5921:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
5922:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             groups regular and injected).
5923:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
5924:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
5925:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
5926:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is limited to 8 bits: if ADC resolution is
5927:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             12 bits the 4 LSB are ignored, if ADC resolution is 10 bits
5928:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             the 2 LSB are ignored.
5929:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC oversampling is enabled, ADC analog watchdog thresholds are
5930:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         impacted: the comparison of analog watchdog thresholds is done
5931:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on oversampling intermediate computation (after ratio, before shift
5932:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         application): intermediate register bitfield [32:7]
5933:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (26 most significant bits).
5934:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
5935:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
5936:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
5937:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either ADC groups regular or injected.
5938:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll TR1      HT1            LL_ADC_SetAnalogWDThresholds\n
5939:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR2      HT2            LL_ADC_SetAnalogWDThresholds\n
5940:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR3      HT3            LL_ADC_SetAnalogWDThresholds\n
5941:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR1      LT1            LL_ADC_SetAnalogWDThresholds\n
5942:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR2      LT2            LL_ADC_SetAnalogWDThresholds\n
5943:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR3      LT3            LL_ADC_SetAnalogWDThresholds
5944:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5945:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5946:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5947:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
5948:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
5949:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDThresholdsHighLow This parameter can be one of the following values:
5950:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_HIGH
5951:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_LOW
5952:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDThresholdValue Value between Min_Data=0x000 and Max_Data=0xFFF
5953:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
5954:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 119


5955:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThr
5956:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5957:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
5958:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
5959:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
5960:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Set bits with content of parameter "AWDThresholdValue" with bits         */
5961:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* position in register and register position depending on parameters       */
5962:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* "AWDThresholdsHighLow" and "AWDy".                                       */
5963:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Parameters "AWDy" and "AWDThresholdValue" are used with masks because    */
5964:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* containing other bits reserved for other purpose.                        */
5965:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK)
5966:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5967:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
5968:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                AWDThresholdsHighLow,
5969:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                AWDThresholdValue << ((AWDThresholdsHighLow & ADC_AWD_TRX_BIT_HIGH_MASK) >> ADC_AWD_
5970:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
5971:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
5972:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
5973:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Set bits with content of parameter "AWDThresholdValue" with bits         */
5974:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* position in register and register position depending on parameters       */
5975:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* "AWDThresholdsHighLow" and "AWDy".                                       */
5976:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Parameters "AWDy" and "AWDThresholdValue" are used with masks because    */
5977:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* containing other bits reserved for other purpose.                        */
5978:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK
5979:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                         + ((AWDy & ADC_AWD_TR12_REGOFFSETGAP_MASK) 
5980:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                         + (AWDThresholdsHighLow));
5981:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5982:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdValue);
5983:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
5984:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
5985:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bits with content of parameter "AWDThresholdValue" with bits         */
5986:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* position in register and register position depending on parameters       */
5987:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* "AWDThresholdsHighLow" and "AWDy".                                       */
5988:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameters "AWDy" and "AWDThresholdValue" are used with masks because    */
5989:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
5990:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> A
5991:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                       + ((AWDy & ADC_AWD_TR12_REGOFFSETGAP_MASK) * 
5992:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                       + (AWDThresholdsHighLow));
5993:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5994:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdValue);
5995:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
5996:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
5997:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5998:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5999:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC analog watchdog threshold value of threshold high,
6000:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         threshold low or raw data with ADC thresholds high and low
6001:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         concatenated.
6002:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of ADC resolution different of 12 bits,
6003:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         analog watchdog thresholds data require a specific shift.
6004:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Use helper macro @ref __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION().
6005:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll TR1      HT1            LL_ADC_GetAnalogWDThresholds\n
6006:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR2      HT2            LL_ADC_GetAnalogWDThresholds\n
6007:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR3      HT3            LL_ADC_GetAnalogWDThresholds\n
6008:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR1      LT1            LL_ADC_GetAnalogWDThresholds\n
6009:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR2      LT2            LL_ADC_GetAnalogWDThresholds\n
6010:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR3      LT3            LL_ADC_GetAnalogWDThresholds
6011:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 120


6012:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
6013:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
6014:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
6015:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
6016:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDThresholdsHighLow This parameter can be one of the following values:
6017:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_HIGH
6018:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_LOW
6019:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
6020:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** */
6021:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AW
6022:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6023:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
6024:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_
6025:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                             + ((AWDy & ADC_AWD_TR12_REGOFFSETGAP_MA
6026:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                             + (AWDThresholdsHighLow));
6027:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6028:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(*preg, ADC_LTR_LT));
6029:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
6030:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MAS
6031:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                    + ((AWDy & ADC_AWD_TR12_REGOFFSE
6032:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                    + (AWDThresholdsHighLow));
6033:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6034:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(*preg, ADC_LTR_LT));
6035:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
6036:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6037:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6038:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
6039:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6040:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6041:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC analog watchdog thresholds value of both thresholds
6042:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         high and low. Applicable for devices STM32H72xx and STM32H73xx.
6043:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If value of only one threshold high or low must be set,
6044:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use function @ref LL_ADC_SetAnalogWDThresholds().
6045:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of ADC resolution different of 12 bits,
6046:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         analog watchdog thresholds data require a specific shift.
6047:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Use helper macro @ref __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION().
6048:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, there are 2 kinds of analog watchdog
6049:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         instance:
6050:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
6051:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
6052:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: ADC groups regular and-or injected.
6053:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
6054:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC resolution configured).
6055:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
6056:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
6057:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
6058:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
6059:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             be selected. For example:
6060:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
6061:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
6062:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             groups regular and injected).
6063:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
6064:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
6065:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
6066:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is limited to 8 bits: if ADC resolution is
6067:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             12 bits the 4 LSB are ignored, if ADC resolution is 10 bits
6068:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             the 2 LSB are ignored.
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 121


6069:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll TR1      HT1            LL_ADC_ConfigAnalogWDThresholds\n
6070:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR2      HT2            LL_ADC_ConfigAnalogWDThresholds\n
6071:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR3      HT3            LL_ADC_ConfigAnalogWDThresholds\n
6072:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR1      LT1            LL_ADC_ConfigAnalogWDThresholds\n
6073:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR2      LT2            LL_ADC_ConfigAnalogWDThresholds\n
6074:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR3      LT3            LL_ADC_ConfigAnalogWDThresholds
6075:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6076:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
6077:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
6078:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
6079:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
6080:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDThresholdHighValue Value between Min_Data=0x000 and Max_Data=0xFFF
6081:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
6082:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6083:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6084:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWD
6085:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6086:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
6087:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* position in register and register position depending on parameter        */
6088:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* "AWDy".                                                                  */
6089:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
6090:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
6091:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
6092:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6093:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     uint32_t __IO *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK)
6094:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6095:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
6096:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_TR1_HT1 | ADC3_TR1_LT1,
6097:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                (AWDThresholdHighValue << ADC3_TR1_HT1_Pos) | AWDThresholdLowValue);
6098:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6099:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
6100:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6101:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK
6102:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                         + ((AWDy & ADC_AWD_TR12_REGOFFSETGAP_MASK) 
6103:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                         + (LL_ADC_AWD_THRESHOLD_LOW));
6104:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     __IO uint32_t *preg2 = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MAS
6105:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                          + ((AWDy & ADC_AWD_TR12_REGOFFSETGAP_MASK)
6106:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                          + (LL_ADC_AWD_THRESHOLD_HIGH));
6107:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6108:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdLowValue);
6109:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg2, ADC_HTR_HT, AWDThresholdHighValue);
6110:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6111:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6112:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6113:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6114:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6115:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC analog watchdog filtering configuration
6116:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6117:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6118:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
6119:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
6120:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Applicable on ADC3 of devices STM32H72xx and STM32H73xx.
6121:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *  @note  On this STM32 series, this feature is only available on first
6122:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         analog watchdog (AWD1)
6123:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll TR1      AWDFILT        LL_ADC_SetAWDFilteringConfiguration
6124:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6125:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 122


6126:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
6127:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  FilteringConfig This parameter can be one of the following values:
6128:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_NONE
6129:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_2SAMPLES
6130:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_3SAMPLES
6131:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_4SAMPLES
6132:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_5SAMPLES
6133:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_6SAMPLES
6134:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_7SAMPLES
6135:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_8SAMPLES
6136:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6137:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6138:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetAWDFilteringConfiguration(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t
6139:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6140:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
6141:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6142:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Prevent unused argument(s) compilation warning */
6143:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     (void)(AWDy);
6144:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->LTR1_TR1, ADC3_TR1_AWDFILT, FilteringConfig);
6145:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6146:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6147:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6148:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6149:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC analog watchdog filtering configuration
6150:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *  @note  On this STM32 series, this feature is only available on first
6151:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         analog watchdog (AWD1)
6152:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Applicable on ADC3 of devices STM32H72xx and STM32H73xx.
6153:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll TR1      AWDFILT        LL_ADC_GetAWDFilteringConfiguration
6154:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6155:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
6156:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
6157:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be:
6158:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_NONE
6159:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_2SAMPLES
6160:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_3SAMPLES
6161:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_4SAMPLES
6162:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_5SAMPLES
6163:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_6SAMPLES
6164:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_7SAMPLES
6165:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_8SAMPLES
6166:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6167:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetAWDFilteringConfiguration(ADC_TypeDef *ADCx, uint32_t AWDy)
6168:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6169:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
6170:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6171:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Prevent unused argument(s) compilation warning */
6172:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     (void)(AWDy);
6173:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t)(READ_BIT(ADCx->LTR1_TR1, ADC3_TR1_AWDFILT));
6174:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6175:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
6176:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6177:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Function not available on this instance, return 0 */
6178:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return 0UL;
6179:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6180:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6181:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
6182:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 123


6183:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
6184:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6185:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6186:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_oversampling Configuration of ADC transversal scope: over
6187:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
6188:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6189:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6190:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6191:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC oversampling scope: ADC groups regular and-or injected
6192:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (availability of ADC group injected depends on STM32 families).
6193:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If both groups regular and injected are selected,
6194:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         specify behavior of ADC group injected interrupting
6195:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         group regular: when ADC group injected is triggered,
6196:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         the oversampling on ADC group regular is either
6197:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         temporary stopped and continued, or resumed from start
6198:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (oversampler buffer reset).
6199:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6200:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6201:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
6202:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
6203:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    ROVSE          LL_ADC_SetOverSamplingScope\n
6204:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR2    JOVSE          LL_ADC_SetOverSamplingScope\n
6205:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR2    ROVSM          LL_ADC_SetOverSamplingScope
6206:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6207:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  OvsScope This parameter can be one of the following values:
6208:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_DISABLE
6209:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
6210:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_REGULAR_RESUMED
6211:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_INJECTED
6212:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
6213:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6214:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6215:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
6216:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6217:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
6218:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6219:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6220:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6221:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC oversampling scope: ADC groups regular and-or injected
6222:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (availability of ADC group injected depends on STM32 families).
6223:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If both groups regular and injected are selected,
6224:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         specify behavior of ADC group injected interrupting
6225:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         group regular: when ADC group injected is triggered,
6226:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         the oversampling on ADC group regular is either
6227:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         temporary stopped and continued, or resumed from start
6228:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (oversampler buffer reset).
6229:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    ROVSE          LL_ADC_GetOverSamplingScope\n
6230:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR2    JOVSE          LL_ADC_GetOverSamplingScope\n
6231:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR2    ROVSM          LL_ADC_GetOverSamplingScope
6232:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6233:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6234:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_DISABLE
6235:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
6236:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_REGULAR_RESUMED
6237:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_INJECTED
6238:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
6239:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 124


6240:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingScope(ADC_TypeDef *ADCx)
6241:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6242:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM));
6243:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6244:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6245:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6246:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC oversampling discontinuous mode (triggered mode)
6247:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on the selected ADC group.
6248:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Number of oversampled conversions are done either in:
6249:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - continuous mode (all conversions of oversampling ratio
6250:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           are done from 1 trigger)
6251:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - discontinuous mode (each conversion of oversampling ratio
6252:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           needs a trigger)
6253:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6254:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6255:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
6256:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
6257:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, oversampling discontinuous mode
6258:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (triggered mode) can be used only when oversampling is
6259:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         set on group regular only and in resumed mode.
6260:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    TROVS          LL_ADC_SetOverSamplingDiscont
6261:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6262:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  OverSamplingDiscont This parameter can be one of the following values:
6263:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_CONT
6264:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_DISCONT
6265:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6266:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6267:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOverSamplingDiscont(ADC_TypeDef *ADCx, uint32_t OverSamplingDiscont)
6268:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6269:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_TROVS, OverSamplingDiscont);
6270:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6271:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6272:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6273:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC oversampling discontinuous mode (triggered mode)
6274:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on the selected ADC group.
6275:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Number of oversampled conversions are done either in:
6276:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - continuous mode (all conversions of oversampling ratio
6277:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           are done from 1 trigger)
6278:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - discontinuous mode (each conversion of oversampling ratio
6279:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           needs a trigger)
6280:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    TROVS          LL_ADC_GetOverSamplingDiscont
6281:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6282:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6283:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_CONT
6284:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_DISCONT
6285:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6286:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingDiscont(ADC_TypeDef *ADCx)
6287:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6288:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_TROVS));
6289:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6290:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6291:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6292:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC oversampling
6293:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (impacting both ADC groups regular and injected)
6294:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function set the 2 items of oversampling configuration:
6295:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ratio
6296:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - shift
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 125


6297:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6298:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6299:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
6300:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
6301:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    OVSS           LL_ADC_ConfigOverSamplingRatioShift\n
6302:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR2    OVSR           LL_ADC_ConfigOverSamplingRatioShift
6303:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6304:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Ratio This parameter can be in the range from 1 to 1024.
6305:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Shift This parameter can be one of the following values:
6306:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_NONE
6307:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_1
6308:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_2
6309:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_3
6310:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_4
6311:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_5
6312:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_6
6313:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_7
6314:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_8
6315:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_9
6316:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_10
6317:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_11
6318:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6319:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6320:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ConfigOverSamplingRatioShift(ADC_TypeDef *ADCx, uint32_t Ratio, uint32_
6321:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6322:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_
6323:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6324:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6325:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6326:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC oversampling ratio
6327:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *        (impacting both ADC groups regular and injected)
6328:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    OVSR           LL_ADC_GetOverSamplingRatio
6329:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6330:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Ratio This parameter can be in the from 1 to 1024.
6331:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** */
6332:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingRatio(ADC_TypeDef *ADCx)
6333:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6334:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (((uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_OVSR)) + (1UL << ADC_CFGR2_OVSR_Pos)) >> ADC_
6335:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6336:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6337:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6338:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC oversampling shift
6339:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *        (impacting both ADC groups regular and injected)
6340:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    OVSS           LL_ADC_GetOverSamplingShift
6341:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6342:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Shift This parameter can be one of the following values:
6343:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_NONE
6344:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_1
6345:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_2
6346:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_3
6347:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_4
6348:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_5
6349:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_6
6350:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_7
6351:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_8
6352:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_9
6353:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_10
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 126


6354:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_11
6355:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** */
6356:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingShift(ADC_TypeDef *ADCx)
6357:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6358:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_OVSS));
6359:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6360:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6361:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6362:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
6363:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6364:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6365:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Multimode Configuration of ADC hierarchical scope: multim
6366:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
6367:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6368:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6369:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC boost mode.
6370:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6371:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6372:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC boost must be configured, without calibration on going, without conversion
6373:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on group regular.
6374:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR  BOOST      LL_ADC_SetBoostMode
6375:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6376:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  BoostMode This parameter can be one of the following values:
6377:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_BOOST_MODE_6MHZ25
6378:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_BOOST_MODE_12MHZ5
6379:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_BOOST_MODE_20MHZ
6380:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_BOOST_MODE_25MHZ
6381:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_BOOST_MODE_50MHZ
6382:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6383:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6384:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetBoostMode(ADC_TypeDef *ADCx, uint32_t BoostMode)
6385:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6386:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
6387:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx != ADC3)
6388:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6389:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CR, ADC_CR_BOOST, (BoostMode & ADC_CR_BOOST));
6390:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6391:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else   /* ADC_VER_V5_V90 */
6392:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if ((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Cut 1.x */
6393:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6394:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CR, ADC_CR_BOOST_0, (BoostMode >> 2UL));
6395:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6396:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else /* Cut 2.x */
6397:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6398:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CR, ADC_CR_BOOST, (BoostMode & ADC_CR_BOOST));
6399:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6400:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
6401:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6402:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6403:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6404:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6405:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC boost mode.
6406:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6407:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6408:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC boost must be configured, without calibration on going, without conversion
6409:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on group regular.
6410:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR  BOOST      LL_ADC_GetBoostMode
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 127


6411:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6412:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: Boost disabled 1: Boost enabled
6413:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6414:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetBoostMode(ADC_TypeDef *ADCx)
6415:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6416:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if ((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Cut 1.x */
6417:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6418:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t)READ_BIT(ADCx->CR, ADC_CR_BOOST_0);
6419:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6420:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else /* Cut 2.x */
6421:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6422:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return ((READ_BIT(ADCx->CR, ADC_CR_BOOST) == (ADC_CR_BOOST)) ? 1UL : 0UL);
6423:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6424:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6425:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6426:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6427:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC multimode configuration to operate in independent mode
6428:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or multimode (for devices with several ADC instances).
6429:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If multimode configuration: the selected ADC instance is
6430:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         either master or slave depending on hardware.
6431:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to reference manual.
6432:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6433:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6434:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
6435:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
6436:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instance or by using helper macro
6437:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
6438:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      DUAL           LL_ADC_SetMultimode
6439:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6440:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6441:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Multimode This parameter can be one of the following values:
6442:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_INDEPENDENT
6443:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIMULT
6444:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INTERL
6445:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_INJ_SIMULT
6446:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_INJ_ALTERN
6447:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
6448:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
6449:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
6450:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6451:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6452:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetMultimode(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Multimode)
6453:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6454:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_DUAL, Multimode);
6455:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6456:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6457:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6458:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC multimode configuration to operate in independent mode
6459:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or multimode (for devices with several ADC instances).
6460:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If multimode configuration: the selected ADC instance is
6461:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         either master or slave depending on hardware.
6462:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to reference manual.
6463:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      DUAL           LL_ADC_GetMultimode
6464:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6465:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6466:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6467:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_INDEPENDENT
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 128


6468:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIMULT
6469:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INTERL
6470:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_INJ_SIMULT
6471:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_INJ_ALTERN
6472:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
6473:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
6474:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
6475:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6476:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
6477:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 800              		.loc 1 6477 1
 801              		.cfi_startproc
 802              		@ args = 0, pretend = 0, frame = 8
 803              		@ frame_needed = 1, uses_anonymous_args = 0
 804              		@ link register save eliminated.
 805 0000 80B4     		push	{r7}
 806              	.LCFI78:
 807              		.cfi_def_cfa_offset 4
 808              		.cfi_offset 7, -4
 809 0002 83B0     		sub	sp, sp, #12
 810              	.LCFI79:
 811              		.cfi_def_cfa_offset 16
 812 0004 00AF     		add	r7, sp, #0
 813              	.LCFI80:
 814              		.cfi_def_cfa_register 7
 815 0006 7860     		str	r0, [r7, #4]
6478:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 816              		.loc 1 6478 21
 817 0008 7B68     		ldr	r3, [r7, #4]
 818 000a 9B68     		ldr	r3, [r3, #8]
 819              		.loc 1 6478 10
 820 000c 03F01F03 		and	r3, r3, #31
6479:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 821              		.loc 1 6479 1
 822 0010 1846     		mov	r0, r3
 823 0012 0C37     		adds	r7, r7, #12
 824              	.LCFI81:
 825              		.cfi_def_cfa_offset 4
 826 0014 BD46     		mov	sp, r7
 827              	.LCFI82:
 828              		.cfi_def_cfa_register 13
 829              		@ sp needed
 830 0016 5DF8047B 		ldr	r7, [sp], #4
 831              	.LCFI83:
 832              		.cfi_restore 7
 833              		.cfi_def_cfa_offset 0
 834 001a 7047     		bx	lr
 835              		.cfi_endproc
 836              	.LFE218:
 838              		.section	.text.LL_ADC_GetMultiDMATransfer,"ax",%progbits
 839              		.align	1
 840              		.syntax unified
 841              		.thumb
 842              		.thumb_func
 844              	LL_ADC_GetMultiDMATransfer:
 845              	.LFB220:
6480:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 129


6481:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6482:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC multimode conversion data transfer: no transfer
6483:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or transfer by DMA.
6484:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC multimode transfer by DMA is not selected:
6485:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         each ADC uses its own DMA channel, with its individual
6486:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         DMA transfer settings.
6487:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         If ADC multimode transfer by DMA is selected:
6488:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         One DMA channel is used for both ADC (DMA of ADC master)
6489:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Specifies the DMA requests mode:
6490:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
6491:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           when number of DMA data transfers (number of
6492:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions) is reached.
6493:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
6494:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
6495:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
6496:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions).
6497:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
6498:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
6499:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         mode non-circular:
6500:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
6501:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
6502:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (overrun flag and interruption if enabled).
6503:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   How to retrieve multimode conversion data:
6504:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Whatever multimode transfer by DMA setting: using function
6505:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref LL_ADC_REG_ReadMultiConversionData32().
6506:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         If ADC multimode transfer by DMA is selected: conversion data
6507:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is a raw data with ADC master and slave concatenated.
6508:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         A macro is available to get the conversion data of
6509:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC master or ADC slave: see helper macro
6510:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_MULTI_CONV_DATA_MASTER_SLAVE().
6511:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6512:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6513:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled
6514:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or enabled without conversion on going on group regular.
6515:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      DAMDF          LL_ADC_GetMultiDMATransfer\n
6516:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6517:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6518:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  MultiDMATransfer This parameter can be one of the following values:
6519:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
6520:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
6521:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
6522:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6523:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6524:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t MultiDMA
6525:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6526:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_DAMDF, MultiDMATransfer);
6527:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6528:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6529:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6530:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC multimode conversion data transfer: no transfer
6531:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or transfer by DMA.
6532:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC multimode transfer by DMA is not selected:
6533:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         each ADC uses its own DMA channel, with its individual
6534:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         DMA transfer settings.
6535:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         If ADC multimode transfer by DMA is selected:
6536:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         One DMA channel is used for both ADC (DMA of ADC master)
6537:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Specifies the DMA requests mode:
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 130


6538:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
6539:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           when number of DMA data transfers (number of
6540:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions) is reached.
6541:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
6542:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
6543:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
6544:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions).
6545:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
6546:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
6547:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         mode non-circular:
6548:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
6549:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
6550:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (overrun flag and interruption if enabled).
6551:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   How to retrieve multimode conversion data:
6552:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Whatever multimode transfer by DMA setting: using function
6553:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref LL_ADC_REG_ReadMultiConversionData32().
6554:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         If ADC multimode transfer by DMA is selected: conversion data
6555:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is a raw data with ADC master and slave concatenated.
6556:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         A macro is available to get the conversion data of
6557:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC master or ADC slave: see helper macro
6558:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_MULTI_CONV_DATA_MASTER_SLAVE().
6559:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      DAMDF          LL_ADC_GetMultiDMATransfer\n
6560:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6561:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6562:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6563:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
6564:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
6565:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
6566:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6567:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
6568:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 846              		.loc 1 6568 1
 847              		.cfi_startproc
 848              		@ args = 0, pretend = 0, frame = 8
 849              		@ frame_needed = 1, uses_anonymous_args = 0
 850              		@ link register save eliminated.
 851 0000 80B4     		push	{r7}
 852              	.LCFI84:
 853              		.cfi_def_cfa_offset 4
 854              		.cfi_offset 7, -4
 855 0002 83B0     		sub	sp, sp, #12
 856              	.LCFI85:
 857              		.cfi_def_cfa_offset 16
 858 0004 00AF     		add	r7, sp, #0
 859              	.LCFI86:
 860              		.cfi_def_cfa_register 7
 861 0006 7860     		str	r0, [r7, #4]
6569:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 862              		.loc 1 6569 21
 863 0008 7B68     		ldr	r3, [r7, #4]
 864 000a 9B68     		ldr	r3, [r3, #8]
 865              		.loc 1 6569 10
 866 000c 03F44043 		and	r3, r3, #49152
6570:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 867              		.loc 1 6570 1
 868 0010 1846     		mov	r0, r3
 869 0012 0C37     		adds	r7, r7, #12
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 131


 870              	.LCFI87:
 871              		.cfi_def_cfa_offset 4
 872 0014 BD46     		mov	sp, r7
 873              	.LCFI88:
 874              		.cfi_def_cfa_register 13
 875              		@ sp needed
 876 0016 5DF8047B 		ldr	r7, [sp], #4
 877              	.LCFI89:
 878              		.cfi_restore 7
 879              		.cfi_def_cfa_offset 0
 880 001a 7047     		bx	lr
 881              		.cfi_endproc
 882              	.LFE220:
 884              		.section	.text.LL_ADC_DisableDeepPowerDown,"ax",%progbits
 885              		.align	1
 886              		.syntax unified
 887              		.thumb
 888              		.thumb_func
 890              	LL_ADC_DisableDeepPowerDown:
 891              	.LFB224:
6571:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6572:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6573:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC multimode delay between 2 sampling phases.
6574:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The sampling delay range depends on ADC resolution:
6575:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC resolution 12 bits can have maximum delay of 12 cycles.
6576:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC resolution 10 bits can have maximum delay of 10 cycles.
6577:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC resolution  8 bits can have maximum delay of  8 cycles.
6578:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC resolution  6 bits can have maximum delay of  6 cycles.
6579:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6580:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6581:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
6582:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
6583:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instance or by using helper macro helper macro
6584:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
6585:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      DELAY          LL_ADC_SetMultiTwoSamplingDelay
6586:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6587:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6588:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  MultiTwoSamplingDelay This parameter can be one of the following values:
6589:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_1CYCLE_5
6590:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_2CYCLES_5
6591:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_3CYCLES_5
6592:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES_5 (1)
6593:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES_5_8_BITS
6594:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES_5 (2)
6595:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES_5_10_BITS
6596:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES  (3)
6597:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES_5 (4)
6598:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES_5_12_BITS
6599:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_7CYCLES_5 (5)
6600:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_8CYCLES  (6)
6601:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_9CYCLES  (7)
6602:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
6603:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) Parameter available only if ADC resolution is 16, 14, 12 or 10 bits.
6604:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) Parameter available only if ADC resolution is 16, 14 or 12  bits.
6605:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) Parameter available only if ADC resolution is 10 or 8 bits.
6606:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (4) Parameter available only if ADC resolution is 16 or 14 bits.
6607:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (5) Parameter available only if ADC resolution is 16 bits.
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 132


6608:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (6) Parameter available only if ADC resolution is 12 bits.
6609:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (7) Parameter available only if ADC resolution is 16 or 14 bits.
6610:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6611:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6612:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetMultiTwoSamplingDelay(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Mul
6613:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6614:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_DELAY, MultiTwoSamplingDelay);
6615:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6616:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6617:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6618:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC multimode delay between 2 sampling phases.
6619:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      DELAY          LL_ADC_GetMultiTwoSamplingDelay
6620:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6621:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6622:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6623:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_1CYCLE_5
6624:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_2CYCLES_5
6625:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_3CYCLES_5
6626:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES_5 (1)
6627:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES_5_8_BITS
6628:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES_5 (2)
6629:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES_5_10_BITS
6630:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES  (3)
6631:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES_5 (4)
6632:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES_5_12_BITS
6633:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_7CYCLES_5 (5)
6634:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_8CYCLES  (6)
6635:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_9CYCLES  (7)
6636:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
6637:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) Parameter available only if ADC resolution is 16, 14, 12 or 10 bits.
6638:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) Parameter available only if ADC resolution is 16, 14 or 12  bits.
6639:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) Parameter available only if ADC resolution is 10 or 8 bits.
6640:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (4) Parameter available only if ADC resolution is 16 or 14 bits.
6641:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (5) Parameter available only if ADC resolution is 16 bits.
6642:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (6) Parameter available only if ADC resolution is 12 bits.
6643:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (7) Parameter available only if ADC resolution is 16 or 14 bits.
6644:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6645:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetMultiTwoSamplingDelay(ADC_Common_TypeDef *ADCxy_COMMON)
6646:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6647:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DELAY));
6648:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6649:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6650:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6651:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
6652:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6653:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Operation_ADC_Instance Operation on ADC hierarchical scope: ADC instance
6654:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
6655:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6656:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6657:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6658:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Put ADC instance in deep power down state.
6659:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of ADC calibration necessary: When ADC is in deep-power-down
6660:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         state, the internal analog calibration is lost. After exiting from
6661:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         deep power down, calibration must be relaunched or calibration factor
6662:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (preliminarily saved) must be set back into calibration register.
6663:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6664:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 133


6665:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be ADC disabled.
6666:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       DEEPPWD        LL_ADC_EnableDeepPowerDown
6667:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6668:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6669:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6670:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableDeepPowerDown(ADC_TypeDef *ADCx)
6671:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6672:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6673:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6674:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6675:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6676:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6677:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_DEEPPWD);
6678:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6679:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6680:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6681:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable ADC deep power down mode.
6682:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of ADC calibration necessary: When ADC is in deep-power-down
6683:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         state, the internal analog calibration is lost. After exiting from
6684:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         deep power down, calibration must be relaunched or calibration factor
6685:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (preliminarily saved) must be set back into calibration register.
6686:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6687:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6688:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be ADC disabled.
6689:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
6690:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6691:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6692:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6693:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
6694:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 892              		.loc 1 6694 1
 893              		.cfi_startproc
 894              		@ args = 0, pretend = 0, frame = 8
 895              		@ frame_needed = 1, uses_anonymous_args = 0
 896              		@ link register save eliminated.
 897 0000 80B4     		push	{r7}
 898              	.LCFI90:
 899              		.cfi_def_cfa_offset 4
 900              		.cfi_offset 7, -4
 901 0002 83B0     		sub	sp, sp, #12
 902              	.LCFI91:
 903              		.cfi_def_cfa_offset 16
 904 0004 00AF     		add	r7, sp, #0
 905              	.LCFI92:
 906              		.cfi_def_cfa_register 7
 907 0006 7860     		str	r0, [r7, #4]
6695:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6696:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6697:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6698:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 908              		.loc 1 6698 3
 909 0008 7B68     		ldr	r3, [r7, #4]
 910 000a 9A68     		ldr	r2, [r3, #8]
 911 000c 044B     		ldr	r3, .L30
 912 000e 1340     		ands	r3, r3, r2
 913 0010 7A68     		ldr	r2, [r7, #4]
 914 0012 9360     		str	r3, [r2, #8]
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 134


6699:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 915              		.loc 1 6699 1
 916 0014 00BF     		nop
 917 0016 0C37     		adds	r7, r7, #12
 918              	.LCFI93:
 919              		.cfi_def_cfa_offset 4
 920 0018 BD46     		mov	sp, r7
 921              	.LCFI94:
 922              		.cfi_def_cfa_register 13
 923              		@ sp needed
 924 001a 5DF8047B 		ldr	r7, [sp], #4
 925              	.LCFI95:
 926              		.cfi_restore 7
 927              		.cfi_def_cfa_offset 0
 928 001e 7047     		bx	lr
 929              	.L31:
 930              		.align	2
 931              	.L30:
 932 0020 C0FFFF5F 		.word	1610612672
 933              		.cfi_endproc
 934              	.LFE224:
 936              		.section	.text.LL_ADC_IsDeepPowerDownEnabled,"ax",%progbits
 937              		.align	1
 938              		.syntax unified
 939              		.thumb
 940              		.thumb_func
 942              	LL_ADC_IsDeepPowerDownEnabled:
 943              	.LFB225:
6700:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6701:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6702:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get the selected ADC instance deep power down state.
6703:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
6704:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6705:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: deep power down is disabled, 1: deep power down is enabled.
6706:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6707:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
6708:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 944              		.loc 1 6708 1
 945              		.cfi_startproc
 946              		@ args = 0, pretend = 0, frame = 8
 947              		@ frame_needed = 1, uses_anonymous_args = 0
 948              		@ link register save eliminated.
 949 0000 80B4     		push	{r7}
 950              	.LCFI96:
 951              		.cfi_def_cfa_offset 4
 952              		.cfi_offset 7, -4
 953 0002 83B0     		sub	sp, sp, #12
 954              	.LCFI97:
 955              		.cfi_def_cfa_offset 16
 956 0004 00AF     		add	r7, sp, #0
 957              	.LCFI98:
 958              		.cfi_def_cfa_register 7
 959 0006 7860     		str	r0, [r7, #4]
6709:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 960              		.loc 1 6709 12
 961 0008 7B68     		ldr	r3, [r7, #4]
 962 000a 9B68     		ldr	r3, [r3, #8]
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 135


 963 000c 03F00053 		and	r3, r3, #536870912
 964              		.loc 1 6709 74
 965 0010 B3F1005F 		cmp	r3, #536870912
 966 0014 01D1     		bne	.L33
 967              		.loc 1 6709 74 is_stmt 0 discriminator 1
 968 0016 0123     		movs	r3, #1
 969 0018 00E0     		b	.L35
 970              	.L33:
 971              		.loc 1 6709 74 discriminator 2
 972 001a 0023     		movs	r3, #0
 973              	.L35:
6710:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 974              		.loc 1 6710 1 is_stmt 1 discriminator 5
 975 001c 1846     		mov	r0, r3
 976 001e 0C37     		adds	r7, r7, #12
 977              	.LCFI99:
 978              		.cfi_def_cfa_offset 4
 979 0020 BD46     		mov	sp, r7
 980              	.LCFI100:
 981              		.cfi_def_cfa_register 13
 982              		@ sp needed
 983 0022 5DF8047B 		ldr	r7, [sp], #4
 984              	.LCFI101:
 985              		.cfi_restore 7
 986              		.cfi_def_cfa_offset 0
 987 0026 7047     		bx	lr
 988              		.cfi_endproc
 989              	.LFE225:
 991              		.section	.text.LL_ADC_EnableInternalRegulator,"ax",%progbits
 992              		.align	1
 993              		.syntax unified
 994              		.thumb
 995              		.thumb_func
 997              	LL_ADC_EnableInternalRegulator:
 998              	.LFB226:
6711:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6712:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6713:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable ADC instance internal voltage regulator.
6714:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, after ADC internal voltage regulator enable,
6715:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a delay for ADC internal voltage regulator stabilization
6716:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is required before performing a ADC calibration or ADC enable.
6717:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet, parameter tADCVREG_STUP.
6718:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_INTERNAL_REGUL_STAB_US.
6719:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6720:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6721:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be ADC disabled.
6722:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
6723:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6724:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6725:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6726:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
6727:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 999              		.loc 1 6727 1
 1000              		.cfi_startproc
 1001              		@ args = 0, pretend = 0, frame = 8
 1002              		@ frame_needed = 1, uses_anonymous_args = 0
 1003              		@ link register save eliminated.
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 136


 1004 0000 80B4     		push	{r7}
 1005              	.LCFI102:
 1006              		.cfi_def_cfa_offset 4
 1007              		.cfi_offset 7, -4
 1008 0002 83B0     		sub	sp, sp, #12
 1009              	.LCFI103:
 1010              		.cfi_def_cfa_offset 16
 1011 0004 00AF     		add	r7, sp, #0
 1012              	.LCFI104:
 1013              		.cfi_def_cfa_register 7
 1014 0006 7860     		str	r0, [r7, #4]
6728:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6729:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6730:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6731:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
 1015              		.loc 1 6731 3
 1016 0008 7B68     		ldr	r3, [r7, #4]
 1017 000a 9A68     		ldr	r2, [r3, #8]
 1018 000c 054B     		ldr	r3, .L37
 1019 000e 1340     		ands	r3, r3, r2
 1020 0010 43F08052 		orr	r2, r3, #268435456
 1021 0014 7B68     		ldr	r3, [r7, #4]
 1022 0016 9A60     		str	r2, [r3, #8]
6732:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6733:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_ADVREGEN);
6734:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1023              		.loc 1 6734 1
 1024 0018 00BF     		nop
 1025 001a 0C37     		adds	r7, r7, #12
 1026              	.LCFI105:
 1027              		.cfi_def_cfa_offset 4
 1028 001c BD46     		mov	sp, r7
 1029              	.LCFI106:
 1030              		.cfi_def_cfa_register 13
 1031              		@ sp needed
 1032 001e 5DF8047B 		ldr	r7, [sp], #4
 1033              	.LCFI107:
 1034              		.cfi_restore 7
 1035              		.cfi_def_cfa_offset 0
 1036 0022 7047     		bx	lr
 1037              	.L38:
 1038              		.align	2
 1039              	.L37:
 1040 0024 C0FFFF6F 		.word	1879048128
 1041              		.cfi_endproc
 1042              	.LFE226:
 1044              		.section	.text.LL_ADC_IsInternalRegulatorEnabled,"ax",%progbits
 1045              		.align	1
 1046              		.syntax unified
 1047              		.thumb
 1048              		.thumb_func
 1050              	LL_ADC_IsInternalRegulatorEnabled:
 1051              	.LFB228:
6735:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6736:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6737:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable ADC internal voltage regulator.
6738:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 137


6739:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6740:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be ADC disabled.
6741:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
6742:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6743:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6744:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6745:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
6746:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6747:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
6748:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6749:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6750:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6751:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get the selected ADC instance internal voltage regulator state.
6752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
6753:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6754:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
6755:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6756:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
6757:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1052              		.loc 1 6757 1
 1053              		.cfi_startproc
 1054              		@ args = 0, pretend = 0, frame = 8
 1055              		@ frame_needed = 1, uses_anonymous_args = 0
 1056              		@ link register save eliminated.
 1057 0000 80B4     		push	{r7}
 1058              	.LCFI108:
 1059              		.cfi_def_cfa_offset 4
 1060              		.cfi_offset 7, -4
 1061 0002 83B0     		sub	sp, sp, #12
 1062              	.LCFI109:
 1063              		.cfi_def_cfa_offset 16
 1064 0004 00AF     		add	r7, sp, #0
 1065              	.LCFI110:
 1066              		.cfi_def_cfa_register 7
 1067 0006 7860     		str	r0, [r7, #4]
6758:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 1068              		.loc 1 6758 12
 1069 0008 7B68     		ldr	r3, [r7, #4]
 1070 000a 9B68     		ldr	r3, [r3, #8]
 1071 000c 03F08053 		and	r3, r3, #268435456
 1072              		.loc 1 6758 76
 1073 0010 B3F1805F 		cmp	r3, #268435456
 1074 0014 01D1     		bne	.L40
 1075              		.loc 1 6758 76 is_stmt 0 discriminator 1
 1076 0016 0123     		movs	r3, #1
 1077 0018 00E0     		b	.L42
 1078              	.L40:
 1079              		.loc 1 6758 76 discriminator 2
 1080 001a 0023     		movs	r3, #0
 1081              	.L42:
6759:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1082              		.loc 1 6759 1 is_stmt 1 discriminator 5
 1083 001c 1846     		mov	r0, r3
 1084 001e 0C37     		adds	r7, r7, #12
 1085              	.LCFI111:
 1086              		.cfi_def_cfa_offset 4
 1087 0020 BD46     		mov	sp, r7
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 138


 1088              	.LCFI112:
 1089              		.cfi_def_cfa_register 13
 1090              		@ sp needed
 1091 0022 5DF8047B 		ldr	r7, [sp], #4
 1092              	.LCFI113:
 1093              		.cfi_restore 7
 1094              		.cfi_def_cfa_offset 0
 1095 0026 7047     		bx	lr
 1096              		.cfi_endproc
 1097              	.LFE228:
 1099              		.section	.text.LL_ADC_Enable,"ax",%progbits
 1100              		.align	1
 1101              		.syntax unified
 1102              		.thumb
 1103              		.thumb_func
 1105              	LL_ADC_Enable:
 1106              	.LFB229:
6760:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6761:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6762:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable the selected ADC instance.
6763:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, after ADC enable, a delay for
6764:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC internal analog stabilization is required before performing a
6765:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversion start.
6766:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet, parameter tSTAB.
6767:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, flag LL_ADC_FLAG_ADRDY is raised when the ADC
6768:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is enabled and when conversion clock is active.
6769:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (not only core clock: this ADC has a dual clock domain)
6770:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6771:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6772:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be ADC disabled and ADC internal voltage regulator enabled.
6773:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADEN           LL_ADC_Enable
6774:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6775:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6776:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6777:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
6778:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1107              		.loc 1 6778 1
 1108              		.cfi_startproc
 1109              		@ args = 0, pretend = 0, frame = 8
 1110              		@ frame_needed = 1, uses_anonymous_args = 0
 1111              		@ link register save eliminated.
 1112 0000 80B4     		push	{r7}
 1113              	.LCFI114:
 1114              		.cfi_def_cfa_offset 4
 1115              		.cfi_offset 7, -4
 1116 0002 83B0     		sub	sp, sp, #12
 1117              	.LCFI115:
 1118              		.cfi_def_cfa_offset 16
 1119 0004 00AF     		add	r7, sp, #0
 1120              	.LCFI116:
 1121              		.cfi_def_cfa_register 7
 1122 0006 7860     		str	r0, [r7, #4]
6779:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6780:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6781:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6782:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
 1123              		.loc 1 6782 3
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 139


 1124 0008 7B68     		ldr	r3, [r7, #4]
 1125 000a 9A68     		ldr	r2, [r3, #8]
 1126 000c 054B     		ldr	r3, .L44
 1127 000e 1340     		ands	r3, r3, r2
 1128 0010 43F00102 		orr	r2, r3, #1
 1129 0014 7B68     		ldr	r3, [r7, #4]
 1130 0016 9A60     		str	r2, [r3, #8]
6783:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6784:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_ADEN);
6785:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1131              		.loc 1 6785 1
 1132 0018 00BF     		nop
 1133 001a 0C37     		adds	r7, r7, #12
 1134              	.LCFI117:
 1135              		.cfi_def_cfa_offset 4
 1136 001c BD46     		mov	sp, r7
 1137              	.LCFI118:
 1138              		.cfi_def_cfa_register 13
 1139              		@ sp needed
 1140 001e 5DF8047B 		ldr	r7, [sp], #4
 1141              	.LCFI119:
 1142              		.cfi_restore 7
 1143              		.cfi_def_cfa_offset 0
 1144 0022 7047     		bx	lr
 1145              	.L45:
 1146              		.align	2
 1147              	.L44:
 1148 0024 C0FFFF7F 		.word	2147483584
 1149              		.cfi_endproc
 1150              	.LFE229:
 1152              		.section	.text.LL_ADC_Disable,"ax",%progbits
 1153              		.align	1
 1154              		.syntax unified
 1155              		.thumb
 1156              		.thumb_func
 1158              	LL_ADC_Disable:
 1159              	.LFB230:
6786:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6787:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6788:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable the selected ADC instance.
6789:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6790:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6791:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be not disabled. Must be enabled without conversion on going
6792:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
6793:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADDIS          LL_ADC_Disable
6794:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6795:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6796:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6797:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
6798:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1160              		.loc 1 6798 1
 1161              		.cfi_startproc
 1162              		@ args = 0, pretend = 0, frame = 8
 1163              		@ frame_needed = 1, uses_anonymous_args = 0
 1164              		@ link register save eliminated.
 1165 0000 80B4     		push	{r7}
 1166              	.LCFI120:
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 140


 1167              		.cfi_def_cfa_offset 4
 1168              		.cfi_offset 7, -4
 1169 0002 83B0     		sub	sp, sp, #12
 1170              	.LCFI121:
 1171              		.cfi_def_cfa_offset 16
 1172 0004 00AF     		add	r7, sp, #0
 1173              	.LCFI122:
 1174              		.cfi_def_cfa_register 7
 1175 0006 7860     		str	r0, [r7, #4]
6799:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6800:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6801:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6802:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
 1176              		.loc 1 6802 3
 1177 0008 7B68     		ldr	r3, [r7, #4]
 1178 000a 9A68     		ldr	r2, [r3, #8]
 1179 000c 054B     		ldr	r3, .L47
 1180 000e 1340     		ands	r3, r3, r2
 1181 0010 43F00202 		orr	r2, r3, #2
 1182 0014 7B68     		ldr	r3, [r7, #4]
 1183 0016 9A60     		str	r2, [r3, #8]
6803:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6804:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_ADDIS);
6805:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1184              		.loc 1 6805 1
 1185 0018 00BF     		nop
 1186 001a 0C37     		adds	r7, r7, #12
 1187              	.LCFI123:
 1188              		.cfi_def_cfa_offset 4
 1189 001c BD46     		mov	sp, r7
 1190              	.LCFI124:
 1191              		.cfi_def_cfa_register 13
 1192              		@ sp needed
 1193 001e 5DF8047B 		ldr	r7, [sp], #4
 1194              	.LCFI125:
 1195              		.cfi_restore 7
 1196              		.cfi_def_cfa_offset 0
 1197 0022 7047     		bx	lr
 1198              	.L48:
 1199              		.align	2
 1200              	.L47:
 1201 0024 C0FFFF7F 		.word	2147483584
 1202              		.cfi_endproc
 1203              	.LFE230:
 1205              		.section	.text.LL_ADC_IsEnabled,"ax",%progbits
 1206              		.align	1
 1207              		.syntax unified
 1208              		.thumb
 1209              		.thumb_func
 1211              	LL_ADC_IsEnabled:
 1212              	.LFB231:
6806:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6807:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6808:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get the selected ADC instance enable state.
6809:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, flag LL_ADC_FLAG_ADRDY is raised when the ADC
6810:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is enabled and when conversion clock is active.
6811:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (not only core clock: this ADC has a dual clock domain)
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 141


6812:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADEN           LL_ADC_IsEnabled
6813:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6814:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: ADC is disabled, 1: ADC is enabled.
6815:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6816:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
6817:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1213              		.loc 1 6817 1
 1214              		.cfi_startproc
 1215              		@ args = 0, pretend = 0, frame = 8
 1216              		@ frame_needed = 1, uses_anonymous_args = 0
 1217              		@ link register save eliminated.
 1218 0000 80B4     		push	{r7}
 1219              	.LCFI126:
 1220              		.cfi_def_cfa_offset 4
 1221              		.cfi_offset 7, -4
 1222 0002 83B0     		sub	sp, sp, #12
 1223              	.LCFI127:
 1224              		.cfi_def_cfa_offset 16
 1225 0004 00AF     		add	r7, sp, #0
 1226              	.LCFI128:
 1227              		.cfi_def_cfa_register 7
 1228 0006 7860     		str	r0, [r7, #4]
6818:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 1229              		.loc 1 6818 12
 1230 0008 7B68     		ldr	r3, [r7, #4]
 1231 000a 9B68     		ldr	r3, [r3, #8]
 1232 000c 03F00103 		and	r3, r3, #1
 1233              		.loc 1 6818 68
 1234 0010 012B     		cmp	r3, #1
 1235 0012 01D1     		bne	.L50
 1236              		.loc 1 6818 68 is_stmt 0 discriminator 1
 1237 0014 0123     		movs	r3, #1
 1238 0016 00E0     		b	.L52
 1239              	.L50:
 1240              		.loc 1 6818 68 discriminator 2
 1241 0018 0023     		movs	r3, #0
 1242              	.L52:
6819:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1243              		.loc 1 6819 1 is_stmt 1 discriminator 5
 1244 001a 1846     		mov	r0, r3
 1245 001c 0C37     		adds	r7, r7, #12
 1246              	.LCFI129:
 1247              		.cfi_def_cfa_offset 4
 1248 001e BD46     		mov	sp, r7
 1249              	.LCFI130:
 1250              		.cfi_def_cfa_register 13
 1251              		@ sp needed
 1252 0020 5DF8047B 		ldr	r7, [sp], #4
 1253              	.LCFI131:
 1254              		.cfi_restore 7
 1255              		.cfi_def_cfa_offset 0
 1256 0024 7047     		bx	lr
 1257              		.cfi_endproc
 1258              	.LFE231:
 1260              		.section	.text.LL_ADC_IsDisableOngoing,"ax",%progbits
 1261              		.align	1
 1262              		.syntax unified
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 142


 1263              		.thumb
 1264              		.thumb_func
 1266              	LL_ADC_IsDisableOngoing:
 1267              	.LFB232:
6820:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6821:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6822:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get the selected ADC instance disable state.
6823:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
6824:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6825:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: no ADC disable command on going.
6826:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6827:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
6828:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1268              		.loc 1 6828 1
 1269              		.cfi_startproc
 1270              		@ args = 0, pretend = 0, frame = 8
 1271              		@ frame_needed = 1, uses_anonymous_args = 0
 1272              		@ link register save eliminated.
 1273 0000 80B4     		push	{r7}
 1274              	.LCFI132:
 1275              		.cfi_def_cfa_offset 4
 1276              		.cfi_offset 7, -4
 1277 0002 83B0     		sub	sp, sp, #12
 1278              	.LCFI133:
 1279              		.cfi_def_cfa_offset 16
 1280 0004 00AF     		add	r7, sp, #0
 1281              	.LCFI134:
 1282              		.cfi_def_cfa_register 7
 1283 0006 7860     		str	r0, [r7, #4]
6829:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 1284              		.loc 1 6829 12
 1285 0008 7B68     		ldr	r3, [r7, #4]
 1286 000a 9B68     		ldr	r3, [r3, #8]
 1287 000c 03F00203 		and	r3, r3, #2
 1288              		.loc 1 6829 70
 1289 0010 022B     		cmp	r3, #2
 1290 0012 01D1     		bne	.L54
 1291              		.loc 1 6829 70 is_stmt 0 discriminator 1
 1292 0014 0123     		movs	r3, #1
 1293 0016 00E0     		b	.L56
 1294              	.L54:
 1295              		.loc 1 6829 70 discriminator 2
 1296 0018 0023     		movs	r3, #0
 1297              	.L56:
6830:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1298              		.loc 1 6830 1 is_stmt 1 discriminator 5
 1299 001a 1846     		mov	r0, r3
 1300 001c 0C37     		adds	r7, r7, #12
 1301              	.LCFI135:
 1302              		.cfi_def_cfa_offset 4
 1303 001e BD46     		mov	sp, r7
 1304              	.LCFI136:
 1305              		.cfi_def_cfa_register 13
 1306              		@ sp needed
 1307 0020 5DF8047B 		ldr	r7, [sp], #4
 1308              	.LCFI137:
 1309              		.cfi_restore 7
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 143


 1310              		.cfi_def_cfa_offset 0
 1311 0024 7047     		bx	lr
 1312              		.cfi_endproc
 1313              	.LFE232:
 1315              		.section	.text.LL_ADC_REG_StartConversion,"ax",%progbits
 1316              		.align	1
 1317              		.syntax unified
 1318              		.thumb
 1319              		.thumb_func
 1321              	LL_ADC_REG_StartConversion:
 1322              	.LFB235:
6831:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6832:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6833:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Start ADC calibration in the mode single-ended
6834:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or differential (for devices with differential mode available).
6835:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, a minimum number of ADC clock cycles
6836:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         are required between ADC end of calibration and ADC enable.
6837:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_CALIB_ENABLE_ADC_CYCLES.
6838:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Calibration duration:
6839:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Calibration of offset: 520 ADC clock cycles
6840:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Calibration of linearity: 131072 ADC clock cycles
6841:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with differential mode available:
6842:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Calibration of offset is specific to each of
6843:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         single-ended and differential modes
6844:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (calibration run must be performed for each of these
6845:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         differential modes, if used afterwards and if the application
6846:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         requires their calibration).
6847:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Calibration of linearity is common to both
6848:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         single-ended and differential modes
6849:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (calibration run can be performed only once).
6850:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6851:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6852:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be ADC disabled.
6853:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADCAL          LL_ADC_StartCalibration\n
6854:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CR       ADCALDIF       LL_ADC_StartCalibration\n
6855:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CR       ADCALLIN       LL_ADC_StartCalibration
6856:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6857:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  CalibrationMode This parameter can be one of the following values:
6858:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_OFFSET
6859:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_OFFSET_LINEARITY
6860:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SingleDiff This parameter can be one of the following values:
6861:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SINGLE_ENDED
6862:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
6863:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6864:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6865:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t CalibrationMode, uint32_t 
6866:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6867:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6868:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6869:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6870:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6871:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_ADCALLIN | ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
6872:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_ADCAL | (CalibrationMode & ADC_CALIB_MODE_MASK) | (SingleDiff & ADC_SINGLEDIFF_
6873:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6874:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6875:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6876:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC calibration state.
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 144


6877:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
6878:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6879:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: calibration complete, 1: calibration in progress.
6880:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6881:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
6882:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6883:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6885:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6886:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6887:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
6888:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6889:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6890:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Operation_ADC_Group_Regular Operation on ADC hierarchical scope: group regu
6891:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
6892:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6893:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6894:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6895:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Start ADC group regular conversion.
6896:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, this function is relevant for both
6897:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal trigger (SW start) and external trigger:
6898:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - If ADC trigger has been set to software start, ADC conversion
6899:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           starts immediately.
6900:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - If ADC trigger has been set to external trigger, ADC conversion
6901:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           will start at next trigger event (on the selected trigger edge)
6902:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           following the ADC start conversion command.
6903:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6904:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6905:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be enabled without conversion on going on group regular,
6906:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without conversion stop command on going on group regular,
6907:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without ADC disable command on going.
6908:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
6909:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6910:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6911:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6912:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
6913:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1323              		.loc 1 6913 1
 1324              		.cfi_startproc
 1325              		@ args = 0, pretend = 0, frame = 8
 1326              		@ frame_needed = 1, uses_anonymous_args = 0
 1327              		@ link register save eliminated.
 1328 0000 80B4     		push	{r7}
 1329              	.LCFI138:
 1330              		.cfi_def_cfa_offset 4
 1331              		.cfi_offset 7, -4
 1332 0002 83B0     		sub	sp, sp, #12
 1333              	.LCFI139:
 1334              		.cfi_def_cfa_offset 16
 1335 0004 00AF     		add	r7, sp, #0
 1336              	.LCFI140:
 1337              		.cfi_def_cfa_register 7
 1338 0006 7860     		str	r0, [r7, #4]
6914:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6915:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6916:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6917:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 145


 1339              		.loc 1 6917 3
 1340 0008 7B68     		ldr	r3, [r7, #4]
 1341 000a 9A68     		ldr	r2, [r3, #8]
 1342 000c 054B     		ldr	r3, .L58
 1343 000e 1340     		ands	r3, r3, r2
 1344 0010 43F00402 		orr	r2, r3, #4
 1345 0014 7B68     		ldr	r3, [r7, #4]
 1346 0016 9A60     		str	r2, [r3, #8]
6918:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6919:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_ADSTART);
6920:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1347              		.loc 1 6920 1
 1348 0018 00BF     		nop
 1349 001a 0C37     		adds	r7, r7, #12
 1350              	.LCFI141:
 1351              		.cfi_def_cfa_offset 4
 1352 001c BD46     		mov	sp, r7
 1353              	.LCFI142:
 1354              		.cfi_def_cfa_register 13
 1355              		@ sp needed
 1356 001e 5DF8047B 		ldr	r7, [sp], #4
 1357              	.LCFI143:
 1358              		.cfi_restore 7
 1359              		.cfi_def_cfa_offset 0
 1360 0022 7047     		bx	lr
 1361              	.L59:
 1362              		.align	2
 1363              	.L58:
 1364 0024 C0FFFF7F 		.word	2147483584
 1365              		.cfi_endproc
 1366              	.LFE235:
 1368              		.section	.text.LL_ADC_REG_StopConversion,"ax",%progbits
 1369              		.align	1
 1370              		.syntax unified
 1371              		.thumb
 1372              		.thumb_func
 1374              	LL_ADC_REG_StopConversion:
 1375              	.LFB236:
6921:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6922:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6923:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Stop ADC group regular conversion.
6924:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6925:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6926:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be enabled with conversion on going on group regular,
6927:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without ADC disable command on going.
6928:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
6929:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6930:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6931:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6932:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
6933:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1376              		.loc 1 6933 1
 1377              		.cfi_startproc
 1378              		@ args = 0, pretend = 0, frame = 8
 1379              		@ frame_needed = 1, uses_anonymous_args = 0
 1380              		@ link register save eliminated.
 1381 0000 80B4     		push	{r7}
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 146


 1382              	.LCFI144:
 1383              		.cfi_def_cfa_offset 4
 1384              		.cfi_offset 7, -4
 1385 0002 83B0     		sub	sp, sp, #12
 1386              	.LCFI145:
 1387              		.cfi_def_cfa_offset 16
 1388 0004 00AF     		add	r7, sp, #0
 1389              	.LCFI146:
 1390              		.cfi_def_cfa_register 7
 1391 0006 7860     		str	r0, [r7, #4]
6934:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6935:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6936:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6937:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
 1392              		.loc 1 6937 3
 1393 0008 7B68     		ldr	r3, [r7, #4]
 1394 000a 9A68     		ldr	r2, [r3, #8]
 1395 000c 054B     		ldr	r3, .L61
 1396 000e 1340     		ands	r3, r3, r2
 1397 0010 43F01002 		orr	r2, r3, #16
 1398 0014 7B68     		ldr	r3, [r7, #4]
 1399 0016 9A60     		str	r2, [r3, #8]
6938:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6939:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_ADSTP);
6940:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1400              		.loc 1 6940 1
 1401 0018 00BF     		nop
 1402 001a 0C37     		adds	r7, r7, #12
 1403              	.LCFI147:
 1404              		.cfi_def_cfa_offset 4
 1405 001c BD46     		mov	sp, r7
 1406              	.LCFI148:
 1407              		.cfi_def_cfa_register 13
 1408              		@ sp needed
 1409 001e 5DF8047B 		ldr	r7, [sp], #4
 1410              	.LCFI149:
 1411              		.cfi_restore 7
 1412              		.cfi_def_cfa_offset 0
 1413 0022 7047     		bx	lr
 1414              	.L62:
 1415              		.align	2
 1416              	.L61:
 1417 0024 C0FFFF7F 		.word	2147483584
 1418              		.cfi_endproc
 1419              	.LFE236:
 1421              		.section	.text.LL_ADC_REG_IsConversionOngoing,"ax",%progbits
 1422              		.align	1
 1423              		.syntax unified
 1424              		.thumb
 1425              		.thumb_func
 1427              	LL_ADC_REG_IsConversionOngoing:
 1428              	.LFB237:
6941:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6942:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6943:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion state.
6944:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
6945:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 147


6946:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: no conversion is on going on ADC group regular.
6947:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6948:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
6949:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1429              		.loc 1 6949 1
 1430              		.cfi_startproc
 1431              		@ args = 0, pretend = 0, frame = 8
 1432              		@ frame_needed = 1, uses_anonymous_args = 0
 1433              		@ link register save eliminated.
 1434 0000 80B4     		push	{r7}
 1435              	.LCFI150:
 1436              		.cfi_def_cfa_offset 4
 1437              		.cfi_offset 7, -4
 1438 0002 83B0     		sub	sp, sp, #12
 1439              	.LCFI151:
 1440              		.cfi_def_cfa_offset 16
 1441 0004 00AF     		add	r7, sp, #0
 1442              	.LCFI152:
 1443              		.cfi_def_cfa_register 7
 1444 0006 7860     		str	r0, [r7, #4]
6950:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 1445              		.loc 1 6950 12
 1446 0008 7B68     		ldr	r3, [r7, #4]
 1447 000a 9B68     		ldr	r3, [r3, #8]
 1448 000c 03F00403 		and	r3, r3, #4
 1449              		.loc 1 6950 74
 1450 0010 042B     		cmp	r3, #4
 1451 0012 01D1     		bne	.L64
 1452              		.loc 1 6950 74 is_stmt 0 discriminator 1
 1453 0014 0123     		movs	r3, #1
 1454 0016 00E0     		b	.L66
 1455              	.L64:
 1456              		.loc 1 6950 74 discriminator 2
 1457 0018 0023     		movs	r3, #0
 1458              	.L66:
6951:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1459              		.loc 1 6951 1 is_stmt 1 discriminator 5
 1460 001a 1846     		mov	r0, r3
 1461 001c 0C37     		adds	r7, r7, #12
 1462              	.LCFI153:
 1463              		.cfi_def_cfa_offset 4
 1464 001e BD46     		mov	sp, r7
 1465              	.LCFI154:
 1466              		.cfi_def_cfa_register 13
 1467              		@ sp needed
 1468 0020 5DF8047B 		ldr	r7, [sp], #4
 1469              	.LCFI155:
 1470              		.cfi_restore 7
 1471              		.cfi_def_cfa_offset 0
 1472 0024 7047     		bx	lr
 1473              		.cfi_endproc
 1474              	.LFE237:
 1476              		.section	.text.LL_ADC_INJ_StopConversion,"ax",%progbits
 1477              		.align	1
 1478              		.syntax unified
 1479              		.thumb
 1480              		.thumb_func
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 148


 1482              	LL_ADC_INJ_StopConversion:
 1483              	.LFB247:
6952:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6953:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6954:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular command of conversion stop state
6955:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADSTP          LL_ADC_REG_IsStopConversionOngoing
6956:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6957:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: no command of conversion stop is on going on ADC group regular.
6958:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6959:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_IsStopConversionOngoing(ADC_TypeDef *ADCx)
6960:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6961:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP)) ? 1UL : 0UL);
6962:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6963:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6964:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6965:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6966:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         all ADC configurations: all ADC resolutions and
6967:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         all oversampling increased data width (for devices
6968:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         with feature oversampling).
6969:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData32
6970:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6971:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
6972:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6973:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_ReadConversionData32(ADC_TypeDef *ADCx)
6974:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6975:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6976:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6977:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6978:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6979:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6980:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 16 bits.
6981:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
6982:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
6983:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
6984:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData16
6985:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6986:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFFFF
6987:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6988:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData16(ADC_TypeDef *ADCx)
6989:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6990:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6991:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6992:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6993:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6994:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6995:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 14 bits.
6996:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
6997:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
6998:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
6999:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData14
7000:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7001:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x3FF
7002:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7003:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData14(ADC_TypeDef *ADCx)
7004:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7005:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
7006:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 149


7007:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7008:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7009:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
7010:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 12 bits.
7011:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
7012:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
7013:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
7014:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
7015:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7016:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
7017:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7018:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
7019:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7020:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
7021:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7022:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7023:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7024:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
7025:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 10 bits.
7026:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
7027:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
7028:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
7029:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData10
7030:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7031:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0x3FF
7032:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7033:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData10(ADC_TypeDef *ADCx)
7034:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7035:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
7036:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7037:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7038:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7039:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
7040:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 8 bits.
7041:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
7042:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
7043:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
7044:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData8
7045:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7046:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
7047:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7048:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint8_t LL_ADC_REG_ReadConversionData8(ADC_TypeDef *ADCx)
7049:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7050:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint8_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
7051:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7052:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7053:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC multimode conversion data of ADC master, ADC slave
7054:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or raw data with ADC master and slave concatenated.
7055:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If raw data with ADC master and slave concatenated is retrieved,
7056:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a macro is available to get the conversion data of
7057:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC master or ADC slave: see helper macro
7058:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_MULTI_CONV_DATA_MASTER_SLAVE().
7059:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (however this macro is mainly intended for multimode
7060:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         transfer by DMA, because this function can do the same
7061:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         by getting multimode conversion data of ADC master or ADC slave
7062:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         separately).
7063:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CDR      RDATA_MST      LL_ADC_REG_ReadMultiConversionData32\n
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 150


7064:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CDR      RDATA_SLV      LL_ADC_REG_ReadMultiConversionData32
7065:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7066:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7067:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ConversionData This parameter can be one of the following values:
7068:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_MASTER
7069:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_SLAVE
7070:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_MASTER_SLAVE
7071:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
7072:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7073:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_ReadMultiConversionData32(ADC_Common_TypeDef *ADCxy_COMMON, uin
7074:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7075:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CDR,
7076:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                              ConversionData)
7077:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                     >> (POSITION_VAL(ConversionData) & 0x1FUL)
7078:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    );
7079:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7080:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7081:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7082:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
7083:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7084:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7085:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Operation_ADC_Group_Injected Operation on ADC hierarchical scope: group inj
7086:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
7087:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7088:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7089:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7090:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Start ADC group injected conversion.
7091:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, this function is relevant for both
7092:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal trigger (SW start) and external trigger:
7093:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - If ADC trigger has been set to software start, ADC conversion
7094:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           starts immediately.
7095:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - If ADC trigger has been set to external trigger, ADC conversion
7096:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           will start at next trigger event (on the selected trigger edge)
7097:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           following the ADC start conversion command.
7098:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
7099:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
7100:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be enabled without conversion on going on group injected,
7101:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without conversion stop command on going on group injected,
7102:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without ADC disable command on going.
7103:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       JADSTART       LL_ADC_INJ_StartConversion
7104:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7105:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7106:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7107:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_StartConversion(ADC_TypeDef *ADCx)
7108:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7109:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
7110:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
7111:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
7112:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
7113:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
7114:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_JADSTART);
7115:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7116:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7117:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7118:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Stop ADC group injected conversion.
7119:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
7120:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 151


7121:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be enabled with conversion on going on group injected,
7122:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without ADC disable command on going.
7123:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
7124:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7125:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7126:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7127:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
7128:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1484              		.loc 1 7128 1
 1485              		.cfi_startproc
 1486              		@ args = 0, pretend = 0, frame = 8
 1487              		@ frame_needed = 1, uses_anonymous_args = 0
 1488              		@ link register save eliminated.
 1489 0000 80B4     		push	{r7}
 1490              	.LCFI156:
 1491              		.cfi_def_cfa_offset 4
 1492              		.cfi_offset 7, -4
 1493 0002 83B0     		sub	sp, sp, #12
 1494              	.LCFI157:
 1495              		.cfi_def_cfa_offset 16
 1496 0004 00AF     		add	r7, sp, #0
 1497              	.LCFI158:
 1498              		.cfi_def_cfa_register 7
 1499 0006 7860     		str	r0, [r7, #4]
7129:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
7130:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
7131:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
7132:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
 1500              		.loc 1 7132 3
 1501 0008 7B68     		ldr	r3, [r7, #4]
 1502 000a 9A68     		ldr	r2, [r3, #8]
 1503 000c 054B     		ldr	r3, .L68
 1504 000e 1340     		ands	r3, r3, r2
 1505 0010 43F02002 		orr	r2, r3, #32
 1506 0014 7B68     		ldr	r3, [r7, #4]
 1507 0016 9A60     		str	r2, [r3, #8]
7133:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
7134:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_JADSTP);
7135:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1508              		.loc 1 7135 1
 1509 0018 00BF     		nop
 1510 001a 0C37     		adds	r7, r7, #12
 1511              	.LCFI159:
 1512              		.cfi_def_cfa_offset 4
 1513 001c BD46     		mov	sp, r7
 1514              	.LCFI160:
 1515              		.cfi_def_cfa_register 13
 1516              		@ sp needed
 1517 001e 5DF8047B 		ldr	r7, [sp], #4
 1518              	.LCFI161:
 1519              		.cfi_restore 7
 1520              		.cfi_def_cfa_offset 0
 1521 0022 7047     		bx	lr
 1522              	.L69:
 1523              		.align	2
 1524              	.L68:
 1525 0024 C0FFFF7F 		.word	2147483584
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 152


 1526              		.cfi_endproc
 1527              	.LFE247:
 1529              		.section	.text.LL_ADC_INJ_IsConversionOngoing,"ax",%progbits
 1530              		.align	1
 1531              		.syntax unified
 1532              		.thumb
 1533              		.thumb_func
 1535              	LL_ADC_INJ_IsConversionOngoing:
 1536              	.LFB248:
7136:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7137:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7138:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion state.
7139:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
7140:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7141:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: no conversion is on going on ADC group injected.
7142:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7143:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
7144:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1537              		.loc 1 7144 1
 1538              		.cfi_startproc
 1539              		@ args = 0, pretend = 0, frame = 8
 1540              		@ frame_needed = 1, uses_anonymous_args = 0
 1541              		@ link register save eliminated.
 1542 0000 80B4     		push	{r7}
 1543              	.LCFI162:
 1544              		.cfi_def_cfa_offset 4
 1545              		.cfi_offset 7, -4
 1546 0002 83B0     		sub	sp, sp, #12
 1547              	.LCFI163:
 1548              		.cfi_def_cfa_offset 16
 1549 0004 00AF     		add	r7, sp, #0
 1550              	.LCFI164:
 1551              		.cfi_def_cfa_register 7
 1552 0006 7860     		str	r0, [r7, #4]
7145:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 1553              		.loc 1 7145 12
 1554 0008 7B68     		ldr	r3, [r7, #4]
 1555 000a 9B68     		ldr	r3, [r3, #8]
 1556 000c 03F00803 		and	r3, r3, #8
 1557              		.loc 1 7145 76
 1558 0010 082B     		cmp	r3, #8
 1559 0012 01D1     		bne	.L71
 1560              		.loc 1 7145 76 is_stmt 0 discriminator 1
 1561 0014 0123     		movs	r3, #1
 1562 0016 00E0     		b	.L73
 1563              	.L71:
 1564              		.loc 1 7145 76 discriminator 2
 1565 0018 0023     		movs	r3, #0
 1566              	.L73:
7146:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1567              		.loc 1 7146 1 is_stmt 1 discriminator 5
 1568 001a 1846     		mov	r0, r3
 1569 001c 0C37     		adds	r7, r7, #12
 1570              	.LCFI165:
 1571              		.cfi_def_cfa_offset 4
 1572 001e BD46     		mov	sp, r7
 1573              	.LCFI166:
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 153


 1574              		.cfi_def_cfa_register 13
 1575              		@ sp needed
 1576 0020 5DF8047B 		ldr	r7, [sp], #4
 1577              	.LCFI167:
 1578              		.cfi_restore 7
 1579              		.cfi_def_cfa_offset 0
 1580 0024 7047     		bx	lr
 1581              		.cfi_endproc
 1582              	.LFE248:
 1584              		.section	.text.LL_ADC_ClearFlag_AWD1,"ax",%progbits
 1585              		.align	1
 1586              		.syntax unified
 1587              		.thumb
 1588              		.thumb_func
 1590              	LL_ADC_ClearFlag_AWD1:
 1591              	.LFB275:
7147:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7148:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7149:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected command of conversion stop state
7150:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       JADSTP         LL_ADC_INJ_IsStopConversionOngoing
7151:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7152:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: no command of conversion stop is on going on ADC group injected.
7153:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7154:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_IsStopConversionOngoing(ADC_TypeDef *ADCx)
7155:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7156:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_JADSTP) == (ADC_CR_JADSTP)) ? 1UL : 0UL);
7157:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7158:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7159:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7160:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion data, range fit for
7161:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         all ADC configurations: all ADC resolutions and
7162:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         all oversampling increased data width (for devices
7163:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         with feature oversampling).
7164:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JDR1     JDATA          LL_ADC_INJ_ReadConversionData32\n
7165:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR2     JDATA          LL_ADC_INJ_ReadConversionData32\n
7166:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR3     JDATA          LL_ADC_INJ_ReadConversionData32\n
7167:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR4     JDATA          LL_ADC_INJ_ReadConversionData32
7168:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7169:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
7170:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
7171:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
7172:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
7173:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
7174:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
7175:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7176:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_ReadConversionData32(ADC_TypeDef *ADCx, uint32_t Rank)
7177:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7178:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, ((Rank & ADC_INJ_JDRX_REGOFFSET_MASK
7179:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7180:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(*preg,
7181:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                              ADC_JDR1_JDATA)
7182:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    );
7183:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7184:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7185:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7186:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion data, range fit for
7187:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 16 bits.
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 154


7188:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
7189:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
7190:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_INJ_ReadConversionData32.
7191:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JDR1     JDATA          LL_ADC_INJ_ReadConversionData16\n
7192:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR2     JDATA          LL_ADC_INJ_ReadConversionData16\n
7193:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR3     JDATA          LL_ADC_INJ_ReadConversionData16\n
7194:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR4     JDATA          LL_ADC_INJ_ReadConversionData16
7195:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7196:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
7197:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
7198:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
7199:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
7200:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
7201:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFFF
7202:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7203:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_INJ_ReadConversionData16(ADC_TypeDef *ADCx, uint32_t Rank)
7204:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7205:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, ((Rank & ADC_INJ_JDRX_REGOFFSET_MASK
7206:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7207:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint16_t)(READ_BIT(*preg,
7208:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                              ADC_JDR1_JDATA)
7209:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    );
7210:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7211:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7212:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7213:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion data, range fit for
7214:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 14 bits.
7215:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
7216:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
7217:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_INJ_ReadConversionData32.
7218:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JDR1     JDATA          LL_ADC_INJ_ReadConversionData14\n
7219:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR2     JDATA          LL_ADC_INJ_ReadConversionData14\n
7220:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR3     JDATA          LL_ADC_INJ_ReadConversionData14\n
7221:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR4     JDATA          LL_ADC_INJ_ReadConversionData14
7222:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7223:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
7224:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
7225:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
7226:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
7227:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
7228:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0x3FFF
7229:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7230:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_INJ_ReadConversionData14(ADC_TypeDef *ADCx, uint32_t Rank)
7231:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7232:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, ((Rank & ADC_INJ_JDRX_REGOFFSET_MASK
7233:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7234:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint16_t)(READ_BIT(*preg,
7235:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                              ADC_JDR1_JDATA)
7236:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    );
7237:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7238:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7239:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7240:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion data, range fit for
7241:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 12 bits.
7242:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
7243:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
7244:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_INJ_ReadConversionData32.
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 155


7245:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JDR1     JDATA          LL_ADC_INJ_ReadConversionData12\n
7246:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR2     JDATA          LL_ADC_INJ_ReadConversionData12\n
7247:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR3     JDATA          LL_ADC_INJ_ReadConversionData12\n
7248:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR4     JDATA          LL_ADC_INJ_ReadConversionData12
7249:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7250:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
7251:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
7252:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
7253:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
7254:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
7255:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
7256:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7257:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_INJ_ReadConversionData12(ADC_TypeDef *ADCx, uint32_t Rank)
7258:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7259:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, ((Rank & ADC_INJ_JDRX_REGOFFSET_MASK
7260:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7261:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint16_t)(READ_BIT(*preg,
7262:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                              ADC_JDR1_JDATA)
7263:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    );
7264:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7265:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7266:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7267:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion data, range fit for
7268:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 10 bits.
7269:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
7270:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
7271:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_INJ_ReadConversionData32.
7272:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JDR1     JDATA          LL_ADC_INJ_ReadConversionData10\n
7273:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR2     JDATA          LL_ADC_INJ_ReadConversionData10\n
7274:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR3     JDATA          LL_ADC_INJ_ReadConversionData10\n
7275:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR4     JDATA          LL_ADC_INJ_ReadConversionData10
7276:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7277:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
7278:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
7279:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
7280:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
7281:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
7282:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0x3FF
7283:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7284:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_INJ_ReadConversionData10(ADC_TypeDef *ADCx, uint32_t Rank)
7285:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7286:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, ((Rank & ADC_INJ_JDRX_REGOFFSET_MASK
7287:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7288:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint16_t)(READ_BIT(*preg,
7289:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                              ADC_JDR1_JDATA)
7290:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    );
7291:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7292:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7293:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7294:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion data, range fit for
7295:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 8 bits.
7296:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
7297:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
7298:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_INJ_ReadConversionData32.
7299:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JDR1     JDATA          LL_ADC_INJ_ReadConversionData8\n
7300:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR2     JDATA          LL_ADC_INJ_ReadConversionData8\n
7301:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR3     JDATA          LL_ADC_INJ_ReadConversionData8\n
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 156


7302:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR4     JDATA          LL_ADC_INJ_ReadConversionData8
7303:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7304:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
7305:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
7306:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
7307:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
7308:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
7309:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
7310:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7311:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint8_t LL_ADC_INJ_ReadConversionData8(ADC_TypeDef *ADCx, uint32_t Rank)
7312:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7313:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, ((Rank & ADC_INJ_JDRX_REGOFFSET_MASK
7314:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7315:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint8_t)(READ_BIT(*preg,
7316:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                             ADC_JDR1_JDATA)
7317:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                   );
7318:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7319:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7320:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7321:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
7322:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7323:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7324:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_FLAG_Management ADC flag management
7325:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
7326:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7327:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7328:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7329:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag ADC ready.
7330:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, flag LL_ADC_FLAG_ADRDY is raised when the ADC
7331:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is enabled and when conversion clock is active.
7332:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (not only core clock: this ADC has a dual clock domain)
7333:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
7334:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7335:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7336:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7337:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
7338:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7339:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
7340:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7341:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7342:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7343:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag ADC group regular end of unitary conversion.
7344:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
7345:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7346:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7347:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7348:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
7349:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7350:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
7351:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7352:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7353:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7354:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag ADC group regular end of sequence conversions.
7355:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      EOS            LL_ADC_IsActiveFlag_EOS
7356:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7357:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7358:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 157


7359:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOS(ADC_TypeDef *ADCx)
7360:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7361:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_EOS) == (LL_ADC_FLAG_EOS)) ? 1UL : 0UL);
7362:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7363:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7364:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7365:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag ADC group regular overrun.
7366:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      OVR            LL_ADC_IsActiveFlag_OVR
7367:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7368:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7369:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7370:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_OVR(ADC_TypeDef *ADCx)
7371:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7372:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_OVR) == (LL_ADC_FLAG_OVR)) ? 1UL : 0UL);
7373:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7374:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7375:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7376:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag ADC group regular end of sampling phase.
7377:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      EOSMP          LL_ADC_IsActiveFlag_EOSMP
7378:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7379:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7380:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7381:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOSMP(ADC_TypeDef *ADCx)
7382:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7383:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_EOSMP) == (LL_ADC_FLAG_EOSMP)) ? 1UL : 0UL);
7384:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7385:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7386:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7387:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag ADC group injected end of unitary conversion.
7388:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      JEOC           LL_ADC_IsActiveFlag_JEOC
7389:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7390:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7391:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7392:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_JEOC(ADC_TypeDef *ADCx)
7393:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7394:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_JEOC) == (LL_ADC_FLAG_JEOC)) ? 1UL : 0UL);
7395:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7396:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7397:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7398:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag ADC group injected end of sequence conversions.
7399:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      JEOS           LL_ADC_IsActiveFlag_JEOS
7400:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7401:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7402:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7403:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_JEOS(ADC_TypeDef *ADCx)
7404:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7405:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS)) ? 1UL : 0UL);
7406:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7407:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7408:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7409:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag ADC group injected contexts queue overflow.
7410:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      JQOVF          LL_ADC_IsActiveFlag_JQOVF
7411:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7412:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7413:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7414:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_JQOVF(ADC_TypeDef *ADCx)
7415:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 158


7416:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_JQOVF) == (LL_ADC_FLAG_JQOVF)) ? 1UL : 0UL);
7417:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7418:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7419:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7420:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag ADC analog watchdog 1 flag
7421:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      AWD1           LL_ADC_IsActiveFlag_AWD1
7422:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7423:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7424:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7425:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_AWD1(ADC_TypeDef *ADCx)
7426:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7427:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_AWD1) == (LL_ADC_FLAG_AWD1)) ? 1UL : 0UL);
7428:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7429:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7430:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7431:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag ADC analog watchdog 2.
7432:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      AWD2           LL_ADC_IsActiveFlag_AWD2
7433:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7434:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7435:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7436:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_AWD2(ADC_TypeDef *ADCx)
7437:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7438:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_AWD2) == (LL_ADC_FLAG_AWD2)) ? 1UL : 0UL);
7439:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7440:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7441:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7442:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag ADC analog watchdog 3.
7443:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      AWD3           LL_ADC_IsActiveFlag_AWD3
7444:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7445:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7446:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7447:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_AWD3(ADC_TypeDef *ADCx)
7448:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7449:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_AWD3) == (LL_ADC_FLAG_AWD3)) ? 1UL : 0UL);
7450:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7451:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7452:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7453:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Clear flag ADC ready.
7454:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, flag LL_ADC_FLAG_ADRDY is raised when the ADC
7455:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is enabled and when conversion clock is active.
7456:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (not only core clock: this ADC has a dual clock domain)
7457:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      ADRDY          LL_ADC_ClearFlag_ADRDY
7458:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7459:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7460:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7461:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_ADRDY(ADC_TypeDef *ADCx)
7462:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7463:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_ADRDY);
7464:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7465:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7466:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7467:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Clear flag ADC group regular end of unitary conversion.
7468:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
7469:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7470:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7471:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7472:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 159


7473:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7474:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
7475:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7476:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7477:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7478:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Clear flag ADC group regular end of sequence conversions.
7479:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      EOS            LL_ADC_ClearFlag_EOS
7480:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7481:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7482:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7483:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_EOS(ADC_TypeDef *ADCx)
7484:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7485:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOS);
7486:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7487:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7488:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7489:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Clear flag ADC group regular overrun.
7490:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      OVR            LL_ADC_ClearFlag_OVR
7491:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7492:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7493:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7494:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_OVR(ADC_TypeDef *ADCx)
7495:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7496:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_OVR);
7497:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7498:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7499:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7500:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Clear flag ADC group regular end of sampling phase.
7501:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      EOSMP          LL_ADC_ClearFlag_EOSMP
7502:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7503:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7504:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7505:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_EOSMP(ADC_TypeDef *ADCx)
7506:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7507:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOSMP);
7508:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7509:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7510:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7511:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Clear flag ADC group injected end of unitary conversion.
7512:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      JEOC           LL_ADC_ClearFlag_JEOC
7513:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7514:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7515:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7516:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_JEOC(ADC_TypeDef *ADCx)
7517:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7518:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
7519:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7520:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7521:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7522:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Clear flag ADC group injected end of sequence conversions.
7523:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      JEOS           LL_ADC_ClearFlag_JEOS
7524:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7525:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7526:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7527:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_JEOS(ADC_TypeDef *ADCx)
7528:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7529:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 160


7530:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7531:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7532:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7533:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Clear flag ADC group injected contexts queue overflow.
7534:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      JQOVF          LL_ADC_ClearFlag_JQOVF
7535:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7536:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7537:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7538:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_JQOVF(ADC_TypeDef *ADCx)
7539:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7540:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JQOVF);
7541:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7542:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7543:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7544:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Clear flag ADC analog watchdog 1.
7545:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
7546:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7547:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7548:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7549:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
7550:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1592              		.loc 1 7550 1
 1593              		.cfi_startproc
 1594              		@ args = 0, pretend = 0, frame = 8
 1595              		@ frame_needed = 1, uses_anonymous_args = 0
 1596              		@ link register save eliminated.
 1597 0000 80B4     		push	{r7}
 1598              	.LCFI168:
 1599              		.cfi_def_cfa_offset 4
 1600              		.cfi_offset 7, -4
 1601 0002 83B0     		sub	sp, sp, #12
 1602              	.LCFI169:
 1603              		.cfi_def_cfa_offset 16
 1604 0004 00AF     		add	r7, sp, #0
 1605              	.LCFI170:
 1606              		.cfi_def_cfa_register 7
 1607 0006 7860     		str	r0, [r7, #4]
7551:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 1608              		.loc 1 7551 3
 1609 0008 7B68     		ldr	r3, [r7, #4]
 1610 000a 8022     		movs	r2, #128
 1611 000c 1A60     		str	r2, [r3]
7552:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1612              		.loc 1 7552 1
 1613 000e 00BF     		nop
 1614 0010 0C37     		adds	r7, r7, #12
 1615              	.LCFI171:
 1616              		.cfi_def_cfa_offset 4
 1617 0012 BD46     		mov	sp, r7
 1618              	.LCFI172:
 1619              		.cfi_def_cfa_register 13
 1620              		@ sp needed
 1621 0014 5DF8047B 		ldr	r7, [sp], #4
 1622              	.LCFI173:
 1623              		.cfi_restore 7
 1624              		.cfi_def_cfa_offset 0
 1625 0018 7047     		bx	lr
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 161


 1626              		.cfi_endproc
 1627              	.LFE275:
 1629              		.section	.text.LL_ADC_ClearFlag_AWD2,"ax",%progbits
 1630              		.align	1
 1631              		.syntax unified
 1632              		.thumb
 1633              		.thumb_func
 1635              	LL_ADC_ClearFlag_AWD2:
 1636              	.LFB276:
7553:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7554:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7555:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Clear flag ADC analog watchdog 2.
7556:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
7557:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7558:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7559:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7560:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
7561:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1637              		.loc 1 7561 1
 1638              		.cfi_startproc
 1639              		@ args = 0, pretend = 0, frame = 8
 1640              		@ frame_needed = 1, uses_anonymous_args = 0
 1641              		@ link register save eliminated.
 1642 0000 80B4     		push	{r7}
 1643              	.LCFI174:
 1644              		.cfi_def_cfa_offset 4
 1645              		.cfi_offset 7, -4
 1646 0002 83B0     		sub	sp, sp, #12
 1647              	.LCFI175:
 1648              		.cfi_def_cfa_offset 16
 1649 0004 00AF     		add	r7, sp, #0
 1650              	.LCFI176:
 1651              		.cfi_def_cfa_register 7
 1652 0006 7860     		str	r0, [r7, #4]
7562:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 1653              		.loc 1 7562 3
 1654 0008 7B68     		ldr	r3, [r7, #4]
 1655 000a 4FF48072 		mov	r2, #256
 1656 000e 1A60     		str	r2, [r3]
7563:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1657              		.loc 1 7563 1
 1658 0010 00BF     		nop
 1659 0012 0C37     		adds	r7, r7, #12
 1660              	.LCFI177:
 1661              		.cfi_def_cfa_offset 4
 1662 0014 BD46     		mov	sp, r7
 1663              	.LCFI178:
 1664              		.cfi_def_cfa_register 13
 1665              		@ sp needed
 1666 0016 5DF8047B 		ldr	r7, [sp], #4
 1667              	.LCFI179:
 1668              		.cfi_restore 7
 1669              		.cfi_def_cfa_offset 0
 1670 001a 7047     		bx	lr
 1671              		.cfi_endproc
 1672              	.LFE276:
 1674              		.section	.text.LL_ADC_ClearFlag_AWD3,"ax",%progbits
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 162


 1675              		.align	1
 1676              		.syntax unified
 1677              		.thumb
 1678              		.thumb_func
 1680              	LL_ADC_ClearFlag_AWD3:
 1681              	.LFB277:
7564:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7565:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7566:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Clear flag ADC analog watchdog 3.
7567:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
7568:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7569:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7570:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7571:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
7572:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1682              		.loc 1 7572 1
 1683              		.cfi_startproc
 1684              		@ args = 0, pretend = 0, frame = 8
 1685              		@ frame_needed = 1, uses_anonymous_args = 0
 1686              		@ link register save eliminated.
 1687 0000 80B4     		push	{r7}
 1688              	.LCFI180:
 1689              		.cfi_def_cfa_offset 4
 1690              		.cfi_offset 7, -4
 1691 0002 83B0     		sub	sp, sp, #12
 1692              	.LCFI181:
 1693              		.cfi_def_cfa_offset 16
 1694 0004 00AF     		add	r7, sp, #0
 1695              	.LCFI182:
 1696              		.cfi_def_cfa_register 7
 1697 0006 7860     		str	r0, [r7, #4]
7573:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 1698              		.loc 1 7573 3
 1699 0008 7B68     		ldr	r3, [r7, #4]
 1700 000a 4FF40072 		mov	r2, #512
 1701 000e 1A60     		str	r2, [r3]
7574:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1702              		.loc 1 7574 1
 1703 0010 00BF     		nop
 1704 0012 0C37     		adds	r7, r7, #12
 1705              	.LCFI183:
 1706              		.cfi_def_cfa_offset 4
 1707 0014 BD46     		mov	sp, r7
 1708              	.LCFI184:
 1709              		.cfi_def_cfa_register 13
 1710              		@ sp needed
 1711 0016 5DF8047B 		ldr	r7, [sp], #4
 1712              	.LCFI185:
 1713              		.cfi_restore 7
 1714              		.cfi_def_cfa_offset 0
 1715 001a 7047     		bx	lr
 1716              		.cfi_endproc
 1717              	.LFE277:
 1719              		.section	.text.LL_ADC_EnableIT_AWD1,"ax",%progbits
 1720              		.align	1
 1721              		.syntax unified
 1722              		.thumb
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 163


 1723              		.thumb_func
 1725              	LL_ADC_EnableIT_AWD1:
 1726              	.LFB308:
7575:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7576:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7577:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC ready of the ADC master.
7578:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      ADRDY_MST      LL_ADC_IsActiveFlag_MST_ADRDY
7579:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7580:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7581:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7582:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7583:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_ADRDY(ADC_Common_TypeDef *ADCxy_COMMON)
7584:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7585:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_ADRDY_MST) == (LL_ADC_FLAG_ADRDY_MST)) ? 1UL : 0
7586:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7587:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7588:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7589:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC ready of the ADC slave.
7590:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      ADRDY_SLV      LL_ADC_IsActiveFlag_SLV_ADRDY
7591:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7592:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7593:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7594:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7595:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_ADRDY(ADC_Common_TypeDef *ADCxy_COMMON)
7596:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7597:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_ADRDY_SLV) == (LL_ADC_FLAG_ADRDY_SLV)) ? 1UL : 0
7598:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7599:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7600:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7601:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular end of unitary conversion of the ADC master.
7602:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      EOC_MST        LL_ADC_IsActiveFlag_MST_EOC
7603:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7604:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7605:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7606:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7607:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_EOC(ADC_Common_TypeDef *ADCxy_COMMON)
7608:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7609:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_EOC_SLV) == (LL_ADC_FLAG_EOC_SLV)) ? 1UL : 0UL);
7610:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7611:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7612:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7613:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular end of unitary conversion of the ADC slave.
7614:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      EOC_SLV        LL_ADC_IsActiveFlag_SLV_EOC
7615:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7616:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7617:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7618:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7619:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_EOC(ADC_Common_TypeDef *ADCxy_COMMON)
7620:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7621:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_EOC_SLV) == (LL_ADC_FLAG_EOC_SLV)) ? 1UL : 0UL);
7622:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7623:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7624:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7625:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular end of sequence conversions of the ADC master.
7626:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      EOS_MST        LL_ADC_IsActiveFlag_MST_EOS
7627:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7628:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 164


7629:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7630:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7631:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_EOS(ADC_Common_TypeDef *ADCxy_COMMON)
7632:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7633:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_EOS_MST) == (LL_ADC_FLAG_EOS_MST)) ? 1UL : 0UL);
7634:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7635:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7636:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7637:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular end of sequence conversions of the ADC slave.
7638:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      EOS_SLV        LL_ADC_IsActiveFlag_SLV_EOS
7639:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7640:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7641:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7642:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7643:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_EOS(ADC_Common_TypeDef *ADCxy_COMMON)
7644:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7645:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_EOS_SLV) == (LL_ADC_FLAG_EOS_SLV)) ? 1UL : 0UL);
7646:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7647:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7648:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7649:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular overrun of the ADC master.
7650:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      OVR_MST        LL_ADC_IsActiveFlag_MST_OVR
7651:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7652:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7653:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7654:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7655:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_OVR(ADC_Common_TypeDef *ADCxy_COMMON)
7656:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7657:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_OVR_MST) == (LL_ADC_FLAG_OVR_MST)) ? 1UL : 0UL);
7658:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7659:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7660:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7661:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular overrun of the ADC slave.
7662:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      OVR_SLV        LL_ADC_IsActiveFlag_SLV_OVR
7663:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7664:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7665:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7666:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7667:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_OVR(ADC_Common_TypeDef *ADCxy_COMMON)
7668:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7669:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_OVR_SLV) == (LL_ADC_FLAG_OVR_SLV)) ? 1UL : 0UL);
7670:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7671:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7672:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7673:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular end of sampling of the ADC master.
7674:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      EOSMP_MST      LL_ADC_IsActiveFlag_MST_EOSMP
7675:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7676:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7677:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7678:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7679:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_EOSMP(ADC_Common_TypeDef *ADCxy_COMMON)
7680:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7681:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_EOSMP_MST) == (LL_ADC_FLAG_EOSMP_MST)) ? 1UL : 0
7682:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7683:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7684:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7685:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular end of sampling of the ADC slave.
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 165


7686:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      EOSMP_SLV      LL_ADC_IsActiveFlag_SLV_EOSMP
7687:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7688:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7689:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7690:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7691:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_EOSMP(ADC_Common_TypeDef *ADCxy_COMMON)
7692:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7693:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_EOSMP_SLV) == (LL_ADC_FLAG_EOSMP_SLV)) ? 1UL : 0
7694:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7695:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7696:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7697:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group injected end of unitary conversion of the ADC master.
7698:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      JEOC_MST       LL_ADC_IsActiveFlag_MST_JEOC
7699:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7700:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7701:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7702:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7703:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_JEOC(ADC_Common_TypeDef *ADCxy_COMMON)
7704:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7705:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_JEOC_MST) == (LL_ADC_FLAG_JEOC_MST)) ? 1UL : 0UL
7706:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7707:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7708:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7709:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group injected end of unitary conversion of the ADC slave.
7710:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      JEOC_SLV       LL_ADC_IsActiveFlag_SLV_JEOC
7711:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7712:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7713:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7714:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7715:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_JEOC(ADC_Common_TypeDef *ADCxy_COMMON)
7716:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7717:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_JEOC_SLV) == (LL_ADC_FLAG_JEOC_SLV)) ? 1UL : 0UL
7718:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7719:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7720:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7721:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group injected end of sequence conversions of the ADC master.
7722:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      JEOS_MST       LL_ADC_IsActiveFlag_MST_JEOS
7723:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7724:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7725:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7726:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7727:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_JEOS(ADC_Common_TypeDef *ADCxy_COMMON)
7728:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7729:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_JEOS_MST) == (LL_ADC_FLAG_JEOS_MST)) ? 1UL : 0UL
7730:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7731:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7732:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7733:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group injected end of sequence conversions of the ADC slave.
7734:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      JEOS_SLV       LL_ADC_IsActiveFlag_SLV_JEOS
7735:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7736:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7737:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7738:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7739:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_JEOS(ADC_Common_TypeDef *ADCxy_COMMON)
7740:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7741:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_JEOS_SLV) == (LL_ADC_FLAG_JEOS_SLV)) ? 1UL : 0UL
7742:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 166


7743:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7744:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7745:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group injected context queue overflow of the ADC master.
7746:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      JQOVF_MST      LL_ADC_IsActiveFlag_MST_JQOVF
7747:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7748:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7749:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7750:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7751:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_JQOVF(ADC_Common_TypeDef *ADCxy_COMMON)
7752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7753:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_JQOVF_MST) == (LL_ADC_FLAG_JQOVF_MST)) ? 1UL : 0
7754:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7755:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7756:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7757:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group injected context queue overflow of the ADC slave.
7758:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      JQOVF_SLV      LL_ADC_IsActiveFlag_SLV_JQOVF
7759:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7760:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7761:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7762:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7763:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_JQOVF(ADC_Common_TypeDef *ADCxy_COMMON)
7764:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7765:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_JQOVF_SLV) == (LL_ADC_FLAG_JQOVF_SLV)) ? 1UL : 0
7766:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7767:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7768:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7769:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC analog watchdog 1 of the ADC master.
7770:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      AWD1_MST       LL_ADC_IsActiveFlag_MST_AWD1
7771:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7772:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7773:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7774:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7775:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_AWD1(ADC_Common_TypeDef *ADCxy_COMMON)
7776:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7777:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_AWD1_MST) == (LL_ADC_FLAG_AWD1_MST)) ? 1UL : 0UL
7778:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7779:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7780:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7781:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode analog watchdog 1 of the ADC slave.
7782:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      AWD1_SLV       LL_ADC_IsActiveFlag_SLV_AWD1
7783:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7784:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7785:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7786:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7787:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_AWD1(ADC_Common_TypeDef *ADCxy_COMMON)
7788:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7789:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_AWD1_SLV) == (LL_ADC_FLAG_AWD1_SLV)) ? 1UL : 0UL
7790:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7791:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7792:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7793:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC analog watchdog 2 of the ADC master.
7794:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      AWD2_MST       LL_ADC_IsActiveFlag_MST_AWD2
7795:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7796:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7797:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7798:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7799:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_AWD2(ADC_Common_TypeDef *ADCxy_COMMON)
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 167


7800:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7801:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_AWD2_MST) == (LL_ADC_FLAG_AWD2_MST)) ? 1UL : 0UL
7802:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7803:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7804:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7805:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC analog watchdog 2 of the ADC slave.
7806:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      AWD2_SLV       LL_ADC_IsActiveFlag_SLV_AWD2
7807:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7808:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7809:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7810:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7811:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_AWD2(ADC_Common_TypeDef *ADCxy_COMMON)
7812:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7813:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_AWD2_SLV) == (LL_ADC_FLAG_AWD2_SLV)) ? 1UL : 0UL
7814:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7815:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7816:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7817:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC analog watchdog 3 of the ADC master.
7818:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      AWD3_MST       LL_ADC_IsActiveFlag_MST_AWD3
7819:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7820:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7821:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7822:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7823:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_AWD3(ADC_Common_TypeDef *ADCxy_COMMON)
7824:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7825:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_AWD3_MST) == (LL_ADC_FLAG_AWD3_MST)) ? 1UL : 0UL
7826:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7827:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7828:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7829:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC analog watchdog 3 of the ADC slave.
7830:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      AWD3_SLV       LL_ADC_IsActiveFlag_SLV_AWD3
7831:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7832:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7833:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7834:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7835:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_AWD3(ADC_Common_TypeDef *ADCxy_COMMON)
7836:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7837:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_AWD3_SLV) == (LL_ADC_FLAG_AWD3_SLV)) ? 1UL : 0UL
7838:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7839:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7840:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7841:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
7842:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7843:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7844:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_IT_Management ADC IT management
7845:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
7846:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7847:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7848:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7849:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable ADC ready.
7850:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      ADRDYIE        LL_ADC_EnableIT_ADRDY
7851:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7852:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7853:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7854:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_ADRDY(ADC_TypeDef *ADCx)
7855:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7856:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_ADRDY);
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 168


7857:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7858:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7859:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7860:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable interruption ADC group regular end of unitary conversion.
7861:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      EOCIE          LL_ADC_EnableIT_EOC
7862:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7863:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7864:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7865:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_EOC(ADC_TypeDef *ADCx)
7866:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7867:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_EOC);
7868:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7869:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7870:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7871:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable interruption ADC group regular end of sequence conversions.
7872:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      EOSIE          LL_ADC_EnableIT_EOS
7873:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7874:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7875:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7876:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_EOS(ADC_TypeDef *ADCx)
7877:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7878:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_EOS);
7879:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7880:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7881:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7882:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable ADC group regular interruption overrun.
7883:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      OVRIE          LL_ADC_EnableIT_OVR
7884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7885:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7886:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7887:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_OVR(ADC_TypeDef *ADCx)
7888:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7889:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_OVR);
7890:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7891:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7892:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7893:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable interruption ADC group regular end of sampling.
7894:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      EOSMPIE        LL_ADC_EnableIT_EOSMP
7895:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7896:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7897:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7898:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_EOSMP(ADC_TypeDef *ADCx)
7899:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7900:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_EOSMP);
7901:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7902:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7903:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7904:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable interruption ADC group injected end of unitary conversion.
7905:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      JEOCIE         LL_ADC_EnableIT_JEOC
7906:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7907:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7908:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7909:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_JEOC(ADC_TypeDef *ADCx)
7910:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7911:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_JEOC);
7912:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7913:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 169


7914:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7915:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable interruption ADC group injected end of sequence conversions.
7916:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      JEOSIE         LL_ADC_EnableIT_JEOS
7917:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7918:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7919:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7920:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_JEOS(ADC_TypeDef *ADCx)
7921:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7922:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
7923:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7924:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7925:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7926:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable interruption ADC group injected context queue overflow.
7927:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      JQOVFIE        LL_ADC_EnableIT_JQOVF
7928:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7929:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7930:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7931:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_JQOVF(ADC_TypeDef *ADCx)
7932:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7933:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_JQOVF);
7934:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7935:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7936:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7937:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable interruption ADC analog watchdog 1.
7938:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
7939:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7940:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7941:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7942:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
7943:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1727              		.loc 1 7943 1
 1728              		.cfi_startproc
 1729              		@ args = 0, pretend = 0, frame = 8
 1730              		@ frame_needed = 1, uses_anonymous_args = 0
 1731              		@ link register save eliminated.
 1732 0000 80B4     		push	{r7}
 1733              	.LCFI186:
 1734              		.cfi_def_cfa_offset 4
 1735              		.cfi_offset 7, -4
 1736 0002 83B0     		sub	sp, sp, #12
 1737              	.LCFI187:
 1738              		.cfi_def_cfa_offset 16
 1739 0004 00AF     		add	r7, sp, #0
 1740              	.LCFI188:
 1741              		.cfi_def_cfa_register 7
 1742 0006 7860     		str	r0, [r7, #4]
7944:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 1743              		.loc 1 7944 3
 1744 0008 7B68     		ldr	r3, [r7, #4]
 1745 000a 5B68     		ldr	r3, [r3, #4]
 1746 000c 43F08002 		orr	r2, r3, #128
 1747 0010 7B68     		ldr	r3, [r7, #4]
 1748 0012 5A60     		str	r2, [r3, #4]
7945:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1749              		.loc 1 7945 1
 1750 0014 00BF     		nop
 1751 0016 0C37     		adds	r7, r7, #12
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 170


 1752              	.LCFI189:
 1753              		.cfi_def_cfa_offset 4
 1754 0018 BD46     		mov	sp, r7
 1755              	.LCFI190:
 1756              		.cfi_def_cfa_register 13
 1757              		@ sp needed
 1758 001a 5DF8047B 		ldr	r7, [sp], #4
 1759              	.LCFI191:
 1760              		.cfi_restore 7
 1761              		.cfi_def_cfa_offset 0
 1762 001e 7047     		bx	lr
 1763              		.cfi_endproc
 1764              	.LFE308:
 1766              		.section	.text.LL_ADC_EnableIT_AWD2,"ax",%progbits
 1767              		.align	1
 1768              		.syntax unified
 1769              		.thumb
 1770              		.thumb_func
 1772              	LL_ADC_EnableIT_AWD2:
 1773              	.LFB309:
7946:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7947:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7948:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable interruption ADC analog watchdog 2.
7949:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
7950:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7951:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7952:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7953:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
7954:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1774              		.loc 1 7954 1
 1775              		.cfi_startproc
 1776              		@ args = 0, pretend = 0, frame = 8
 1777              		@ frame_needed = 1, uses_anonymous_args = 0
 1778              		@ link register save eliminated.
 1779 0000 80B4     		push	{r7}
 1780              	.LCFI192:
 1781              		.cfi_def_cfa_offset 4
 1782              		.cfi_offset 7, -4
 1783 0002 83B0     		sub	sp, sp, #12
 1784              	.LCFI193:
 1785              		.cfi_def_cfa_offset 16
 1786 0004 00AF     		add	r7, sp, #0
 1787              	.LCFI194:
 1788              		.cfi_def_cfa_register 7
 1789 0006 7860     		str	r0, [r7, #4]
7955:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 1790              		.loc 1 7955 3
 1791 0008 7B68     		ldr	r3, [r7, #4]
 1792 000a 5B68     		ldr	r3, [r3, #4]
 1793 000c 43F48072 		orr	r2, r3, #256
 1794 0010 7B68     		ldr	r3, [r7, #4]
 1795 0012 5A60     		str	r2, [r3, #4]
7956:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1796              		.loc 1 7956 1
 1797 0014 00BF     		nop
 1798 0016 0C37     		adds	r7, r7, #12
 1799              	.LCFI195:
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 171


 1800              		.cfi_def_cfa_offset 4
 1801 0018 BD46     		mov	sp, r7
 1802              	.LCFI196:
 1803              		.cfi_def_cfa_register 13
 1804              		@ sp needed
 1805 001a 5DF8047B 		ldr	r7, [sp], #4
 1806              	.LCFI197:
 1807              		.cfi_restore 7
 1808              		.cfi_def_cfa_offset 0
 1809 001e 7047     		bx	lr
 1810              		.cfi_endproc
 1811              	.LFE309:
 1813              		.section	.text.LL_ADC_EnableIT_AWD3,"ax",%progbits
 1814              		.align	1
 1815              		.syntax unified
 1816              		.thumb
 1817              		.thumb_func
 1819              	LL_ADC_EnableIT_AWD3:
 1820              	.LFB310:
7957:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7958:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7959:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable interruption ADC analog watchdog 3.
7960:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
7961:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7962:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7963:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7964:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
7965:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1821              		.loc 1 7965 1
 1822              		.cfi_startproc
 1823              		@ args = 0, pretend = 0, frame = 8
 1824              		@ frame_needed = 1, uses_anonymous_args = 0
 1825              		@ link register save eliminated.
 1826 0000 80B4     		push	{r7}
 1827              	.LCFI198:
 1828              		.cfi_def_cfa_offset 4
 1829              		.cfi_offset 7, -4
 1830 0002 83B0     		sub	sp, sp, #12
 1831              	.LCFI199:
 1832              		.cfi_def_cfa_offset 16
 1833 0004 00AF     		add	r7, sp, #0
 1834              	.LCFI200:
 1835              		.cfi_def_cfa_register 7
 1836 0006 7860     		str	r0, [r7, #4]
7966:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 1837              		.loc 1 7966 3
 1838 0008 7B68     		ldr	r3, [r7, #4]
 1839 000a 5B68     		ldr	r3, [r3, #4]
 1840 000c 43F40072 		orr	r2, r3, #512
 1841 0010 7B68     		ldr	r3, [r7, #4]
 1842 0012 5A60     		str	r2, [r3, #4]
7967:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1843              		.loc 1 7967 1
 1844 0014 00BF     		nop
 1845 0016 0C37     		adds	r7, r7, #12
 1846              	.LCFI201:
 1847              		.cfi_def_cfa_offset 4
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 172


 1848 0018 BD46     		mov	sp, r7
 1849              	.LCFI202:
 1850              		.cfi_def_cfa_register 13
 1851              		@ sp needed
 1852 001a 5DF8047B 		ldr	r7, [sp], #4
 1853              	.LCFI203:
 1854              		.cfi_restore 7
 1855              		.cfi_def_cfa_offset 0
 1856 001e 7047     		bx	lr
 1857              		.cfi_endproc
 1858              	.LFE310:
 1860              		.section	.text.LL_ADC_DisableIT_AWD1,"ax",%progbits
 1861              		.align	1
 1862              		.syntax unified
 1863              		.thumb
 1864              		.thumb_func
 1866              	LL_ADC_DisableIT_AWD1:
 1867              	.LFB319:
7968:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7969:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7970:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable interruption ADC ready.
7971:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      ADRDYIE        LL_ADC_DisableIT_ADRDY
7972:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7973:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7974:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7975:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_ADRDY(ADC_TypeDef *ADCx)
7976:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7977:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_ADRDY);
7978:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7979:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7980:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7981:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable interruption ADC group regular end of unitary conversion.
7982:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
7983:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7984:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7985:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7986:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
7987:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7988:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
7989:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7990:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7991:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7992:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable interruption ADC group regular end of sequence conversions.
7993:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      EOSIE          LL_ADC_DisableIT_EOS
7994:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7995:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7996:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7997:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
7998:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7999:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
8000:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
8001:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
8002:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
8003:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable interruption ADC group regular overrun.
8004:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      OVRIE          LL_ADC_DisableIT_OVR
8005:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
8006:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 173


8007:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
8008:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_OVR(ADC_TypeDef *ADCx)
8009:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
8010:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_OVR);
8011:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
8012:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
8013:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
8014:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable interruption ADC group regular end of sampling.
8015:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      EOSMPIE        LL_ADC_DisableIT_EOSMP
8016:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
8017:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
8018:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
8019:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_EOSMP(ADC_TypeDef *ADCx)
8020:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
8021:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOSMP);
8022:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
8023:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
8024:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
8025:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable interruption ADC group regular end of unitary conversion.
8026:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      JEOCIE         LL_ADC_DisableIT_JEOC
8027:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
8028:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
8029:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
8030:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
8031:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
8032:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
8033:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
8034:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
8035:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
8036:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable interruption ADC group injected end of sequence conversions.
8037:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      JEOSIE         LL_ADC_DisableIT_JEOS
8038:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
8039:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
8040:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
8041:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_JEOS(ADC_TypeDef *ADCx)
8042:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
8043:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOS);
8044:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
8045:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
8046:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
8047:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable interruption ADC group injected context queue overflow.
8048:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      JQOVFIE        LL_ADC_DisableIT_JQOVF
8049:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
8050:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
8051:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
8052:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_JQOVF(ADC_TypeDef *ADCx)
8053:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
8054:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_JQOVF);
8055:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
8056:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
8057:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
8058:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable interruption ADC analog watchdog 1.
8059:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
8060:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
8061:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
8062:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
8063:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 174


8064:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1868              		.loc 1 8064 1
 1869              		.cfi_startproc
 1870              		@ args = 0, pretend = 0, frame = 8
 1871              		@ frame_needed = 1, uses_anonymous_args = 0
 1872              		@ link register save eliminated.
 1873 0000 80B4     		push	{r7}
 1874              	.LCFI204:
 1875              		.cfi_def_cfa_offset 4
 1876              		.cfi_offset 7, -4
 1877 0002 83B0     		sub	sp, sp, #12
 1878              	.LCFI205:
 1879              		.cfi_def_cfa_offset 16
 1880 0004 00AF     		add	r7, sp, #0
 1881              	.LCFI206:
 1882              		.cfi_def_cfa_register 7
 1883 0006 7860     		str	r0, [r7, #4]
8065:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 1884              		.loc 1 8065 3
 1885 0008 7B68     		ldr	r3, [r7, #4]
 1886 000a 5B68     		ldr	r3, [r3, #4]
 1887 000c 23F08002 		bic	r2, r3, #128
 1888 0010 7B68     		ldr	r3, [r7, #4]
 1889 0012 5A60     		str	r2, [r3, #4]
8066:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1890              		.loc 1 8066 1
 1891 0014 00BF     		nop
 1892 0016 0C37     		adds	r7, r7, #12
 1893              	.LCFI207:
 1894              		.cfi_def_cfa_offset 4
 1895 0018 BD46     		mov	sp, r7
 1896              	.LCFI208:
 1897              		.cfi_def_cfa_register 13
 1898              		@ sp needed
 1899 001a 5DF8047B 		ldr	r7, [sp], #4
 1900              	.LCFI209:
 1901              		.cfi_restore 7
 1902              		.cfi_def_cfa_offset 0
 1903 001e 7047     		bx	lr
 1904              		.cfi_endproc
 1905              	.LFE319:
 1907              		.section	.text.LL_ADC_DisableIT_AWD2,"ax",%progbits
 1908              		.align	1
 1909              		.syntax unified
 1910              		.thumb
 1911              		.thumb_func
 1913              	LL_ADC_DisableIT_AWD2:
 1914              	.LFB320:
8067:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
8068:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
8069:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable interruption ADC analog watchdog 2.
8070:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
8071:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
8072:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
8073:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
8074:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
8075:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 175


 1915              		.loc 1 8075 1
 1916              		.cfi_startproc
 1917              		@ args = 0, pretend = 0, frame = 8
 1918              		@ frame_needed = 1, uses_anonymous_args = 0
 1919              		@ link register save eliminated.
 1920 0000 80B4     		push	{r7}
 1921              	.LCFI210:
 1922              		.cfi_def_cfa_offset 4
 1923              		.cfi_offset 7, -4
 1924 0002 83B0     		sub	sp, sp, #12
 1925              	.LCFI211:
 1926              		.cfi_def_cfa_offset 16
 1927 0004 00AF     		add	r7, sp, #0
 1928              	.LCFI212:
 1929              		.cfi_def_cfa_register 7
 1930 0006 7860     		str	r0, [r7, #4]
8076:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 1931              		.loc 1 8076 3
 1932 0008 7B68     		ldr	r3, [r7, #4]
 1933 000a 5B68     		ldr	r3, [r3, #4]
 1934 000c 23F48072 		bic	r2, r3, #256
 1935 0010 7B68     		ldr	r3, [r7, #4]
 1936 0012 5A60     		str	r2, [r3, #4]
8077:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1937              		.loc 1 8077 1
 1938 0014 00BF     		nop
 1939 0016 0C37     		adds	r7, r7, #12
 1940              	.LCFI213:
 1941              		.cfi_def_cfa_offset 4
 1942 0018 BD46     		mov	sp, r7
 1943              	.LCFI214:
 1944              		.cfi_def_cfa_register 13
 1945              		@ sp needed
 1946 001a 5DF8047B 		ldr	r7, [sp], #4
 1947              	.LCFI215:
 1948              		.cfi_restore 7
 1949              		.cfi_def_cfa_offset 0
 1950 001e 7047     		bx	lr
 1951              		.cfi_endproc
 1952              	.LFE320:
 1954              		.section	.text.LL_ADC_DisableIT_AWD3,"ax",%progbits
 1955              		.align	1
 1956              		.syntax unified
 1957              		.thumb
 1958              		.thumb_func
 1960              	LL_ADC_DisableIT_AWD3:
 1961              	.LFB321:
8078:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
8079:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
8080:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable interruption ADC analog watchdog 3.
8081:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
8082:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
8083:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
8084:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
8085:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
8086:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1962              		.loc 1 8086 1
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 176


 1963              		.cfi_startproc
 1964              		@ args = 0, pretend = 0, frame = 8
 1965              		@ frame_needed = 1, uses_anonymous_args = 0
 1966              		@ link register save eliminated.
 1967 0000 80B4     		push	{r7}
 1968              	.LCFI216:
 1969              		.cfi_def_cfa_offset 4
 1970              		.cfi_offset 7, -4
 1971 0002 83B0     		sub	sp, sp, #12
 1972              	.LCFI217:
 1973              		.cfi_def_cfa_offset 16
 1974 0004 00AF     		add	r7, sp, #0
 1975              	.LCFI218:
 1976              		.cfi_def_cfa_register 7
 1977 0006 7860     		str	r0, [r7, #4]
8087:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 1978              		.loc 1 8087 3
 1979 0008 7B68     		ldr	r3, [r7, #4]
 1980 000a 5B68     		ldr	r3, [r3, #4]
 1981 000c 23F40072 		bic	r2, r3, #512
 1982 0010 7B68     		ldr	r3, [r7, #4]
 1983 0012 5A60     		str	r2, [r3, #4]
8088:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1984              		.loc 1 8088 1
 1985 0014 00BF     		nop
 1986 0016 0C37     		adds	r7, r7, #12
 1987              	.LCFI219:
 1988              		.cfi_def_cfa_offset 4
 1989 0018 BD46     		mov	sp, r7
 1990              	.LCFI220:
 1991              		.cfi_def_cfa_register 13
 1992              		@ sp needed
 1993 001a 5DF8047B 		ldr	r7, [sp], #4
 1994              	.LCFI221:
 1995              		.cfi_restore 7
 1996              		.cfi_def_cfa_offset 0
 1997 001e 7047     		bx	lr
 1998              		.cfi_endproc
 1999              	.LFE321:
 2001              		.section	.text.HAL_ADC_Init,"ax",%progbits
 2002              		.align	1
 2003              		.global	HAL_ADC_Init
 2004              		.syntax unified
 2005              		.thumb
 2006              		.thumb_func
 2008              	HAL_ADC_Init:
 2009              	.LFB333:
 2010              		.file 2 "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c"
   1:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
   2:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   ******************************************************************************
   3:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @file    stm32h7xx_hal_adc.c
   4:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @author  MCD Application Team
   5:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief   This file provides firmware functions to manage the following
   6:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          functionalities of the Analog to Digital Converter (ADC)
   7:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          peripheral:
   8:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *           + Peripheral Control functions
   9:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *           + Peripheral State functions
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 177


  10:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          Other functions (extended functions) are available in file
  11:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          "stm32h7xx_hal_adc_ex.c".
  12:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *
  13:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   ******************************************************************************
  14:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @attention
  15:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *
  16:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * Copyright (c) 2017 STMicroelectronics.
  17:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * All rights reserved.
  18:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *
  19:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * This software is licensed under terms that can be found in the LICENSE file
  20:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * in the root directory of this software component.
  21:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  22:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *
  23:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   ******************************************************************************
  24:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   @verbatim
  25:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   ==============================================================================
  26:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      ##### ADC peripheral features #####
  27:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   ==============================================================================
  28:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   [..]
  29:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) 16-bit, 14-bit, 12-bit, 10-bit or 8-bit configurable resolution.
  30:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        Note: On devices STM32H72xx and STM32H73xx, these resolution are applicable to instances ADC
  31:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        ADC3 is featuring resolutions 12-bit, 10-bit, 8-bit, 6-bit.
  32:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  33:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) Interrupt generation at the end of regular conversion and in case of
  34:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       analog watchdog or overrun events.
  35:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  36:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) Single and continuous conversion modes.
  37:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  38:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) Scan mode for conversion of several channels sequentially.
  39:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  40:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) Data alignment with in-built data coherency.
  41:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  42:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) Programmable sampling time (channel wise)
  43:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  44:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) External trigger (timer or EXTI) with configurable polarity
  45:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  46:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) DMA request generation for transfer of conversions data of regular group.
  47:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  48:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) Configurable delay between conversions in Dual interleaved mode.
  49:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  50:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) ADC channels selectable single/differential input.
  51:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  52:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) ADC offset shared on 4 offset instances.
  53:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) ADC calibration
  54:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  55:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) ADC conversion of regular group.
  56:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  57:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) ADC supply requirements: 1.62 V to 3.6 V.
  58:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  59:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) ADC input range: from Vref- (connected to Vssa) to Vref+ (connected to
  60:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       Vdda or to an external voltage reference).
  61:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  62:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  63:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      ##### How to use this driver #####
  64:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   ==============================================================================
  65:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     [..]
  66:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 178


  67:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      *** Configuration of top level parameters related to ADC ***
  68:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      ============================================================
  69:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      [..]
  70:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  71:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) Enable the ADC interface
  72:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         (++) As prerequisite, ADC clock must be configured at RCC top level.
  73:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  74:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         (++) Two clock settings are mandatory:
  75:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****              (+++) ADC clock (core clock, also possibly conversion clock).
  76:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  77:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****              (+++) ADC clock (conversions clock).
  78:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    Two possible clock sources: synchronous clock derived from AHB clock
  79:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    or asynchronous clock derived from system clock, the PLL2 or the PLL3 running up
  80:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  81:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****              (+++) Example:
  82:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    Into HAL_ADC_MspInit() (recommended code location) or with
  83:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    other device clock parameters configuration:
  84:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                (+++) __HAL_RCC_ADC_CLK_ENABLE();                  (mandatory)
  85:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  86:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                RCC_ADCCLKSOURCE_PLL2 enable:                   (optional: if asynchronous clock sel
  87:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                (+++) RCC_PeriphClkInitTypeDef   RCC_PeriphClkInit;
  88:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                (+++) PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  89:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                (+++) PeriphClkInit.AdcClockSelection    = RCC_ADCCLKSOURCE_PLL2;
  90:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                (+++) HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
  91:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  92:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         (++) ADC clock source and clock prescaler are configured at ADC level with
  93:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****              parameter "ClockPrescaler" using function HAL_ADC_Init().
  94:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  95:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) ADC pins configuration
  96:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          (++) Enable the clock for the ADC GPIOs
  97:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_ENABLE()
  98:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          (++) Configure these ADC pins in analog mode
  99:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               using function HAL_GPIO_Init()
 100:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 101:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 102:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          (++) Configure the NVIC for ADC
 103:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 104:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler()
 105:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               into the function of corresponding ADC interruption vector
 106:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               ADCx_IRQHandler().
 107:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 108:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 109:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          (++) Configure the DMA (DMA channel, mode normal or circular, ...)
 110:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               using function HAL_DMA_Init().
 111:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          (++) Configure the NVIC for DMA
 112:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 113:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler()
 114:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               into the function of corresponding DMA interruption vector
 115:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               DMAx_Channelx_IRQHandler().
 116:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 117:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      *** Configuration of ADC, group regular, channels parameters ***
 118:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      ================================================================
 119:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      [..]
 120:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 121:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) Configure the ADC parameters (resolution, data alignment, ...)
 122:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         and regular group parameters (conversion trigger, sequencer, ...)
 123:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         using function HAL_ADC_Init().
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 179


 124:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 125:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) Configure the channels for regular group parameters (channel number,
 126:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         channel rank into sequencer, ..., into regular group)
 127:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         using function HAL_ADC_ConfigChannel().
 128:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 129:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) Optionally, configure the analog watchdog parameters (channels
 130:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         monitored, thresholds, ...)
 131:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         using function HAL_ADC_AnalogWDGConfig().
 132:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 133:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      *** Execution of ADC conversions ***
 134:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      ====================================
 135:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      [..]
 136:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 137:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) Optionally, perform an automatic ADC calibration to improve the
 138:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         conversion accuracy
 139:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         using function HAL_ADCEx_Calibration_Start().
 140:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 141:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) ADC driver can be used among three modes: polling, interruption,
 142:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         transfer by DMA.
 143:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 144:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         (++) ADC conversion by polling:
 145:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 146:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 using function HAL_ADC_Start()
 147:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (+++) Wait for ADC conversion completion
 148:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 using function HAL_ADC_PollForConversion()
 149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (+++) Retrieve conversion results
 150:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 151:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral
 152:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 using function HAL_ADC_Stop()
 153:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 154:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         (++) ADC conversion by interruption:
 155:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 156:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 using function HAL_ADC_Start_IT()
 157:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 158:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback()
 159:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 (this function must be implemented in user program)
 160:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (+++) Retrieve conversion results
 161:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 162:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral
 163:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
 164:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 165:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         (++) ADC conversion with transfer by DMA:
 166:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 167:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 using function HAL_ADC_Start_DMA()
 168:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 169:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 170:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 (these functions must be implemented in user program)
 171:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 172:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 destination variable address.
 173:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral
 174:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 using function HAL_ADC_Stop_DMA()
 175:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 176:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      [..]
 177:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 178:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (@) Callback functions must be implemented in user program:
 179:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+@) HAL_ADC_ErrorCallback()
 180:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+@) HAL_ADC_LevelOutOfWindowCallback() (callback of analog watchdog)
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 180


 181:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+@) HAL_ADC_ConvCpltCallback()
 182:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+@) HAL_ADC_ConvHalfCpltCallback
 183:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 184:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      *** Deinitialization of ADC ***
 185:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      ============================================================
 186:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      [..]
 187:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 188:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) Disable the ADC interface
 189:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (++) ADC clock can be hard reset and disabled at RCC top level.
 190:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         (++) Hard reset of ADC peripherals
 191:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****              using macro __HAL_RCC_ADCx_FORCE_RESET(), __HAL_RCC_ADCx_RELEASE_RESET().
 192:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         (++) ADC clock disable
 193:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****              using the equivalent macro/functions as configuration step.
 194:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****              (+++) Example:
 195:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    Into HAL_ADC_MspDeInit() (recommended code location) or with
 196:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    other device clock parameters configuration:
 197:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                (+++) __HAL_RCC_ADC_CLK_DISABLE();                  (if not used anymore)
 198:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                RCC_ADCCLKSOURCE_CLKP restore:                      (optional)
 199:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                (+++) RCC_PeriphClkInitTypeDef   RCC_PeriphClkInit;
 200:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                (+++) PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 201:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                (+++) PeriphClkInit.AdcClockSelection    = RCC_ADCCLKSOURCE_CLKP;
 202:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                (+++) HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 203:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 204:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) ADC pins configuration
 205:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          (++) Disable the clock for the ADC GPIOs
 206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_DISABLE()
 207:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 208:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 209:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          (++) Disable the NVIC for ADC
 210:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 211:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 212:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 213:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          (++) Deinitialize the DMA
 214:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               using function HAL_DMA_Init().
 215:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          (++) Disable the NVIC for DMA
 216:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 217:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 218:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     [..]
 219:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 220:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     *** Callback registration ***
 221:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     =============================================
 222:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     [..]
 223:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 224:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      The compilation flag USE_HAL_ADC_REGISTER_CALLBACKS, when set to 1,
 225:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      allows the user to configure dynamically the driver callbacks.
 226:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      Use Functions HAL_ADC_RegisterCallback()
 227:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      to register an interrupt callback.
 228:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     [..]
 229:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 230:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      Function HAL_ADC_RegisterCallback() allows to register following callbacks:
 231:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) ConvCpltCallback               : ADC conversion complete callback
 232:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) ConvHalfCpltCallback           : ADC conversion DMA half-transfer callback
 233:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) LevelOutOfWindowCallback       : ADC analog watchdog 1 callback
 234:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) ErrorCallback                  : ADC error callback
 235:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) InjectedConvCpltCallback       : ADC group injected conversion complete callback
 236:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) InjectedQueueOverflowCallback  : ADC group injected context queue overflow callback
 237:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) LevelOutOfWindow2Callback      : ADC analog watchdog 2 callback
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 181


 238:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) LevelOutOfWindow3Callback      : ADC analog watchdog 3 callback
 239:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) EndOfSamplingCallback          : ADC end of sampling callback
 240:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) MspInitCallback                : ADC Msp Init callback
 241:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) MspDeInitCallback              : ADC Msp DeInit callback
 242:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      This function takes as parameters the HAL peripheral handle, the Callback ID
 243:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      and a pointer to the user callback function.
 244:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     [..]
 245:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 246:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      Use function HAL_ADC_UnRegisterCallback to reset a callback to the default
 247:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      weak function.
 248:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     [..]
 249:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 250:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      HAL_ADC_UnRegisterCallback takes as parameters the HAL peripheral handle,
 251:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      and the Callback ID.
 252:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      This function allows to reset following callbacks:
 253:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) ConvCpltCallback               : ADC conversion complete callback
 254:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) ConvHalfCpltCallback           : ADC conversion DMA half-transfer callback
 255:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) LevelOutOfWindowCallback       : ADC analog watchdog 1 callback
 256:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) ErrorCallback                  : ADC error callback
 257:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) InjectedConvCpltCallback       : ADC group injected conversion complete callback
 258:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) InjectedQueueOverflowCallback  : ADC group injected context queue overflow callback
 259:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) LevelOutOfWindow2Callback      : ADC analog watchdog 2 callback
 260:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) LevelOutOfWindow3Callback      : ADC analog watchdog 3 callback
 261:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) EndOfSamplingCallback          : ADC end of sampling callback
 262:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) MspInitCallback                : ADC Msp Init callback
 263:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) MspDeInitCallback              : ADC Msp DeInit callback
 264:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      [..]
 265:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 266:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      By default, after the HAL_ADC_Init() and when the state is HAL_ADC_STATE_RESET
 267:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      all callbacks are set to the corresponding weak functions:
 268:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      examples HAL_ADC_ConvCpltCallback(), HAL_ADC_ErrorCallback().
 269:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      Exception done for MspInit and MspDeInit functions that are
 270:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      reset to the legacy weak functions in the HAL_ADC_Init()/ HAL_ADC_DeInit() only when
 271:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      these callbacks are null (not registered beforehand).
 272:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     [..]
 273:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 274:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      If MspInit or MspDeInit are not null, the HAL_ADC_Init()/ HAL_ADC_DeInit()
 275:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      keep and use the user MspInit/MspDeInit callbacks (registered beforehand) whatever the state.
 276:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      [..]
 277:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 278:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      Callbacks can be registered/unregistered in HAL_ADC_STATE_READY state only.
 279:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      Exception done MspInit/MspDeInit functions that can be registered/unregistered
 280:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      in HAL_ADC_STATE_READY or HAL_ADC_STATE_RESET state,
 281:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
 282:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     [..]
 283:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 284:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      Then, the user first registers the MspInit/MspDeInit user callbacks
 285:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      using HAL_ADC_RegisterCallback() before calling HAL_ADC_DeInit()
 286:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      or HAL_ADC_Init() function.
 287:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      [..]
 288:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 289:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      When the compilation flag USE_HAL_ADC_REGISTER_CALLBACKS is set to 0 or
 290:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      not defined, the callback registration feature is not available and all callbacks
 291:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      are set to the corresponding weak functions.
 292:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 293:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   @endverbatim
 294:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   ******************************************************************************
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 182


 295:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
 296:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 297:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /* Includes ------------------------------------------------------------------*/
 298:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #include "stm32h7xx_hal.h"
 299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 300:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /** @addtogroup STM32H7xx_HAL_Driver
 301:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @{
 302:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
 303:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 304:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /** @defgroup ADC ADC
 305:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief ADC HAL module driver
 306:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @{
 307:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
 308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 309:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #ifdef HAL_ADC_MODULE_ENABLED
 310:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 311:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /* Private typedef -----------------------------------------------------------*/
 312:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /* Private define ------------------------------------------------------------*/
 313:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 314:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /** @defgroup ADC_Private_Constants ADC Private Constants
 315:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @{
 316:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
 317:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #define ADC_CFGR_FIELDS_1  ((uint32_t)(ADC_CFGR_RES    |\
 318:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                        ADC_CFGR_CONT   | ADC_CFGR_OVRMOD  |\
 319:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                        ADC_CFGR_DISCEN | ADC_CFGR_DISCNUM |\
 320:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                        ADC_CFGR_EXTEN  | ADC_CFGR_EXTSEL)) /*!< ADC_CFGR fields of 
 321:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                                                                   when no regular c
 322:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 323:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
 324:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #define ADC3_CFGR_FIELDS_1  ((ADC3_CFGR_RES    | ADC3_CFGR_ALIGN   |\
 325:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                              ADC_CFGR_CONT   | ADC_CFGR_OVRMOD  |\
 326:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                              ADC_CFGR_DISCEN | ADC_CFGR_DISCNUM |\
 327:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                              ADC_CFGR_EXTEN  | ADC_CFGR_EXTSEL))   /*!< ADC_CFGR fields of paramete
 328:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                                                         when no regular conversion 
 329:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif
 330:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 331:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #define ADC_CFGR2_FIELDS  ((uint32_t)(ADC_CFGR2_ROVSE | ADC_CFGR2_OVSR  |\
 332:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                        ADC_CFGR2_OVSS | ADC_CFGR2_TROVS |\
 333:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                        ADC_CFGR2_ROVSM))                     /*!< ADC_CFGR2 fields 
 334:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                                                                  (neither regular n
 335:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 336:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /* Timeout values for ADC operations (enable settling time,                   */
 337:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /*   disable settling time, ...).                                             */
 338:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /*   Values defined to be higher than worst cases: low clock frequency,       */
 339:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /*   maximum prescalers.                                                      */
 340:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #define ADC_ENABLE_TIMEOUT              (2UL)    /*!< ADC enable time-out value  */
 341:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #define ADC_DISABLE_TIMEOUT             (2UL)    /*!< ADC disable time-out value */
 342:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 343:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /* Timeout to wait for current conversion on going to be completed.           */
 344:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /* Timeout fixed to worst case, for 1 channel.                                */
 345:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /*   - maximum sampling time (830.5 adc_clk)                                  */
 346:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /*   - ADC resolution (Tsar 16 bits= 16.5 adc_clk)                            */
 347:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /*   - ADC clock with prescaler 256                                           */
 348:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /*     823 * 256 = 210688 clock cycles max                                    */
 349:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /* Unit: cycles of CPU clock.                                                 */
 350:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #define ADC_CONVERSION_TIME_MAX_CPU_CYCLES (210688UL)  /*!< ADC conversion completion time-out valu
 351:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 183


 352:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
 353:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @}
 354:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
 355:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 356:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /* Private macro -------------------------------------------------------------*/
 357:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /* Private variables ---------------------------------------------------------*/
 358:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /* Private function prototypes -----------------------------------------------*/
 359:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /* Exported functions --------------------------------------------------------*/
 360:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 361:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions ADC Exported Functions
 362:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @{
 363:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
 364:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 365:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group1 Initialization and de-initialization functions
 366:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief    ADC Initialization and Configuration functions
 367:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *
 368:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** @verbatim
 369:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****  ===============================================================================
 370:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               ##### Initialization and de-initialization functions #####
 371:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****  ===============================================================================
 372:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 373:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Initialize and configure the ADC.
 374:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) De-initialize the ADC.
 375:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** @endverbatim
 376:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @{
 377:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
 378:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 379:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
 380:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Initialize the ADC peripheral and regular group according to
 381:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         parameters specified in structure "ADC_InitTypeDef".
 382:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   As prerequisite, ADC clock must be configured at RCC top level
 383:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         (refer to description of RCC configuration for ADC
 384:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         in header of this file).
 385:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
 386:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         This function initializes the ADC MSP (HAL_ADC_MspInit()) only when
 387:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         coming from ADC state reset. Following calls to this function can
 388:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         be used to reconfigure some parameters of ADC_InitTypeDef
 389:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         structure on the fly, without modifying MSP configuration. If ADC
 390:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         MSP has to be modified again, HAL_ADC_DeInit() must be called
 391:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         before HAL_ADC_Init().
 392:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
 393:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         For parameters constraints, see comments of structure
 394:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         "ADC_InitTypeDef".
 395:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   This function configures the ADC within 2 scopes: scope of entire
 396:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         ADC and scope of regular group. For parameters details, see comments
 397:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         of structure "ADC_InitTypeDef".
 398:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Parameters related to common ADC registers (ADC clock mode) are set
 399:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         only if all ADCs are disabled.
 400:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         If this is not the case, these common parameters setting are
 401:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         bypassed without error reporting: it can be the intended behaviour in
 402:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         case of update of a parameter of ADC_InitTypeDef on the fly,
 403:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         without  disabling the other ADCs.
 404:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
 405:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status
 406:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
 407:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
 408:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 184


 2011              		.loc 2 408 1
 2012              		.cfi_startproc
 2013              		@ args = 0, pretend = 0, frame = 32
 2014              		@ frame_needed = 1, uses_anonymous_args = 0
 2015 0000 90B5     		push	{r4, r7, lr}
 2016              	.LCFI222:
 2017              		.cfi_def_cfa_offset 12
 2018              		.cfi_offset 4, -12
 2019              		.cfi_offset 7, -8
 2020              		.cfi_offset 14, -4
 2021 0002 89B0     		sub	sp, sp, #36
 2022              	.LCFI223:
 2023              		.cfi_def_cfa_offset 48
 2024 0004 00AF     		add	r7, sp, #0
 2025              	.LCFI224:
 2026              		.cfi_def_cfa_register 7
 2027 0006 7860     		str	r0, [r7, #4]
 409:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2028              		.loc 2 409 21
 2029 0008 0023     		movs	r3, #0
 2030 000a FB77     		strb	r3, [r7, #31]
 410:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmpCFGR;
 411:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_adc_reg_is_conversion_on_going;
 412:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0UL;
 2031              		.loc 2 412 17
 2032 000c 0023     		movs	r3, #0
 2033 000e BB60     		str	r3, [r7, #8]
 413:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
 414:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_injected;
 415:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 416:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check ADC handle */
 417:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (hadc == NULL)
 2034              		.loc 2 417 6
 2035 0010 7B68     		ldr	r3, [r7, #4]
 2036 0012 002B     		cmp	r3, #0
 2037 0014 01D1     		bne	.L84
 418:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 419:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     return HAL_ERROR;
 2038              		.loc 2 419 12
 2039 0016 0123     		movs	r3, #1
 2040 0018 8FE1     		b	.L85
 2041              	.L84:
 420:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 421:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 422:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
 423:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 424:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 425:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 426:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 427:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 428:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 429:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 430:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_CONVERSIONDATAMGT(hadc->Init.ConversionDataManagement));
 431:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 432:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 433:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 434:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 185


 435:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 436:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 2042              		.loc 2 436 17
 2043 001a 7B68     		ldr	r3, [r7, #4]
 2044 001c DB68     		ldr	r3, [r3, #12]
 2045              		.loc 2 436 6
 2046 001e 002B     		cmp	r3, #0
 437:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 438:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 439:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 440:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 441:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Init.DiscontinuousConvMode == ENABLE)
 442:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 443:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 444:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 445:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 446:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 447:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* DISCEN and CONT bits cannot be set at the same time */
 448:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == 
 449:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 450:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Actions performed only if ADC is coming from state reset:                */
 451:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* - Initialization of ADC MSP                                              */
 452:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (hadc->State == HAL_ADC_STATE_RESET)
 2047              		.loc 2 452 11
 2048 0020 7B68     		ldr	r3, [r7, #4]
 2049 0022 5B6D     		ldr	r3, [r3, #84]
 2050              		.loc 2 452 6
 2051 0024 002B     		cmp	r3, #0
 2052 0026 09D1     		bne	.L87
 453:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 454:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 455:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Init the ADC Callback settings */
 456:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak 
 457:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak 
 458:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak 
 459:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak 
 460:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak 
 461:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;  /* Legacy weak 
 462:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak 
 463:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak 
 464:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak 
 465:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 466:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->MspInitCallback == NULL)
 467:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 468:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 469:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 470:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 471:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Init the low level hardware */
 472:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->MspInitCallback(hadc);
 473:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
 474:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Init the low level hardware */
 475:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     HAL_ADC_MspInit(hadc);
 2053              		.loc 2 475 5
 2054 0028 7868     		ldr	r0, [r7, #4]
 2055 002a FFF7FEFF 		bl	HAL_ADC_MspInit
 476:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 477:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 186


 478:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Set ADC error code to none */
 479:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 2056              		.loc 2 479 5
 2057 002e 7B68     		ldr	r3, [r7, #4]
 2058 0030 0022     		movs	r2, #0
 2059 0032 9A65     		str	r2, [r3, #88]
 480:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 481:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Initialize Lock */
 482:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->Lock = HAL_UNLOCKED;
 2060              		.loc 2 482 16
 2061 0034 7B68     		ldr	r3, [r7, #4]
 2062 0036 0022     		movs	r2, #0
 2063 0038 83F85020 		strb	r2, [r3, #80]
 2064              	.L87:
 483:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 484:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 485:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
 486:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 2065              		.loc 2 486 7
 2066 003c 7B68     		ldr	r3, [r7, #4]
 2067 003e 1B68     		ldr	r3, [r3]
 2068 0040 1846     		mov	r0, r3
 2069 0042 FFF7FEFF 		bl	LL_ADC_IsDeepPowerDownEnabled
 2070 0046 0346     		mov	r3, r0
 2071              		.loc 2 486 6
 2072 0048 002B     		cmp	r3, #0
 2073 004a 04D0     		beq	.L88
 487:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 488:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Disable ADC deep power down mode */
 489:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     LL_ADC_DisableDeepPowerDown(hadc->Instance);
 2074              		.loc 2 489 5
 2075 004c 7B68     		ldr	r3, [r7, #4]
 2076 004e 1B68     		ldr	r3, [r3]
 2077 0050 1846     		mov	r0, r3
 2078 0052 FFF7FEFF 		bl	LL_ADC_DisableDeepPowerDown
 2079              	.L88:
 490:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 491:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* System was in deep power down mode, calibration must
 492:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      be relaunched or a previously saved calibration factor
 493:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      re-applied once the ADC voltage regulator is enabled */
 494:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 495:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 496:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 2080              		.loc 2 496 7
 2081 0056 7B68     		ldr	r3, [r7, #4]
 2082 0058 1B68     		ldr	r3, [r3]
 2083 005a 1846     		mov	r0, r3
 2084 005c FFF7FEFF 		bl	LL_ADC_IsInternalRegulatorEnabled
 2085 0060 0346     		mov	r3, r0
 2086              		.loc 2 496 6
 2087 0062 002B     		cmp	r3, #0
 2088 0064 14D1     		bne	.L89
 497:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 498:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Enable ADC internal voltage regulator */
 499:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     LL_ADC_EnableInternalRegulator(hadc->Instance);
 2089              		.loc 2 499 5
 2090 0066 7B68     		ldr	r3, [r7, #4]
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 187


 2091 0068 1B68     		ldr	r3, [r3]
 2092 006a 1846     		mov	r0, r3
 2093 006c FFF7FEFF 		bl	LL_ADC_EnableInternalRegulator
 500:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 501:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Note: Variable divided by 2 to compensate partially              */
 502:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*       CPU processing cycles, scaling in us split to not          */
 503:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*       exceed 32 bits register capacity and handle low frequency. */
 504:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL
 2094              		.loc 2 504 89
 2095 0070 874B     		ldr	r3, .L112
 2096 0072 1B68     		ldr	r3, [r3]
 2097 0074 9B09     		lsrs	r3, r3, #6
 2098 0076 874A     		ldr	r2, .L112+4
 2099 0078 A2FB0323 		umull	r2, r3, r2, r3
 2100 007c 9B09     		lsrs	r3, r3, #6
 2101              		.loc 2 504 69
 2102 007e 0133     		adds	r3, r3, #1
 2103              		.loc 2 504 21
 2104 0080 BB60     		str	r3, [r7, #8]
 505:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     while (wait_loop_index != 0UL)
 2105              		.loc 2 505 11
 2106 0082 02E0     		b	.L90
 2107              	.L91:
 506:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 507:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       wait_loop_index--;
 2108              		.loc 2 507 22
 2109 0084 BB68     		ldr	r3, [r7, #8]
 2110 0086 013B     		subs	r3, r3, #1
 2111 0088 BB60     		str	r3, [r7, #8]
 2112              	.L90:
 505:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     while (wait_loop_index != 0UL)
 2113              		.loc 2 505 28
 2114 008a BB68     		ldr	r3, [r7, #8]
 505:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     while (wait_loop_index != 0UL)
 2115              		.loc 2 505 11
 2116 008c 002B     		cmp	r3, #0
 2117 008e F9D1     		bne	.L91
 2118              	.L89:
 508:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 509:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 510:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 511:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Verification that ADC voltage regulator is correctly enabled, whether    */
 512:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* or not ADC is coming from state reset (if any potential problem of       */
 513:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* clocking, voltage regulator would not be enabled).                       */
 514:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 2119              		.loc 2 514 7
 2120 0090 7B68     		ldr	r3, [r7, #4]
 2121 0092 1B68     		ldr	r3, [r3]
 2122 0094 1846     		mov	r0, r3
 2123 0096 FFF7FEFF 		bl	LL_ADC_IsInternalRegulatorEnabled
 2124 009a 0346     		mov	r3, r0
 2125              		.loc 2 514 6
 2126 009c 002B     		cmp	r3, #0
 2127 009e 0DD1     		bne	.L92
 515:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 516:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Update ADC state machine to error */
 517:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 188


 2128              		.loc 2 517 5
 2129 00a0 7B68     		ldr	r3, [r7, #4]
 2130 00a2 5B6D     		ldr	r3, [r3, #84]
 2131 00a4 43F01002 		orr	r2, r3, #16
 2132 00a8 7B68     		ldr	r3, [r7, #4]
 2133 00aa 5A65     		str	r2, [r3, #84]
 518:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 519:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Set ADC error code to ADC peripheral internal error */
 520:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 2134              		.loc 2 520 5
 2135 00ac 7B68     		ldr	r3, [r7, #4]
 2136 00ae 9B6D     		ldr	r3, [r3, #88]
 2137 00b0 43F00102 		orr	r2, r3, #1
 2138 00b4 7B68     		ldr	r3, [r7, #4]
 2139 00b6 9A65     		str	r2, [r3, #88]
 521:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 522:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 2140              		.loc 2 522 20
 2141 00b8 0123     		movs	r3, #1
 2142 00ba FB77     		strb	r3, [r7, #31]
 2143              	.L92:
 523:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 524:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 525:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */
 526:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* correctly completed and if there is no conversion on going on regular    */
 527:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
 528:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* called to update a parameter on the fly).                                */
 529:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 2144              		.loc 2 529 40
 2145 00bc 7B68     		ldr	r3, [r7, #4]
 2146 00be 1B68     		ldr	r3, [r3]
 2147 00c0 1846     		mov	r0, r3
 2148 00c2 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 2149 00c6 7861     		str	r0, [r7, #20]
 530:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 531:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 2150              		.loc 2 531 13
 2151 00c8 7B68     		ldr	r3, [r7, #4]
 2152 00ca 5B6D     		ldr	r3, [r3, #84]
 2153              		.loc 2 531 21
 2154 00cc 03F01003 		and	r3, r3, #16
 2155              		.loc 2 531 6
 2156 00d0 002B     		cmp	r3, #0
 2157 00d2 40F02981 		bne	.L93
 532:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       && (tmp_adc_reg_is_conversion_on_going == 0UL)
 2158              		.loc 2 532 7
 2159 00d6 7B69     		ldr	r3, [r7, #20]
 2160 00d8 002B     		cmp	r3, #0
 2161 00da 40F02581 		bne	.L93
 533:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      )
 534:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 535:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Set ADC state */
 536:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 2162              		.loc 2 536 5
 2163 00de 7B68     		ldr	r3, [r7, #4]
 2164 00e0 5B6D     		ldr	r3, [r3, #84]
 2165 00e2 23F48173 		bic	r3, r3, #258
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 189


 2166 00e6 43F00202 		orr	r2, r3, #2
 2167 00ea 7B68     		ldr	r3, [r7, #4]
 2168 00ec 5A65     		str	r2, [r3, #84]
 537:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY,
 538:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 539:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 540:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Configuration of common ADC parameters                                 */
 541:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 542:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Parameters update conditioned to ADC state:                            */
 543:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Parameters that can be updated only when ADC is disabled:              */
 544:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - clock configuration                                                 */
 545:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 2169              		.loc 2 545 9
 2170 00ee 7B68     		ldr	r3, [r7, #4]
 2171 00f0 1B68     		ldr	r3, [r3]
 2172 00f2 1846     		mov	r0, r3
 2173 00f4 FFF7FEFF 		bl	LL_ADC_IsEnabled
 2174 00f8 0346     		mov	r3, r0
 2175              		.loc 2 545 8
 2176 00fa 002B     		cmp	r3, #0
 2177 00fc 36D1     		bne	.L94
 546:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 547:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 2178              		.loc 2 547 11
 2179 00fe 7B68     		ldr	r3, [r7, #4]
 2180 0100 1B68     		ldr	r3, [r3]
 2181              		.loc 2 547 93
 2182 0102 654A     		ldr	r2, .L112+8
 2183 0104 9342     		cmp	r3, r2
 2184 0106 04D0     		beq	.L95
 2185              		.loc 2 547 11 discriminator 2
 2186 0108 7B68     		ldr	r3, [r7, #4]
 2187 010a 1B68     		ldr	r3, [r3]
 2188 010c 634A     		ldr	r2, .L112+12
 2189 010e 9342     		cmp	r3, r2
 2190 0110 0ED1     		bne	.L96
 2191              	.L95:
 2192              		.loc 2 547 11 is_stmt 0 discriminator 3
 2193 0112 6148     		ldr	r0, .L112+8
 2194 0114 FFF7FEFF 		bl	LL_ADC_IsEnabled
 2195 0118 0446     		mov	r4, r0
 2196 011a 6048     		ldr	r0, .L112+12
 2197 011c FFF7FEFF 		bl	LL_ADC_IsEnabled
 2198 0120 0346     		mov	r3, r0
 2199 0122 2343     		orrs	r3, r3, r4
 2200              		.loc 2 547 93 is_stmt 1 discriminator 3
 2201 0124 002B     		cmp	r3, #0
 2202 0126 0CBF     		ite	eq
 2203 0128 0123     		moveq	r3, #1
 2204 012a 0023     		movne	r3, #0
 2205 012c DBB2     		uxtb	r3, r3
 2206 012e 08E0     		b	.L97
 2207              	.L96:
 2208              		.loc 2 547 11 discriminator 4
 2209 0130 5B48     		ldr	r0, .L112+16
 2210 0132 FFF7FEFF 		bl	LL_ADC_IsEnabled
 2211 0136 0346     		mov	r3, r0
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 190


 2212              		.loc 2 547 93 discriminator 4
 2213 0138 002B     		cmp	r3, #0
 2214 013a 0CBF     		ite	eq
 2215 013c 0123     		moveq	r3, #1
 2216 013e 0023     		movne	r3, #0
 2217 0140 DBB2     		uxtb	r3, r3
 2218              	.L97:
 2219              		.loc 2 547 10 discriminator 6
 2220 0142 002B     		cmp	r3, #0
 2221 0144 12D0     		beq	.L94
 548:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 549:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Reset configuration of ADC common register CCR:                      */
 550:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*                                                                      */
 551:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*   - ADC clock mode and ACC prescaler (CKMODE and PRESC bits)are set  */
 552:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*     according to adc->Init.ClockPrescaler. It selects the clock      */
 553:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*    source and sets the clock division factor.                        */
 554:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*                                                                      */
 555:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Some parameters of this register are not reset, since they are set   */
 556:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* by other functions and must be kept in case of usage of this         */
 557:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* function on the fly (update of a parameter of ADC_InitTypeDef        */
 558:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* without needing to reconfigure all other ADC groups/channels         */
 559:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* parameters):                                                         */
 560:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*   - when multimode feature is available, multimode-related           */
 561:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
 562:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
 563:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
 564:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*     (set into HAL_ADC_ConfigChannel() or                             */
 565:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*     HAL_ADCEx_InjectedConfigChannel() )                              */
 566:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 2222              		.loc 2 566 31
 2223 0146 7B68     		ldr	r3, [r7, #4]
 2224 0148 1B68     		ldr	r3, [r3]
 2225              		.loc 2 566 9
 2226 014a 534A     		ldr	r2, .L112+8
 2227 014c 9342     		cmp	r3, r2
 2228 014e 04D0     		beq	.L98
 2229              		.loc 2 566 31 discriminator 2
 2230 0150 7B68     		ldr	r3, [r7, #4]
 2231 0152 1B68     		ldr	r3, [r3]
 2232 0154 514A     		ldr	r2, .L112+12
 2233 0156 9342     		cmp	r3, r2
 2234 0158 01D1     		bne	.L99
 2235              	.L98:
 2236              		.loc 2 566 9 discriminator 3
 2237 015a 524A     		ldr	r2, .L112+20
 2238 015c 00E0     		b	.L100
 2239              	.L99:
 2240              		.loc 2 566 9 is_stmt 0 discriminator 4
 2241 015e 524A     		ldr	r2, .L112+24
 2242              	.L100:
 2243              		.loc 2 566 9 discriminator 6
 2244 0160 7B68     		ldr	r3, [r7, #4]
 2245 0162 5B68     		ldr	r3, [r3, #4]
 2246 0164 1946     		mov	r1, r3
 2247 0166 1046     		mov	r0, r2
 2248 0168 FFF7FEFF 		bl	LL_ADC_SetCommonClock
 2249              	.L94:
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 191


 567:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 568:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 569:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 570:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Configuration of ADC:                                                  */
 571:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - resolution                               Init.Resolution            */
 572:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - external trigger to start conversion     Init.ExternalTrigConv      */
 573:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
 574:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - continuous conversion mode               Init.ContinuousConvMode    */
 575:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - overrun                                  Init.Overrun               */
 576:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - discontinuous mode                       Init.DiscontinuousConvMode */
 577:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
 578:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_3)
 579:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 580:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 581:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 hadc->Init.Overrun                                                    |
 582:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 hadc->Init.Resolution                                                 |
 583:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 584:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 585:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #elif defined(ADC_VER_V5_V90)
 586:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Instance == ADC3)
 587:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 588:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 589:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Overrun                                                     |
 590:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.DataAlign                                                   |
 591:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_C
 592:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 593:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 594:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
 595:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 596:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 597:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Overrun                                                    |
 598:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Resolution                                                 |
 599:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 600:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 601:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 602:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
 603:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 604:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 2250              		.loc 2 604 10 is_stmt 1
 2251 016c FFF7FEFF 		bl	HAL_GetREVID
 2252 0170 0346     		mov	r3, r0
 2253              		.loc 2 604 8
 2254 0172 41F20302 		movw	r2, #4099
 2255 0176 9342     		cmp	r3, r2
 2256 0178 14D9     		bls	.L101
 2257              		.loc 2 604 72 discriminator 1
 2258 017a 7B68     		ldr	r3, [r7, #4]
 2259 017c 9B68     		ldr	r3, [r3, #8]
 2260              		.loc 2 604 37 discriminator 1
 2261 017e 102B     		cmp	r3, #16
 2262 0180 10D1     		bne	.L101
 605:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 606:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
 607:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 2263              		.loc 2 607 19
 2264 0182 7B68     		ldr	r3, [r7, #4]
 2265 0184 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 192


 2266 0186 5A03     		lsls	r2, r3, #13
 608:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Overrun                                                    |
 2267              		.loc 2 608 29
 2268 0188 7B68     		ldr	r3, [r7, #4]
 2269 018a 1B6B     		ldr	r3, [r3, #48]
 607:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Overrun                                                    |
 2270              		.loc 2 607 89
 2271 018c 1A43     		orrs	r2, r2, r3
 609:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 2272              		.loc 2 609 29
 2273 018e 7B68     		ldr	r3, [r7, #4]
 2274 0190 9B68     		ldr	r3, [r3, #8]
 608:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Overrun                                                    |
 2275              		.loc 2 608 89
 2276 0192 1A43     		orrs	r2, r2, r3
 610:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 2277              		.loc 2 610 19
 2278 0194 7B68     		ldr	r3, [r7, #4]
 2279 0196 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 2280 0198 1B04     		lsls	r3, r3, #16
 609:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 2281              		.loc 2 609 92
 2282 019a 1343     		orrs	r3, r3, r2
 607:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Overrun                                                    |
 2283              		.loc 2 607 16
 2284 019c 43F00C03 		orr	r3, r3, #12
 2285 01a0 BB61     		str	r3, [r7, #24]
 2286 01a2 0DE0     		b	.L102
 2287              	.L101:
 611:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 612:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
 613:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 614:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 615:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 2288              		.loc 2 615 19
 2289 01a4 7B68     		ldr	r3, [r7, #4]
 2290 01a6 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
 2291 01a8 5A03     		lsls	r2, r3, #13
 616:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Overrun                                                    |
 2292              		.loc 2 616 29
 2293 01aa 7B68     		ldr	r3, [r7, #4]
 2294 01ac 1B6B     		ldr	r3, [r3, #48]
 615:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Overrun                                                    |
 2295              		.loc 2 615 89
 2296 01ae 1A43     		orrs	r2, r2, r3
 617:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Resolution                                                 |
 2297              		.loc 2 617 29
 2298 01b0 7B68     		ldr	r3, [r7, #4]
 2299 01b2 9B68     		ldr	r3, [r3, #8]
 616:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Overrun                                                    |
 2300              		.loc 2 616 89
 2301 01b4 1A43     		orrs	r2, r2, r3
 618:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 2302              		.loc 2 618 19
 2303 01b6 7B68     		ldr	r3, [r7, #4]
 2304 01b8 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 2305 01ba 1B04     		lsls	r3, r3, #16
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 193


 615:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Overrun                                                    |
 2306              		.loc 2 615 16
 2307 01bc 1343     		orrs	r3, r3, r2
 2308 01be BB61     		str	r3, [r7, #24]
 2309              	.L102:
 619:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 620:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 621:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* ADC_VER_V5_3 */
 622:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 623:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Init.DiscontinuousConvMode == ENABLE)
 2310              		.loc 2 623 19
 2311 01c0 7B68     		ldr	r3, [r7, #4]
 2312 01c2 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 2313              		.loc 2 623 8
 2314 01c4 012B     		cmp	r3, #1
 2315 01c6 06D1     		bne	.L103
 624:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 625:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 2316              		.loc 2 625 18
 2317 01c8 7B68     		ldr	r3, [r7, #4]
 2318 01ca 1B6A     		ldr	r3, [r3, #32]
 2319 01cc 013B     		subs	r3, r3, #1
 2320 01ce 5B04     		lsls	r3, r3, #17
 2321              		.loc 2 625 15
 2322 01d0 BA69     		ldr	r2, [r7, #24]
 2323 01d2 1343     		orrs	r3, r3, r2
 2324 01d4 BB61     		str	r3, [r7, #24]
 2325              	.L103:
 626:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 627:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 628:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Enable external trigger if trigger selection is different of software  */
 629:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* start.                                                                 */
 630:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Note: This configuration keeps the hardware feature of parameter       */
 631:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
 632:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*       software start.                                                  */
 633:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 2326              		.loc 2 633 19
 2327 01d6 7B68     		ldr	r3, [r7, #4]
 2328 01d8 5B6A     		ldr	r3, [r3, #36]
 2329              		.loc 2 633 8
 2330 01da 002B     		cmp	r3, #0
 2331 01dc 09D0     		beq	.L104
 634:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 635:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 2332              		.loc 2 635 30
 2333 01de 7B68     		ldr	r3, [r7, #4]
 2334 01e0 5B6A     		ldr	r3, [r3, #36]
 2335              		.loc 2 635 48
 2336 01e2 03F47872 		and	r2, r3, #992
 636:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   | hadc->Init.ExternalTrigConvEdge
 2337              		.loc 2 636 31
 2338 01e6 7B68     		ldr	r3, [r7, #4]
 2339 01e8 9B6A     		ldr	r3, [r3, #40]
 2340              		.loc 2 636 19
 2341 01ea 1343     		orrs	r3, r3, r2
 635:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   | hadc->Init.ExternalTrigConvEdge
 2342              		.loc 2 635 15
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 194


 2343 01ec BA69     		ldr	r2, [r7, #24]
 2344 01ee 1343     		orrs	r3, r3, r2
 2345 01f0 BB61     		str	r3, [r7, #24]
 2346              	.L104:
 637:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                  );
 638:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 639:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 640:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 641:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
 642:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Instance == ADC3)
 643:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 644:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Update Configuration Register CFGR */
 645:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 646:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Configuration of sampling mode */
 647:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMo
 648:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 649:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
 650:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 651:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Update Configuration Register CFGR */
 652:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 653:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 654:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
 655:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Update Configuration Register CFGR */
 656:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 2347              		.loc 2 656 5
 2348 01f2 7B68     		ldr	r3, [r7, #4]
 2349 01f4 1B68     		ldr	r3, [r3]
 2350 01f6 DA68     		ldr	r2, [r3, #12]
 2351 01f8 2C4B     		ldr	r3, .L112+28
 2352 01fa 1340     		ands	r3, r3, r2
 2353 01fc 7A68     		ldr	r2, [r7, #4]
 2354 01fe 1268     		ldr	r2, [r2]
 2355 0200 B969     		ldr	r1, [r7, #24]
 2356 0202 0B43     		orrs	r3, r3, r1
 2357 0204 D360     		str	r3, [r2, #12]
 657:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif
 658:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 659:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Parameters update conditioned to ADC state:                            */
 660:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Parameters that can be updated when ADC is disabled or enabled without */
 661:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* conversion on going on regular and injected groups:                    */
 662:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - Conversion data management      Init.ConversionDataManagement       */
 663:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
 664:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - Oversampling parameters         Init.Oversampling                   */
 665:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 2358              		.loc 2 665 46
 2359 0206 7B68     		ldr	r3, [r7, #4]
 2360 0208 1B68     		ldr	r3, [r3]
 2361 020a 1846     		mov	r0, r3
 2362 020c FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 2363 0210 3861     		str	r0, [r7, #16]
 666:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 2364              		.loc 2 666 47
 2365 0212 7B68     		ldr	r3, [r7, #4]
 2366 0214 1B68     		ldr	r3, [r3]
 2367 0216 1846     		mov	r0, r3
 2368 0218 FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 2369 021c F860     		str	r0, [r7, #12]
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 195


 667:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 2370              		.loc 2 667 8
 2371 021e 3B69     		ldr	r3, [r7, #16]
 2372 0220 002B     		cmp	r3, #0
 2373 0222 5FD1     		bne	.L105
 668:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         && (tmp_adc_is_conversion_on_going_injected == 0UL)
 2374              		.loc 2 668 9
 2375 0224 FB68     		ldr	r3, [r7, #12]
 2376 0226 002B     		cmp	r3, #0
 2377 0228 5CD1     		bne	.L105
 669:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        )
 670:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 671:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
 672:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (hadc->Instance == ADC3)
 673:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 674:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmpCFGR = (
 675:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                     ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 676:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                     ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 677:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 678:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
 679:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 680:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmpCFGR = (
 681:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                     ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 682:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                     ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 683:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 684:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
 685:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpCFGR = (
 686:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 2378              		.loc 2 686 19
 2379 022a 7B68     		ldr	r3, [r7, #4]
 2380 022c 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 2381 022e 9A03     		lsls	r2, r3, #14
 687:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 2382              		.loc 2 687 19
 2383 0230 7B68     		ldr	r3, [r7, #4]
 2384 0232 DB6A     		ldr	r3, [r3, #44]
 685:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 2385              		.loc 2 685 15
 2386 0234 1343     		orrs	r3, r3, r2
 2387 0236 BB61     		str	r3, [r7, #24]
 688:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif
 689:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 690:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 2388              		.loc 2 690 7
 2389 0238 7B68     		ldr	r3, [r7, #4]
 2390 023a 1B68     		ldr	r3, [r3]
 2391 023c DA68     		ldr	r2, [r3, #12]
 2392 023e 1C4B     		ldr	r3, .L112+32
 2393 0240 1340     		ands	r3, r3, r2
 2394 0242 7A68     		ldr	r2, [r7, #4]
 2395 0244 1268     		ldr	r2, [r2]
 2396 0246 B969     		ldr	r1, [r7, #24]
 2397 0248 0B43     		orrs	r3, r3, r1
 2398 024a D360     		str	r3, [r2, #12]
 691:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 692:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (hadc->Init.OversamplingMode == ENABLE)
 2399              		.loc 2 692 21
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 196


 2400 024c 7B68     		ldr	r3, [r7, #4]
 2401 024e 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 2402              		.loc 2 692 10
 2403 0252 012B     		cmp	r3, #1
 2404 0254 30D1     		bne	.L106
 693:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 694:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
 695:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (hadc->Instance == ADC3)
 696:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 697:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           assert_param(IS_ADC_OVERSAMPLING_RATIO_ADC3(hadc->Init.Oversampling.Ratio));
 698:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 699:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         else
 700:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 701:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 702:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 703:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
 704:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 705:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif
 706:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 707:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 708:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
 709:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 710:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 2405              		.loc 2 710 24
 2406 0256 7B68     		ldr	r3, [r7, #4]
 2407 0258 5B6A     		ldr	r3, [r3, #36]
 2408              		.loc 2 710 12
 2409 025a 002B     		cmp	r3, #0
 711:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             || (hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE))
 712:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 713:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Multi trigger is not applicable to software-triggered conversions */
 714:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER))
 715:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 716:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 717:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
 718:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (hadc->Instance == ADC3)
 719:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 720:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Configuration of Oversampler:                                      */
 721:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /*  - Oversampling Ratio                                              */
 722:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /*  - Right bit shift                                                 */
 723:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /*  - Triggered mode                                                  */
 724:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /*  - Oversampling mode (continued/resumed)                           */
 725:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           MODIFY_REG(hadc->Instance->CFGR2,
 726:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      ADC_CFGR2_OVSR  |
 727:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      ADC_CFGR2_OVSS  |
 728:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      ADC_CFGR2_TROVS |
 729:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      ADC_CFGR2_ROVSM,
 730:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      ADC_CFGR2_ROVSE                       |
 731:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      hadc->Init.Oversampling.Ratio         |
 732:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      hadc->Init.Oversampling.RightBitShift |
 733:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      hadc->Init.Oversampling.TriggeredMode |
 734:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      hadc->Init.Oversampling.OversamplingStopReset
 735:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                     );
 736:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 737:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         else
 738:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 739:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 197


 740:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Configuration of Oversampler:                                       */
 741:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /*  - Oversampling Ratio                                               */
 742:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /*  - Right bit shift                                                  */
 743:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /*  - Left bit shift                                                   */
 744:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /*  - Triggered mode                                                   */
 745:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /*  - Oversampling mode (continued/resumed)                            */
 746:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 747:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      ADC_CFGR2_ROVSE                       |
 748:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      ((hadc->Init.Oversampling.Ratio - 1UL)  << ADC_CFGR2_OVSR_Pos) |
 749:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      hadc->Init.Oversampling.RightBitShift |
 750:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      hadc->Init.Oversampling.TriggeredMode |
 751:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      hadc->Init.Oversampling.OversamplingStopReset);
 752:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 753:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
 754:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Configuration of Oversampler:                                       */
 755:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*  - Oversampling Ratio                                               */
 756:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*  - Right bit shift                                                  */
 757:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*  - Left bit shift                                                   */
 758:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*  - Triggered mode                                                   */
 759:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*  - Oversampling mode (continued/resumed)                            */
 760:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 2410              		.loc 2 760 9
 2411 025c 7B68     		ldr	r3, [r7, #4]
 2412 025e 1B68     		ldr	r3, [r3]
 2413 0260 1A69     		ldr	r2, [r3, #16]
 2414 0262 144B     		ldr	r3, .L112+36
 2415 0264 1340     		ands	r3, r3, r2
 2416 0266 7A68     		ldr	r2, [r7, #4]
 2417 0268 D26B     		ldr	r2, [r2, #60]
 2418 026a 013A     		subs	r2, r2, #1
 2419 026c 1104     		lsls	r1, r2, #16
 2420 026e 7A68     		ldr	r2, [r7, #4]
 2421 0270 126C     		ldr	r2, [r2, #64]
 2422 0272 1143     		orrs	r1, r1, r2
 2423 0274 7A68     		ldr	r2, [r7, #4]
 2424 0276 526C     		ldr	r2, [r2, #68]
 2425 0278 1143     		orrs	r1, r1, r2
 2426 027a 7A68     		ldr	r2, [r7, #4]
 2427 027c 926C     		ldr	r2, [r2, #72]
 2428 027e 0A43     		orrs	r2, r2, r1
 2429 0280 1A43     		orrs	r2, r2, r3
 2430 0282 7B68     		ldr	r3, [r7, #4]
 2431 0284 1B68     		ldr	r3, [r3]
 2432 0286 42F00102 		orr	r2, r2, #1
 2433 028a 1A61     		str	r2, [r3, #16]
 2434 028c 1CE0     		b	.L108
 2435              	.L113:
 2436 028e 00BF     		.align	2
 2437              	.L112:
 2438 0290 00000000 		.word	SystemCoreClock
 2439 0294 632D3E05 		.word	87960931
 2440 0298 00200240 		.word	1073881088
 2441 029c 00210240 		.word	1073881344
 2442 02a0 00600258 		.word	1476550656
 2443 02a4 00230240 		.word	1073881856
 2444 02a8 00630258 		.word	1476551424
 2445 02ac 03C0F0FF 		.word	-999421
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 198


 2446 02b0 FCBFFFFF 		.word	-16388
 2447 02b4 1EF800FC 		.word	-67045346
 2448              	.L106:
 761:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    ADC_CFGR2_ROVSE                       |
 762:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    ((hadc->Init.Oversampling.Ratio - 1UL) << ADC_CFGR2_OVSR_Pos) |
 763:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    hadc->Init.Oversampling.RightBitShift |
 764:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    hadc->Init.Oversampling.TriggeredMode |
 765:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    hadc->Init.Oversampling.OversamplingStopReset);
 766:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif
 767:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 768:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 769:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
 770:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 771:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Disable ADC oversampling scope on ADC group regular */
 772:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 2449              		.loc 2 772 9
 2450 02b8 7B68     		ldr	r3, [r7, #4]
 2451 02ba 1B68     		ldr	r3, [r3]
 2452 02bc 1A69     		ldr	r2, [r3, #16]
 2453 02be 7B68     		ldr	r3, [r7, #4]
 2454 02c0 1B68     		ldr	r3, [r3]
 2455 02c2 22F00102 		bic	r2, r2, #1
 2456 02c6 1A61     		str	r2, [r3, #16]
 2457              	.L108:
 773:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 774:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 775:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set the LeftShift parameter: it is applied to the final result with or without oversamplin
 776:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 2458              		.loc 2 776 7
 2459 02c8 7B68     		ldr	r3, [r7, #4]
 2460 02ca 1B68     		ldr	r3, [r3]
 2461 02cc 1B69     		ldr	r3, [r3, #16]
 2462 02ce 23F07041 		bic	r1, r3, #-268435456
 2463 02d2 7B68     		ldr	r3, [r7, #4]
 2464 02d4 5A6B     		ldr	r2, [r3, #52]
 2465 02d6 7B68     		ldr	r3, [r7, #4]
 2466 02d8 1B68     		ldr	r3, [r3]
 2467 02da 0A43     		orrs	r2, r2, r1
 2468 02dc 1A61     		str	r2, [r3, #16]
 777:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
 778:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (hadc->Instance != ADC3)
 779:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 780:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Configure the BOOST Mode */
 781:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         ADC_ConfigureBoostMode(hadc);
 782:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 783:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
 784:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Configure the BOOST Mode */
 785:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       ADC_ConfigureBoostMode(hadc);
 2469              		.loc 2 785 7
 2470 02de 7868     		ldr	r0, [r7, #4]
 2471 02e0 FFF7FEFF 		bl	ADC_ConfigureBoostMode
 2472              	.L105:
 786:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif
 787:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 788:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 789:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Configuration of regular group sequencer:                              */
 790:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* - if scan mode is disabled, regular channels sequence length is set to */
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 199


 791:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*   0x00: 1 channel converted (channel on regular rank 1)                */
 792:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*   Parameter "NbrOfConversion" is discarded.                            */
 793:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*   Note: Scan mode is not present by hardware on this device, but       */
 794:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*   emulated by software for alignment over all STM32 devices.           */
 795:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* - if scan mode is enabled, regular channels sequence length is set to  */
 796:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*   parameter "NbrOfConversion".                                         */
 797:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 798:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 2473              		.loc 2 798 19
 2474 02e4 7B68     		ldr	r3, [r7, #4]
 2475 02e6 DB68     		ldr	r3, [r3, #12]
 2476              		.loc 2 798 8
 2477 02e8 012B     		cmp	r3, #1
 2478 02ea 0CD1     		bne	.L109
 799:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 800:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set number of ranks in regular group sequencer */
 801:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 2479              		.loc 2 801 7
 2480 02ec 7B68     		ldr	r3, [r7, #4]
 2481 02ee 1B68     		ldr	r3, [r3]
 2482 02f0 1B6B     		ldr	r3, [r3, #48]
 2483 02f2 23F00F01 		bic	r1, r3, #15
 2484 02f6 7B68     		ldr	r3, [r7, #4]
 2485 02f8 9B69     		ldr	r3, [r3, #24]
 2486 02fa 5A1E     		subs	r2, r3, #1
 2487 02fc 7B68     		ldr	r3, [r7, #4]
 2488 02fe 1B68     		ldr	r3, [r3]
 2489 0300 0A43     		orrs	r2, r2, r1
 2490 0302 1A63     		str	r2, [r3, #48]
 2491 0304 07E0     		b	.L110
 2492              	.L109:
 802:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 803:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
 804:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 805:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 2493              		.loc 2 805 7
 2494 0306 7B68     		ldr	r3, [r7, #4]
 2495 0308 1B68     		ldr	r3, [r3]
 2496 030a 1A6B     		ldr	r2, [r3, #48]
 2497 030c 7B68     		ldr	r3, [r7, #4]
 2498 030e 1B68     		ldr	r3, [r3]
 2499 0310 22F00F02 		bic	r2, r2, #15
 2500 0314 1A63     		str	r2, [r3, #48]
 2501              	.L110:
 806:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 807:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 808:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Initialize the ADC state */
 809:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
 810:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 2502              		.loc 2 810 5
 2503 0316 7B68     		ldr	r3, [r7, #4]
 2504 0318 5B6D     		ldr	r3, [r3, #84]
 2505 031a 23F00303 		bic	r3, r3, #3
 2506 031e 43F00102 		orr	r2, r3, #1
 2507 0322 7B68     		ldr	r3, [r7, #4]
 2508 0324 5A65     		str	r2, [r3, #84]
 2509 0326 07E0     		b	.L111
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 200


 2510              	.L93:
 811:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 812:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
 813:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 814:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Update ADC state machine to error */
 815:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 2511              		.loc 2 815 5
 2512 0328 7B68     		ldr	r3, [r7, #4]
 2513 032a 5B6D     		ldr	r3, [r3, #84]
 2514 032c 43F01002 		orr	r2, r3, #16
 2515 0330 7B68     		ldr	r3, [r7, #4]
 2516 0332 5A65     		str	r2, [r3, #84]
 816:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 817:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 2517              		.loc 2 817 20
 2518 0334 0123     		movs	r3, #1
 2519 0336 FB77     		strb	r3, [r7, #31]
 2520              	.L111:
 818:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 819:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 820:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return function status */
 821:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return tmp_hal_status;
 2521              		.loc 2 821 10
 2522 0338 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 2523              	.L85:
 822:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 2524              		.loc 2 822 1
 2525 033a 1846     		mov	r0, r3
 2526 033c 2437     		adds	r7, r7, #36
 2527              	.LCFI225:
 2528              		.cfi_def_cfa_offset 12
 2529 033e BD46     		mov	sp, r7
 2530              	.LCFI226:
 2531              		.cfi_def_cfa_register 13
 2532              		@ sp needed
 2533 0340 90BD     		pop	{r4, r7, pc}
 2534              		.cfi_endproc
 2535              	.LFE333:
 2537 0342 00BF     		.section	.text.HAL_ADC_DeInit,"ax",%progbits
 2538              		.align	1
 2539              		.global	HAL_ADC_DeInit
 2540              		.syntax unified
 2541              		.thumb
 2542              		.thumb_func
 2544              	HAL_ADC_DeInit:
 2545              	.LFB334:
 823:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 824:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
 825:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Deinitialize the ADC peripheral registers to their default reset
 826:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         values, with deinitialization of the ADC MSP.
 827:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   For devices with several ADCs: reset of ADC common registers is done
 828:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         only if all ADCs sharing the same common group are disabled.
 829:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         (function "HAL_ADC_MspDeInit()" is also called under the same conditions:
 830:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         all ADC instances use the same core clock at RCC level, disabling
 831:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         the core clock reset all ADC instances).
 832:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         If this is not the case, reset of these common parameters reset is
 833:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         bypassed without error reporting: it can be the intended behavior in
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 201


 834:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         case of reset of a single ADC while the other ADCs sharing the same
 835:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         common group is still running.
 836:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   By default, HAL_ADC_DeInit() set ADC in mode deep power-down:
 837:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         this saves more power by reducing leakage currents
 838:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         and is particularly interesting before entering MCU low-power modes.
 839:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
 840:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status
 841:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
 842:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
 843:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 2546              		.loc 2 843 1
 2547              		.cfi_startproc
 2548              		@ args = 0, pretend = 0, frame = 16
 2549              		@ frame_needed = 1, uses_anonymous_args = 0
 2550 0000 90B5     		push	{r4, r7, lr}
 2551              	.LCFI227:
 2552              		.cfi_def_cfa_offset 12
 2553              		.cfi_offset 4, -12
 2554              		.cfi_offset 7, -8
 2555              		.cfi_offset 14, -4
 2556 0002 85B0     		sub	sp, sp, #20
 2557              	.LCFI228:
 2558              		.cfi_def_cfa_offset 32
 2559 0004 00AF     		add	r7, sp, #0
 2560              	.LCFI229:
 2561              		.cfi_def_cfa_register 7
 2562 0006 7860     		str	r0, [r7, #4]
 844:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 845:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 846:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check ADC handle */
 847:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (hadc == NULL)
 2563              		.loc 2 847 6
 2564 0008 7B68     		ldr	r3, [r7, #4]
 2565 000a 002B     		cmp	r3, #0
 2566 000c 01D1     		bne	.L115
 848:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 849:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     return HAL_ERROR;
 2567              		.loc 2 849 12
 2568 000e 0123     		movs	r3, #1
 2569 0010 6EE1     		b	.L116
 2570              	.L115:
 850:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 851:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 852:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
 853:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 854:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 855:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Set ADC state */
 856:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 2571              		.loc 2 856 3
 2572 0012 7B68     		ldr	r3, [r7, #4]
 2573 0014 5B6D     		ldr	r3, [r3, #84]
 2574 0016 43F00202 		orr	r2, r3, #2
 2575 001a 7B68     		ldr	r3, [r7, #4]
 2576 001c 5A65     		str	r2, [r3, #84]
 857:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 858:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Stop potential conversion on going */
 859:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 202


 2577              		.loc 2 859 20
 2578 001e 0321     		movs	r1, #3
 2579 0020 7868     		ldr	r0, [r7, #4]
 2580 0022 FFF7FEFF 		bl	ADC_ConversionStop
 2581 0026 0346     		mov	r3, r0
 2582 0028 FB73     		strb	r3, [r7, #15]
 860:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 861:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped            */
 862:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Flush register JSQR: reset the queue sequencer when injected             */
 863:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* queue sequencer is enabled and ADC disabled.                             */
 864:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* The software and hardware triggers of the injected sequence are both     */
 865:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* internally disabled just after the completion of the last valid          */
 866:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* injected sequence.                                                       */
 867:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 2583              		.loc 2 867 3
 2584 002a 7B68     		ldr	r3, [r7, #4]
 2585 002c 1B68     		ldr	r3, [r3]
 2586 002e DA68     		ldr	r2, [r3, #12]
 2587 0030 7B68     		ldr	r3, [r7, #4]
 2588 0032 1B68     		ldr	r3, [r3]
 2589 0034 42F40012 		orr	r2, r2, #2097152
 2590 0038 DA60     		str	r2, [r3, #12]
 868:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 869:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
 870:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 2591              		.loc 2 870 6
 2592 003a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2593 003c 002B     		cmp	r3, #0
 2594 003e 0AD1     		bne	.L117
 871:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 872:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Disable the ADC peripheral */
 873:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
 2595              		.loc 2 873 22
 2596 0040 7868     		ldr	r0, [r7, #4]
 2597 0042 FFF7FEFF 		bl	ADC_Disable
 2598 0046 0346     		mov	r3, r0
 2599 0048 FB73     		strb	r3, [r7, #15]
 874:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 875:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
 876:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 2600              		.loc 2 876 8
 2601 004a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2602 004c 002B     		cmp	r3, #0
 2603 004e 02D1     		bne	.L117
 877:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 878:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Change ADC state */
 879:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       hadc->State = HAL_ADC_STATE_READY;
 2604              		.loc 2 879 19
 2605 0050 7B68     		ldr	r3, [r7, #4]
 2606 0052 0122     		movs	r2, #1
 2607 0054 5A65     		str	r2, [r3, #84]
 2608              	.L117:
 880:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 881:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 882:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 883:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Note: HAL ADC deInit is done independently of ADC conversion stop        */
 884:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /*       and disable return status. In case of status fail, attempt to      */
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 203


 885:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /*       perform deinitialization anyway and it is up user code in          */
 886:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
 887:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /*       system RCC hard reset.                                             */
 888:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 889:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* ========== Reset ADC registers ========== */
 890:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register IER */
 891:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 2609              		.loc 2 891 3
 2610 0056 7B68     		ldr	r3, [r7, #4]
 2611 0058 1B68     		ldr	r3, [r3]
 2612 005a 5968     		ldr	r1, [r3, #4]
 2613 005c 7B68     		ldr	r3, [r7, #4]
 2614 005e 1A68     		ldr	r2, [r3]
 2615 0060 8C4B     		ldr	r3, .L128
 2616 0062 0B40     		ands	r3, r3, r1
 2617 0064 5360     		str	r3, [r2, #4]
 892:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                               ADC_IT_JQOVF | ADC_IT_OVR  |
 893:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                               ADC_IT_JEOS  | ADC_IT_JEOC |
 894:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                               ADC_IT_EOS   | ADC_IT_EOC  |
 895:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                               ADC_IT_EOSMP | ADC_IT_RDY));
 896:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 897:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register ISR */
 898:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 2618              		.loc 2 898 3
 2619 0066 7B68     		ldr	r3, [r7, #4]
 2620 0068 1B68     		ldr	r3, [r3]
 2621 006a 40F2FF72 		movw	r2, #2047
 2622 006e 1A60     		str	r2, [r3]
 899:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                               ADC_FLAG_JQOVF | ADC_FLAG_OVR  |
 900:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                               ADC_FLAG_JEOS  | ADC_FLAG_JEOC |
 901:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                               ADC_FLAG_EOS   | ADC_FLAG_EOC  |
 902:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                               ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 903:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 904:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register CR */
 905:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
 906:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
 907:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      no direct reset applicable.
 908:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      Update CR register to reset value where doable by software */
 909:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 2623              		.loc 2 909 3
 2624 0070 7B68     		ldr	r3, [r7, #4]
 2625 0072 1B68     		ldr	r3, [r3]
 2626 0074 9A68     		ldr	r2, [r3, #8]
 2627 0076 7B68     		ldr	r3, [r7, #4]
 2628 0078 1B68     		ldr	r3, [r3]
 2629 007a 22F0A042 		bic	r2, r2, #1342177280
 2630 007e 9A60     		str	r2, [r3, #8]
 910:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 2631              		.loc 2 910 3
 2632 0080 7B68     		ldr	r3, [r7, #4]
 2633 0082 1B68     		ldr	r3, [r3]
 2634 0084 9A68     		ldr	r2, [r3, #8]
 2635 0086 7B68     		ldr	r3, [r7, #4]
 2636 0088 1B68     		ldr	r3, [r3]
 2637 008a 42F00052 		orr	r2, r2, #536870912
 2638 008e 9A60     		str	r2, [r3, #8]
 911:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 204


 912:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register CFGR */
 913:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AWD1CH  | ADC_CFGR_JAUTO   | ADC_CFGR_JAWD1EN |
 2639              		.loc 2 913 3
 2640 0090 7B68     		ldr	r3, [r7, #4]
 2641 0092 1B68     		ldr	r3, [r3]
 2642 0094 DA68     		ldr	r2, [r3, #12]
 2643 0096 7B68     		ldr	r3, [r7, #4]
 2644 0098 1B68     		ldr	r3, [r3]
 2645 009a 02F08022 		and	r2, r2, #-2147450880
 2646 009e DA60     		str	r2, [r3, #12]
 914:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_CFGR_AWD1EN  | ADC_CFGR_AWD1SGL | ADC_CFGR_JQM     |
 915:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_CFGR_JDISCEN | ADC_CFGR_DISCNUM | ADC_CFGR_DISCEN  |
 916:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_CFGR_AUTDLY  | ADC_CFGR_CONT    | ADC_CFGR_OVRMOD  |
 917:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_CFGR_EXTEN   | ADC_CFGR_EXTSEL  |
 918:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_CFGR_RES     | ADC_CFGR_DMNGT);
 919:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 2647              		.loc 2 919 3
 2648 00a0 7B68     		ldr	r3, [r7, #4]
 2649 00a2 1B68     		ldr	r3, [r3]
 2650 00a4 DA68     		ldr	r2, [r3, #12]
 2651 00a6 7B68     		ldr	r3, [r7, #4]
 2652 00a8 1B68     		ldr	r3, [r3]
 2653 00aa 42F00042 		orr	r2, r2, #-2147483648
 2654 00ae DA60     		str	r2, [r3, #12]
 920:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 921:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register CFGR2 */
 922:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 2655              		.loc 2 922 3
 2656 00b0 7B68     		ldr	r3, [r7, #4]
 2657 00b2 1B68     		ldr	r3, [r3]
 2658 00b4 1969     		ldr	r1, [r3, #16]
 2659 00b6 7B68     		ldr	r3, [r7, #4]
 2660 00b8 1A68     		ldr	r2, [r3]
 2661 00ba 774B     		ldr	r3, .L128+4
 2662 00bc 0B40     		ands	r3, r3, r1
 2663 00be 1361     		str	r3, [r2, #16]
 923:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);
 924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 925:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register SMPR1 */
 926:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 2664              		.loc 2 926 3
 2665 00c0 7B68     		ldr	r3, [r7, #4]
 2666 00c2 1B68     		ldr	r3, [r3]
 2667 00c4 5A69     		ldr	r2, [r3, #20]
 2668 00c6 7B68     		ldr	r3, [r7, #4]
 2669 00c8 1B68     		ldr	r3, [r3]
 2670 00ca 02F04042 		and	r2, r2, #-1073741824
 2671 00ce 5A61     		str	r2, [r3, #20]
 927:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 928:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register SMPR2 */
 929:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 2672              		.loc 2 929 3
 2673 00d0 7B68     		ldr	r3, [r7, #4]
 2674 00d2 1B68     		ldr	r3, [r3]
 2675 00d4 9A69     		ldr	r2, [r3, #24]
 2676 00d6 7B68     		ldr	r3, [r7, #4]
 2677 00d8 1B68     		ldr	r3, [r3]
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 205


 2678 00da 02F07842 		and	r2, r2, #-134217728
 2679 00de 9A61     		str	r2, [r3, #24]
 930:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_SMPR2_SMP15 | ADC_SMPR2_SMP14 | ADC_SMPR2_SMP13 |
 931:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_SMPR2_SMP12 | ADC_SMPR2_SMP11 | ADC_SMPR2_SMP10);
 932:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 933:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
 934:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (hadc->Instance == ADC3)
 935:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {  
 936:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Reset register LTR1 and HTR1 */
 937:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->LTR1_TR1, ADC3_TR1_HT1 | ADC3_TR1_LT1);
 938:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->HTR1_TR2, ADC3_TR2_HT2 | ADC3_TR2_LT2);
 939:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 940:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Reset register LTR3 and HTR3 */
 941:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->RES1_TR3, ADC3_TR3_HT3 | ADC3_TR3_LT3);
 942:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 943:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
 944:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {  
 945:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->LTR1_TR1, ADC_LTR_LT);
 946:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->HTR1_TR2, ADC_HTR_HT);
 947:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 948:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Reset register LTR2 and HTR2*/
 949:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->LTR2_DIFSEL, ADC_LTR_LT);
 950:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->HTR2_CALFACT, ADC_HTR_HT);
 951:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 952:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Reset register LTR3 and HTR3 */
 953:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->LTR3_RES10, ADC_LTR_LT);
 954:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->HTR3_RES11, ADC_HTR_HT);
 955:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 956:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
 957:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register LTR1 and HTR1 */
 958:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->LTR1, ADC_LTR_LT);
 2680              		.loc 2 958 3
 2681 00e0 7B68     		ldr	r3, [r7, #4]
 2682 00e2 1B68     		ldr	r3, [r3]
 2683 00e4 1A6A     		ldr	r2, [r3, #32]
 2684 00e6 7B68     		ldr	r3, [r7, #4]
 2685 00e8 1B68     		ldr	r3, [r3]
 2686 00ea 02F07C42 		and	r2, r2, #-67108864
 2687 00ee 1A62     		str	r2, [r3, #32]
 959:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->HTR1, ADC_HTR_HT);
 2688              		.loc 2 959 3
 2689 00f0 7B68     		ldr	r3, [r7, #4]
 2690 00f2 1B68     		ldr	r3, [r3]
 2691 00f4 5A6A     		ldr	r2, [r3, #36]
 2692 00f6 7B68     		ldr	r3, [r7, #4]
 2693 00f8 1B68     		ldr	r3, [r3]
 2694 00fa 02F07C42 		and	r2, r2, #-67108864
 2695 00fe 5A62     		str	r2, [r3, #36]
 960:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 961:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register LTR2 and HTR2*/
 962:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->LTR2, ADC_LTR_LT);
 2696              		.loc 2 962 3
 2697 0100 7B68     		ldr	r3, [r7, #4]
 2698 0102 1B68     		ldr	r3, [r3]
 2699 0104 D3F8B020 		ldr	r2, [r3, #176]
 2700 0108 7B68     		ldr	r3, [r7, #4]
 2701 010a 1B68     		ldr	r3, [r3]
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 206


 2702 010c 02F07C42 		and	r2, r2, #-67108864
 2703 0110 C3F8B020 		str	r2, [r3, #176]
 963:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->HTR2, ADC_HTR_HT);
 2704              		.loc 2 963 3
 2705 0114 7B68     		ldr	r3, [r7, #4]
 2706 0116 1B68     		ldr	r3, [r3]
 2707 0118 D3F8B420 		ldr	r2, [r3, #180]
 2708 011c 7B68     		ldr	r3, [r7, #4]
 2709 011e 1B68     		ldr	r3, [r3]
 2710 0120 02F07C42 		and	r2, r2, #-67108864
 2711 0124 C3F8B420 		str	r2, [r3, #180]
 964:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 965:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register LTR3 and HTR3 */
 966:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->LTR3, ADC_LTR_LT);
 2712              		.loc 2 966 3
 2713 0128 7B68     		ldr	r3, [r7, #4]
 2714 012a 1B68     		ldr	r3, [r3]
 2715 012c D3F8B820 		ldr	r2, [r3, #184]
 2716 0130 7B68     		ldr	r3, [r7, #4]
 2717 0132 1B68     		ldr	r3, [r3]
 2718 0134 02F07C42 		and	r2, r2, #-67108864
 2719 0138 C3F8B820 		str	r2, [r3, #184]
 967:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->HTR3, ADC_HTR_HT);
 2720              		.loc 2 967 3
 2721 013c 7B68     		ldr	r3, [r7, #4]
 2722 013e 1B68     		ldr	r3, [r3]
 2723 0140 D3F8BC20 		ldr	r2, [r3, #188]
 2724 0144 7B68     		ldr	r3, [r7, #4]
 2725 0146 1B68     		ldr	r3, [r3]
 2726 0148 02F07C42 		and	r2, r2, #-67108864
 2727 014c C3F8BC20 		str	r2, [r3, #188]
 968:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* ADC_VER_V5_V90 */
 969:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 970:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 971:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register SQR1 */
 972:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 2728              		.loc 2 972 3
 2729 0150 7B68     		ldr	r3, [r7, #4]
 2730 0152 1B68     		ldr	r3, [r3]
 2731 0154 196B     		ldr	r1, [r3, #48]
 2732 0156 7B68     		ldr	r3, [r7, #4]
 2733 0158 1A68     		ldr	r2, [r3]
 2734 015a 504B     		ldr	r3, .L128+8
 2735 015c 0B40     		ands	r3, r3, r1
 2736 015e 1363     		str	r3, [r2, #48]
 973:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_SQR1_SQ1 | ADC_SQR1_L);
 974:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 975:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register SQR2 */
 976:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 2737              		.loc 2 976 3
 2738 0160 7B68     		ldr	r3, [r7, #4]
 2739 0162 1B68     		ldr	r3, [r3]
 2740 0164 596B     		ldr	r1, [r3, #52]
 2741 0166 7B68     		ldr	r3, [r7, #4]
 2742 0168 1A68     		ldr	r2, [r3]
 2743 016a 4D4B     		ldr	r3, .L128+12
 2744 016c 0B40     		ands	r3, r3, r1
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 207


 2745 016e 5363     		str	r3, [r2, #52]
 977:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_SQR2_SQ6 | ADC_SQR2_SQ5);
 978:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 979:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register SQR3 */
 980:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 2746              		.loc 2 980 3
 2747 0170 7B68     		ldr	r3, [r7, #4]
 2748 0172 1B68     		ldr	r3, [r3]
 2749 0174 996B     		ldr	r1, [r3, #56]
 2750 0176 7B68     		ldr	r3, [r7, #4]
 2751 0178 1A68     		ldr	r2, [r3]
 2752 017a 494B     		ldr	r3, .L128+12
 2753 017c 0B40     		ands	r3, r3, r1
 2754 017e 9363     		str	r3, [r2, #56]
 981:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_SQR3_SQ11 | ADC_SQR3_SQ10);
 982:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 983:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register SQR4 */
 984:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 2755              		.loc 2 984 3
 2756 0180 7B68     		ldr	r3, [r7, #4]
 2757 0182 1B68     		ldr	r3, [r3]
 2758 0184 D96B     		ldr	r1, [r3, #60]
 2759 0186 7B68     		ldr	r3, [r7, #4]
 2760 0188 1A68     		ldr	r2, [r3]
 2761 018a 464B     		ldr	r3, .L128+16
 2762 018c 0B40     		ands	r3, r3, r1
 2763 018e D363     		str	r3, [r2, #60]
 985:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 986:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Register JSQR was reset when the ADC was disabled */
 987:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 988:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register DR */
 989:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* bits in access mode read only, no direct reset applicable*/
 990:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 991:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register OFR1 */
 992:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 2764              		.loc 2 992 3
 2765 0190 7B68     		ldr	r3, [r7, #4]
 2766 0192 1B68     		ldr	r3, [r3]
 2767 0194 1B6E     		ldr	r3, [r3, #96]
 2768 0196 7B68     		ldr	r3, [r7, #4]
 2769 0198 1B68     		ldr	r3, [r3]
 2770 019a 0022     		movs	r2, #0
 2771 019c 1A66     		str	r2, [r3, #96]
 993:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register OFR2 */
 994:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 2772              		.loc 2 994 3
 2773 019e 7B68     		ldr	r3, [r7, #4]
 2774 01a0 1B68     		ldr	r3, [r3]
 2775 01a2 5B6E     		ldr	r3, [r3, #100]
 2776 01a4 7B68     		ldr	r3, [r7, #4]
 2777 01a6 1B68     		ldr	r3, [r3]
 2778 01a8 0022     		movs	r2, #0
 2779 01aa 5A66     		str	r2, [r3, #100]
 995:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register OFR3 */
 996:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 2780              		.loc 2 996 3
 2781 01ac 7B68     		ldr	r3, [r7, #4]
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 208


 2782 01ae 1B68     		ldr	r3, [r3]
 2783 01b0 9B6E     		ldr	r3, [r3, #104]
 2784 01b2 7B68     		ldr	r3, [r7, #4]
 2785 01b4 1B68     		ldr	r3, [r3]
 2786 01b6 0022     		movs	r2, #0
 2787 01b8 9A66     		str	r2, [r3, #104]
 997:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register OFR4 */
 998:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 2788              		.loc 2 998 3
 2789 01ba 7B68     		ldr	r3, [r7, #4]
 2790 01bc 1B68     		ldr	r3, [r3]
 2791 01be DB6E     		ldr	r3, [r3, #108]
 2792 01c0 7B68     		ldr	r3, [r7, #4]
 2793 01c2 1B68     		ldr	r3, [r3]
 2794 01c4 0022     		movs	r2, #0
 2795 01c6 DA66     		str	r2, [r3, #108]
 999:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1000:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset registers JDR1, JDR2, JDR3, JDR4 */
1001:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* bits in access mode read only, no direct reset applicable*/
1002:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1003:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register AWD2CR */
1004:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 2796              		.loc 2 1004 3
 2797 01c8 7B68     		ldr	r3, [r7, #4]
 2798 01ca 1B68     		ldr	r3, [r3]
 2799 01cc D3F8A010 		ldr	r1, [r3, #160]
 2800 01d0 7B68     		ldr	r3, [r7, #4]
 2801 01d2 1A68     		ldr	r2, [r3]
 2802 01d4 344B     		ldr	r3, .L128+20
 2803 01d6 0B40     		ands	r3, r3, r1
 2804 01d8 C2F8A030 		str	r3, [r2, #160]
1005:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1006:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register AWD3CR */
1007:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 2805              		.loc 2 1007 3
 2806 01dc 7B68     		ldr	r3, [r7, #4]
 2807 01de 1B68     		ldr	r3, [r3]
 2808 01e0 D3F8A410 		ldr	r1, [r3, #164]
 2809 01e4 7B68     		ldr	r3, [r7, #4]
 2810 01e6 1A68     		ldr	r2, [r3]
 2811 01e8 2F4B     		ldr	r3, .L128+20
 2812 01ea 0B40     		ands	r3, r3, r1
 2813 01ec C2F8A430 		str	r3, [r2, #164]
1008:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1009:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
1010:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (hadc->Instance == ADC3)
1011:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1012:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register DIFSEL */
1013:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->LTR2_DIFSEL, ADC_DIFSEL_DIFSEL);
1014:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1015:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register CALFACT */
1016:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->HTR2_CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
1017:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1018:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
1019:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1020:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Reset register DIFSEL */
1021:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->DIFSEL_RES12, ADC_DIFSEL_DIFSEL);
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 209


1022:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1023:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Reset register CALFACT */
1024:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CALFACT_RES13, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
1025:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
1027:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register DIFSEL */
1028:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 2814              		.loc 2 1028 3
 2815 01f0 7B68     		ldr	r3, [r7, #4]
 2816 01f2 1B68     		ldr	r3, [r3]
 2817 01f4 D3F8C010 		ldr	r1, [r3, #192]
 2818 01f8 7B68     		ldr	r3, [r7, #4]
 2819 01fa 1A68     		ldr	r2, [r3]
 2820 01fc 2A4B     		ldr	r3, .L128+20
 2821 01fe 0B40     		ands	r3, r3, r1
 2822 0200 C2F8C030 		str	r3, [r2, #192]
1029:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1030:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register CALFACT */
1031:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 2823              		.loc 2 1031 3
 2824 0204 7B68     		ldr	r3, [r7, #4]
 2825 0206 1B68     		ldr	r3, [r3]
 2826 0208 D3F8C420 		ldr	r2, [r3, #196]
 2827 020c 7B68     		ldr	r3, [r7, #4]
 2828 020e 1B68     		ldr	r3, [r3]
 2829 0210 02F0F822 		and	r2, r2, #-134154240
 2830 0214 C3F8C420 		str	r2, [r3, #196]
1032:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* ADC_VER_V5_V90 */
1033:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1034:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* ========== Reset common ADC registers ========== */
1035:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1036:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Software is allowed to change common parameters only when all the other
1037:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      ADCs are disabled.   */
1038:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 2831              		.loc 2 1038 7
 2832 0218 7B68     		ldr	r3, [r7, #4]
 2833 021a 1B68     		ldr	r3, [r3]
 2834              		.loc 2 1038 89
 2835 021c 234A     		ldr	r2, .L128+24
 2836 021e 9342     		cmp	r3, r2
 2837 0220 04D0     		beq	.L118
 2838              		.loc 2 1038 7 discriminator 2
 2839 0222 7B68     		ldr	r3, [r7, #4]
 2840 0224 1B68     		ldr	r3, [r3]
 2841 0226 224A     		ldr	r2, .L128+28
 2842 0228 9342     		cmp	r3, r2
 2843 022a 0ED1     		bne	.L119
 2844              	.L118:
 2845              		.loc 2 1038 7 is_stmt 0 discriminator 3
 2846 022c 1F48     		ldr	r0, .L128+24
 2847 022e FFF7FEFF 		bl	LL_ADC_IsEnabled
 2848 0232 0446     		mov	r4, r0
 2849 0234 1E48     		ldr	r0, .L128+28
 2850 0236 FFF7FEFF 		bl	LL_ADC_IsEnabled
 2851 023a 0346     		mov	r3, r0
 2852 023c 2343     		orrs	r3, r3, r4
 2853              		.loc 2 1038 89 is_stmt 1 discriminator 3
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 210


 2854 023e 002B     		cmp	r3, #0
 2855 0240 0CBF     		ite	eq
 2856 0242 0123     		moveq	r3, #1
 2857 0244 0023     		movne	r3, #0
 2858 0246 DBB2     		uxtb	r3, r3
 2859 0248 08E0     		b	.L120
 2860              	.L119:
 2861              		.loc 2 1038 7 discriminator 4
 2862 024a 1A48     		ldr	r0, .L128+32
 2863 024c FFF7FEFF 		bl	LL_ADC_IsEnabled
 2864 0250 0346     		mov	r3, r0
 2865              		.loc 2 1038 89 discriminator 4
 2866 0252 002B     		cmp	r3, #0
 2867 0254 0CBF     		ite	eq
 2868 0256 0123     		moveq	r3, #1
 2869 0258 0023     		movne	r3, #0
 2870 025a DBB2     		uxtb	r3, r3
 2871              	.L120:
 2872              		.loc 2 1038 6 discriminator 6
 2873 025c 002B     		cmp	r3, #0
 2874 025e 36D0     		beq	.L121
1039:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1040:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Reset configuration of ADC common register CCR:
1041:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       - clock mode: CKMODE, PRESCEN
1042:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       - multimode related parameters(when this feature is available): DELAY, DUAL
1043:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (set into  HAL_ADCEx_MultiModeConfigChannel() API)
1044:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       - internal measurement paths: Vbat, temperature sensor, Vref (set into
1045:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
1046:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     */
1047:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 2875              		.loc 2 1047 5
 2876 0260 7B68     		ldr	r3, [r7, #4]
 2877 0262 1B68     		ldr	r3, [r3]
 2878 0264 114A     		ldr	r2, .L128+24
 2879 0266 9342     		cmp	r3, r2
 2880 0268 04D0     		beq	.L122
 2881              		.loc 2 1047 5 is_stmt 0 discriminator 2
 2882 026a 7B68     		ldr	r3, [r7, #4]
 2883 026c 1B68     		ldr	r3, [r3]
 2884 026e 104A     		ldr	r2, .L128+28
 2885 0270 9342     		cmp	r3, r2
 2886 0272 01D1     		bne	.L123
 2887              	.L122:
 2888              		.loc 2 1047 5 discriminator 3
 2889 0274 104B     		ldr	r3, .L128+36
 2890 0276 00E0     		b	.L124
 2891              	.L123:
 2892              		.loc 2 1047 5 discriminator 4
 2893 0278 104B     		ldr	r3, .L128+40
 2894              	.L124:
 2895              		.loc 2 1047 5 discriminator 6
 2896 027a 9968     		ldr	r1, [r3, #8]
 2897 027c 7B68     		ldr	r3, [r7, #4]
 2898 027e 1B68     		ldr	r3, [r3]
 2899 0280 0A4A     		ldr	r2, .L128+24
 2900 0282 9342     		cmp	r3, r2
 2901 0284 04D0     		beq	.L125
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 211


 2902              		.loc 2 1047 5 discriminator 8
 2903 0286 7B68     		ldr	r3, [r7, #4]
 2904 0288 1B68     		ldr	r3, [r3]
 2905 028a 094A     		ldr	r2, .L128+28
 2906 028c 9342     		cmp	r3, r2
 2907 028e 17D1     		bne	.L126
 2908              	.L125:
 2909              		.loc 2 1047 5 discriminator 9
 2910 0290 094A     		ldr	r2, .L128+36
 2911 0292 16E0     		b	.L127
 2912              	.L129:
 2913              		.align	2
 2914              	.L128:
 2915 0294 00F8FFFF 		.word	-2048
 2916 0298 1CF800FC 		.word	-67045348
 2917 029c 300882E0 		.word	-528349136
 2918 02a0 200882E0 		.word	-528349152
 2919 02a4 20F8FFFF 		.word	-2016
 2920 02a8 0000F0FF 		.word	-1048576
 2921 02ac 00200240 		.word	1073881088
 2922 02b0 00210240 		.word	1073881344
 2923 02b4 00600258 		.word	1476550656
 2924 02b8 00230240 		.word	1073881856
 2925 02bc 00630258 		.word	1476551424
 2926              	.L126:
 2927              		.loc 2 1047 5 discriminator 10
 2928 02c0 0D4A     		ldr	r2, .L130
 2929              	.L127:
 2930              		.loc 2 1047 5 discriminator 12
 2931 02c2 0E4B     		ldr	r3, .L130+4
 2932 02c4 0B40     		ands	r3, r3, r1
 2933 02c6 9360     		str	r3, [r2, #8]
1048:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1049:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* ========== Hard reset ADC peripheral ========== */
1050:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Performs a global reset of the entire ADC peripherals instances        */
1051:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* sharing the same common ADC instance: ADC state is forced to           */
1052:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* a similar state as after device power-on.                              */
1053:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Note: A possible implementation is to add RCC bus reset of ADC         */
1054:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* (for example, using macro                                              */
1055:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  __HAL_RCC_ADC..._FORCE_RESET()/..._RELEASE_RESET()/..._CLK_DISABLE()) */
1056:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* in function "void HAL_ADC_MspDeInit(ADC_HandleTypeDef *hadc)":         */
1057:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1058:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1059:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->MspDeInitCallback == NULL)
1060:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1061:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit  */
1062:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1063:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1064:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* DeInit the low level hardware: RCC clock, NVIC */
1065:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->MspDeInitCallback(hadc);
1066:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
1067:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* DeInit the low level hardware: RCC clock, NVIC */
1068:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     HAL_ADC_MspDeInit(hadc);
 2934              		.loc 2 1068 5 is_stmt 1 discriminator 12
 2935 02c8 7868     		ldr	r0, [r7, #4]
 2936 02ca FFF7FEFF 		bl	HAL_ADC_MspDeInit
 2937              	.L121:
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 212


1069:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1070:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1071:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1072:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1073:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Set ADC error code to none */
1074:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   ADC_CLEAR_ERRORCODE(hadc);
 2938              		.loc 2 1074 3
 2939 02ce 7B68     		ldr	r3, [r7, #4]
 2940 02d0 0022     		movs	r2, #0
 2941 02d2 9A65     		str	r2, [r3, #88]
1075:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1076:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset injected channel configuration parameters */
1077:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   hadc->InjectionConfig.ContextQueue = 0;
 2942              		.loc 2 1077 38
 2943 02d4 7B68     		ldr	r3, [r7, #4]
 2944 02d6 0022     		movs	r2, #0
 2945 02d8 DA65     		str	r2, [r3, #92]
1078:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   hadc->InjectionConfig.ChannelCount = 0;
 2946              		.loc 2 1078 38
 2947 02da 7B68     		ldr	r3, [r7, #4]
 2948 02dc 0022     		movs	r2, #0
 2949 02de 1A66     		str	r2, [r3, #96]
1079:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1080:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Set ADC state */
1081:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   hadc->State = HAL_ADC_STATE_RESET;
 2950              		.loc 2 1081 15
 2951 02e0 7B68     		ldr	r3, [r7, #4]
 2952 02e2 0022     		movs	r2, #0
 2953 02e4 5A65     		str	r2, [r3, #84]
1082:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1083:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Process unlocked */
1084:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 2954              		.loc 2 1084 3
 2955 02e6 7B68     		ldr	r3, [r7, #4]
 2956 02e8 0022     		movs	r2, #0
 2957 02ea 83F85020 		strb	r2, [r3, #80]
1085:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1086:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return function status */
1087:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return tmp_hal_status;
 2958              		.loc 2 1087 10
 2959 02ee FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2960              	.L116:
1088:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 2961              		.loc 2 1088 1
 2962 02f0 1846     		mov	r0, r3
 2963 02f2 1437     		adds	r7, r7, #20
 2964              	.LCFI230:
 2965              		.cfi_def_cfa_offset 12
 2966 02f4 BD46     		mov	sp, r7
 2967              	.LCFI231:
 2968              		.cfi_def_cfa_register 13
 2969              		@ sp needed
 2970 02f6 90BD     		pop	{r4, r7, pc}
 2971              	.L131:
 2972              		.align	2
 2973              	.L130:
 2974 02f8 00630258 		.word	1476551424
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 213


 2975 02fc E03000FE 		.word	-33541920
 2976              		.cfi_endproc
 2977              	.LFE334:
 2979              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
 2980              		.align	1
 2981              		.weak	HAL_ADC_MspInit
 2982              		.syntax unified
 2983              		.thumb
 2984              		.thumb_func
 2986              	HAL_ADC_MspInit:
 2987              	.LFB335:
1089:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1090:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
1091:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Initialize the ADC MSP.
1092:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
1093:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval None
1094:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
1095:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** __weak void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
1096:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 2988              		.loc 2 1096 1
 2989              		.cfi_startproc
 2990              		@ args = 0, pretend = 0, frame = 8
 2991              		@ frame_needed = 1, uses_anonymous_args = 0
 2992              		@ link register save eliminated.
 2993 0000 80B4     		push	{r7}
 2994              	.LCFI232:
 2995              		.cfi_def_cfa_offset 4
 2996              		.cfi_offset 7, -4
 2997 0002 83B0     		sub	sp, sp, #12
 2998              	.LCFI233:
 2999              		.cfi_def_cfa_offset 16
 3000 0004 00AF     		add	r7, sp, #0
 3001              	.LCFI234:
 3002              		.cfi_def_cfa_register 7
 3003 0006 7860     		str	r0, [r7, #4]
1097:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1098:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   UNUSED(hadc);
1099:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1100:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1101:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             function HAL_ADC_MspInit must be implemented in the user file.
1102:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****    */
1103:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 3004              		.loc 2 1103 1
 3005 0008 00BF     		nop
 3006 000a 0C37     		adds	r7, r7, #12
 3007              	.LCFI235:
 3008              		.cfi_def_cfa_offset 4
 3009 000c BD46     		mov	sp, r7
 3010              	.LCFI236:
 3011              		.cfi_def_cfa_register 13
 3012              		@ sp needed
 3013 000e 5DF8047B 		ldr	r7, [sp], #4
 3014              	.LCFI237:
 3015              		.cfi_restore 7
 3016              		.cfi_def_cfa_offset 0
 3017 0012 7047     		bx	lr
 3018              		.cfi_endproc
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 214


 3019              	.LFE335:
 3021              		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
 3022              		.align	1
 3023              		.weak	HAL_ADC_MspDeInit
 3024              		.syntax unified
 3025              		.thumb
 3026              		.thumb_func
 3028              	HAL_ADC_MspDeInit:
 3029              	.LFB336:
1104:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1105:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
1106:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  DeInitialize the ADC MSP.
1107:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
1108:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   All ADC instances use the same core clock at RCC level, disabling
1109:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         the core clock reset all ADC instances).
1110:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval None
1111:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
1112:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** __weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef *hadc)
1113:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 3030              		.loc 2 1113 1
 3031              		.cfi_startproc
 3032              		@ args = 0, pretend = 0, frame = 8
 3033              		@ frame_needed = 1, uses_anonymous_args = 0
 3034              		@ link register save eliminated.
 3035 0000 80B4     		push	{r7}
 3036              	.LCFI238:
 3037              		.cfi_def_cfa_offset 4
 3038              		.cfi_offset 7, -4
 3039 0002 83B0     		sub	sp, sp, #12
 3040              	.LCFI239:
 3041              		.cfi_def_cfa_offset 16
 3042 0004 00AF     		add	r7, sp, #0
 3043              	.LCFI240:
 3044              		.cfi_def_cfa_register 7
 3045 0006 7860     		str	r0, [r7, #4]
1114:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1115:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   UNUSED(hadc);
1116:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1117:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1118:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             function HAL_ADC_MspDeInit must be implemented in the user file.
1119:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****    */
1120:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 3046              		.loc 2 1120 1
 3047 0008 00BF     		nop
 3048 000a 0C37     		adds	r7, r7, #12
 3049              	.LCFI241:
 3050              		.cfi_def_cfa_offset 4
 3051 000c BD46     		mov	sp, r7
 3052              	.LCFI242:
 3053              		.cfi_def_cfa_register 13
 3054              		@ sp needed
 3055 000e 5DF8047B 		ldr	r7, [sp], #4
 3056              	.LCFI243:
 3057              		.cfi_restore 7
 3058              		.cfi_def_cfa_offset 0
 3059 0012 7047     		bx	lr
 3060              		.cfi_endproc
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 215


 3061              	.LFE336:
 3063              		.section	.text.HAL_ADC_Start,"ax",%progbits
 3064              		.align	1
 3065              		.global	HAL_ADC_Start
 3066              		.syntax unified
 3067              		.thumb
 3068              		.thumb_func
 3070              	HAL_ADC_Start:
 3071              	.LFB337:
1121:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1122:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1123:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
1124:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Register a User ADC Callback
1125:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         To be used instead of the weak predefined callback
1126:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param  hadc Pointer to a ADC_HandleTypeDef structure that contains
1127:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *                the configuration information for the specified ADC.
1128:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param  CallbackID ID of the callback to be registered
1129:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         This parameter can be one of the following values:
1130:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_COMPLETE_CB_ID      ADC conversion complete callback ID
1131:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_HALF_CB_ID          ADC conversion DMA half-transfer call
1132:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID    ADC analog watchdog 1 callback ID
1133:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_ERROR_CB_ID                    ADC error callback ID
1134:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID  ADC group injected conversion complet
1135:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_QUEUE_OVEFLOW_CB_ID        ADC group injected context queue over
1136:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID    ADC analog watchdog 2 callback ID
1137:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID    ADC analog watchdog 3 callback ID
1138:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_END_OF_SAMPLING_CB_ID          ADC end of sampling callback ID
1139:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID                  ADC Msp Init callback ID
1140:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID                ADC Msp DeInit callback ID
1141:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param  pCallback pointer to the Callback function
1142:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status
1143:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
1144:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef Callb
1145:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
1146:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef status = HAL_OK;
1147:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1148:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (pCallback == NULL)
1149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1150:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Update the error code */
1151:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1152:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1153:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     return HAL_ERROR;
1154:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1155:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1156:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
1157:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1158:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     switch (CallbackID)
1159:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1160:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
1161:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->ConvCpltCallback = pCallback;
1162:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1163:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1164:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_CONVERSION_HALF_CB_ID :
1165:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->ConvHalfCpltCallback = pCallback;
1166:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1167:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1168:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 216


1169:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->LevelOutOfWindowCallback = pCallback;
1170:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1171:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1172:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_ERROR_CB_ID :
1173:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->ErrorCallback = pCallback;
1174:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1175:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1176:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID :
1177:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->InjectedConvCpltCallback = pCallback;
1178:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1179:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1180:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_INJ_QUEUE_OVEFLOW_CB_ID :
1181:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->InjectedQueueOverflowCallback = pCallback;
1182:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1183:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1184:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
1185:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->LevelOutOfWindow2Callback = pCallback;
1186:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1187:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1188:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
1189:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->LevelOutOfWindow3Callback = pCallback;
1190:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1191:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1192:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_END_OF_SAMPLING_CB_ID :
1193:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->EndOfSamplingCallback = pCallback;
1194:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1195:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1196:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
1197:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->MspInitCallback = pCallback;
1198:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1199:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1200:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
1201:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->MspDeInitCallback = pCallback;
1202:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1203:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1204:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       default :
1205:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Update the error code */
1206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1207:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1208:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Return error status */
1209:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         status = HAL_ERROR;
1210:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1211:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1212:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1213:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else if (HAL_ADC_STATE_RESET == hadc->State)
1214:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1215:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     switch (CallbackID)
1216:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1217:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
1218:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->MspInitCallback = pCallback;
1219:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1220:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1221:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
1222:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->MspDeInitCallback = pCallback;
1223:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1224:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1225:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       default :
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 217


1226:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Update the error code */
1227:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1228:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1229:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Return error status */
1230:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         status = HAL_ERROR;
1231:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1232:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1233:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1234:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
1235:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1236:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Update the error code */
1237:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1238:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1239:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Return error status */
1240:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     status =  HAL_ERROR;
1241:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1242:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1243:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return status;
1244:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
1245:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1246:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
1247:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Unregister a ADC Callback
1248:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         ADC callback is redirected to the weak predefined callback
1249:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param  hadc Pointer to a ADC_HandleTypeDef structure that contains
1250:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *                the configuration information for the specified ADC.
1251:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param  CallbackID ID of the callback to be unregistered
1252:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         This parameter can be one of the following values:
1253:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_COMPLETE_CB_ID      ADC conversion complete callback ID
1254:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_HALF_CB_ID          ADC conversion DMA half-transfer call
1255:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID    ADC analog watchdog 1 callback ID
1256:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_ERROR_CB_ID                    ADC error callback ID
1257:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID  ADC group injected conversion complet
1258:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_QUEUE_OVEFLOW_CB_ID        ADC group injected context queue over
1259:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID    ADC analog watchdog 2 callback ID
1260:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID    ADC analog watchdog 3 callback ID
1261:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_END_OF_SAMPLING_CB_ID          ADC end of sampling callback ID
1262:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID                  ADC Msp Init callback ID
1263:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID                ADC Msp DeInit callback ID
1264:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status
1265:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
1266:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_UnRegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef Cal
1267:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
1268:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef status = HAL_OK;
1269:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1270:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
1271:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1272:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     switch (CallbackID)
1273:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1274:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
1275:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->ConvCpltCallback = HAL_ADC_ConvCpltCallback;
1276:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1277:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1278:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_CONVERSION_HALF_CB_ID :
1279:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->ConvHalfCpltCallback = HAL_ADC_ConvHalfCpltCallback;
1280:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1281:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1282:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 218


1283:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->LevelOutOfWindowCallback = HAL_ADC_LevelOutOfWindowCallback;
1284:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1285:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1286:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_ERROR_CB_ID :
1287:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->ErrorCallback = HAL_ADC_ErrorCallback;
1288:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1289:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1290:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID :
1291:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->InjectedConvCpltCallback = HAL_ADCEx_InjectedConvCpltCallback;
1292:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1293:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1294:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_INJ_QUEUE_OVEFLOW_CB_ID :
1295:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;
1296:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1297:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1298:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
1299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->LevelOutOfWindow2Callback = HAL_ADCEx_LevelOutOfWindow2Callback;
1300:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1301:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1302:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
1303:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->LevelOutOfWindow3Callback = HAL_ADCEx_LevelOutOfWindow3Callback;
1304:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1305:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1306:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_END_OF_SAMPLING_CB_ID :
1307:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->EndOfSamplingCallback = HAL_ADCEx_EndOfSamplingCallback;
1308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1309:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1310:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
1311:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit              */
1312:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1313:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1314:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
1315:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit            */
1316:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1317:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1318:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       default :
1319:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Update the error code */
1320:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1321:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1322:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Return error status */
1323:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         status =  HAL_ERROR;
1324:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1325:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1326:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1327:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else if (HAL_ADC_STATE_RESET == hadc->State)
1328:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1329:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     switch (CallbackID)
1330:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1331:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
1332:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->MspInitCallback = HAL_ADC_MspInit;                   /* Legacy weak MspInit          
1333:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1334:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1335:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
1336:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->MspDeInitCallback = HAL_ADC_MspDeInit;               /* Legacy weak MspDeInit        
1337:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1338:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1339:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       default :
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 219


1340:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Update the error code */
1341:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1342:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1343:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Return error status */
1344:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         status =  HAL_ERROR;
1345:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1346:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1347:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1348:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
1349:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1350:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Update the error code */
1351:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1352:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1353:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Return error status */
1354:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     status =  HAL_ERROR;
1355:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1356:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1357:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return status;
1358:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
1359:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1360:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1361:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1362:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
1363:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @}
1364:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
1365:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1366:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group2 ADC Input and Output operation functions
1367:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief    ADC IO operation functions
1368:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *
1369:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** @verbatim
1370:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****  ===============================================================================
1371:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                       ##### IO operation functions #####
1372:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****  ===============================================================================
1373:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1374:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Start conversion of regular group.
1375:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Stop conversion of regular group.
1376:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Poll for conversion complete on regular group.
1377:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Poll for conversion event.
1378:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Get result of regular channel conversion.
1379:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Start conversion of regular group and enable interruptions.
1380:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Stop conversion of regular group and disable interruptions.
1381:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Handle ADC interrupt request
1382:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Start conversion of regular group and enable DMA transfer.
1383:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Stop conversion of regular group and disable ADC DMA transfer.
1384:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** @endverbatim
1385:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @{
1386:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
1387:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1388:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
1389:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Enable ADC, start conversion of regular group.
1390:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Interruptions enabled in this function: None.
1391:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Case of multimode enabled (when multimode feature is available):
1392:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *           if ADC is Slave, ADC is enabled but conversion is not started,
1393:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *           if ADC is master, ADC is enabled and multimode conversion is started.
1394:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
1395:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status
1396:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 220


1397:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
1398:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 3072              		.loc 2 1398 1
 3073              		.cfi_startproc
 3074              		@ args = 0, pretend = 0, frame = 24
 3075              		@ frame_needed = 1, uses_anonymous_args = 0
 3076 0000 80B5     		push	{r7, lr}
 3077              	.LCFI244:
 3078              		.cfi_def_cfa_offset 8
 3079              		.cfi_offset 7, -8
 3080              		.cfi_offset 14, -4
 3081 0002 86B0     		sub	sp, sp, #24
 3082              	.LCFI245:
 3083              		.cfi_def_cfa_offset 32
 3084 0004 00AF     		add	r7, sp, #0
 3085              	.LCFI246:
 3086              		.cfi_def_cfa_register 7
 3087 0006 7860     		str	r0, [r7, #4]
1399:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
1400:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   const ADC_TypeDef *tmpADC_Master;
1401:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 3088              		.loc 2 1401 55
 3089 0008 7B68     		ldr	r3, [r7, #4]
 3090 000a 1B68     		ldr	r3, [r3]
 3091              		.loc 2 1401 35
 3092 000c 5C4A     		ldr	r2, .L157
 3093 000e 9342     		cmp	r3, r2
 3094 0010 04D0     		beq	.L135
 3095              		.loc 2 1401 55 discriminator 2
 3096 0012 7B68     		ldr	r3, [r7, #4]
 3097 0014 1B68     		ldr	r3, [r3]
 3098 0016 5B4A     		ldr	r2, .L157+4
 3099 0018 9342     		cmp	r3, r2
 3100 001a 01D1     		bne	.L136
 3101              	.L135:
 3102              		.loc 2 1401 35 discriminator 3
 3103 001c 5A4B     		ldr	r3, .L157+8
 3104 001e 00E0     		b	.L137
 3105              	.L136:
 3106              		.loc 2 1401 35 is_stmt 0 discriminator 4
 3107 0020 5A4B     		ldr	r3, .L157+12
 3108              	.L137:
 3109              		.loc 2 1401 35 discriminator 6
 3110 0022 1846     		mov	r0, r3
 3111 0024 FFF7FEFF 		bl	LL_ADC_GetMultimode
 3112 0028 3861     		str	r0, [r7, #16]
1402:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1403:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
1404:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1405:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1406:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
1407:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 3113              		.loc 2 1407 7 is_stmt 1 discriminator 6
 3114 002a 7B68     		ldr	r3, [r7, #4]
 3115 002c 1B68     		ldr	r3, [r3]
 3116 002e 1846     		mov	r0, r3
 3117 0030 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 221


 3118 0034 0346     		mov	r3, r0
 3119              		.loc 2 1407 6 discriminator 6
 3120 0036 002B     		cmp	r3, #0
 3121 0038 40F09A80 		bne	.L138
1408:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1409:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Process locked */
1410:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_LOCK(hadc);
 3122              		.loc 2 1410 5
 3123 003c 7B68     		ldr	r3, [r7, #4]
 3124 003e 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 3125 0042 012B     		cmp	r3, #1
 3126 0044 01D1     		bne	.L139
 3127              		.loc 2 1410 5 is_stmt 0 discriminator 1
 3128 0046 0223     		movs	r3, #2
 3129 0048 95E0     		b	.L140
 3130              	.L139:
 3131              		.loc 2 1410 5 discriminator 2
 3132 004a 7B68     		ldr	r3, [r7, #4]
 3133 004c 0122     		movs	r2, #1
 3134 004e 83F85020 		strb	r2, [r3, #80]
1411:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1412:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Enable the ADC peripheral */
1413:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_hal_status = ADC_Enable(hadc);
 3135              		.loc 2 1413 22 is_stmt 1 discriminator 2
 3136 0052 7868     		ldr	r0, [r7, #4]
 3137 0054 FFF7FEFF 		bl	ADC_Enable
 3138 0058 0346     		mov	r3, r0
 3139 005a FB75     		strb	r3, [r7, #23]
1414:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1415:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1416:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 3140              		.loc 2 1416 8 discriminator 2
 3141 005c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3142 005e 002B     		cmp	r3, #0
 3143 0060 40F08180 		bne	.L141
1417:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1418:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state                                                        */
1419:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1420:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1421:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 3144              		.loc 2 1421 7
 3145 0064 7B68     		ldr	r3, [r7, #4]
 3146 0066 5A6D     		ldr	r2, [r3, #84]
 3147 0068 494B     		ldr	r3, .L157+16
 3148 006a 1340     		ands	r3, r3, r2
 3149 006c 43F48072 		orr	r2, r3, #256
 3150 0070 7B68     		ldr	r3, [r7, #4]
 3151 0072 5A65     		str	r2, [r3, #84]
1422:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1423:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1424:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1425:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
1426:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         - if ADC instance is master or if multimode feature is not available
1427:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         - if multimode setting is disabled (ADC instance slave in independent mode) */
1428:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 3152              		.loc 2 1428 12
 3153 0074 7B68     		ldr	r3, [r7, #4]
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 222


 3154 0076 1B68     		ldr	r3, [r3]
 3155 0078 424A     		ldr	r2, .L157+4
 3156 007a 9342     		cmp	r3, r2
 3157 007c 02D0     		beq	.L142
 3158              		.loc 2 1428 12 is_stmt 0 discriminator 1
 3159 007e 7B68     		ldr	r3, [r7, #4]
 3160 0080 1B68     		ldr	r3, [r3]
 3161 0082 00E0     		b	.L143
 3162              	.L142:
 3163              		.loc 2 1428 12 discriminator 2
 3164 0084 3E4B     		ldr	r3, .L157
 3165              	.L143:
 3166              		.loc 2 1428 66 is_stmt 1 discriminator 4
 3167 0086 7A68     		ldr	r2, [r7, #4]
 3168 0088 1268     		ldr	r2, [r2]
 3169              		.loc 2 1428 10 discriminator 4
 3170 008a 9342     		cmp	r3, r2
 3171 008c 02D0     		beq	.L144
1429:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 3172              		.loc 2 1429 11
 3173 008e 3B69     		ldr	r3, [r7, #16]
 3174 0090 002B     		cmp	r3, #0
 3175 0092 05D1     		bne	.L145
 3176              	.L144:
1430:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          )
1431:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1432:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 3177              		.loc 2 1432 9
 3178 0094 7B68     		ldr	r3, [r7, #4]
 3179 0096 5B6D     		ldr	r3, [r3, #84]
 3180 0098 23F48012 		bic	r2, r3, #1048576
 3181 009c 7B68     		ldr	r3, [r7, #4]
 3182 009e 5A65     		str	r2, [r3, #84]
 3183              	.L145:
1433:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1434:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1435:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC error code */
1436:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Check if a conversion is on going on ADC group injected */
1437:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 3184              		.loc 2 1437 11
 3185 00a0 7B68     		ldr	r3, [r7, #4]
 3186 00a2 5B6D     		ldr	r3, [r3, #84]
 3187 00a4 03F48053 		and	r3, r3, #4096
 3188              		.loc 2 1437 10
 3189 00a8 B3F5805F 		cmp	r3, #4096
 3190 00ac 06D1     		bne	.L146
1438:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1439:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Reset ADC error code fields related to regular conversions only */
1440:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 3191              		.loc 2 1440 9
 3192 00ae 7B68     		ldr	r3, [r7, #4]
 3193 00b0 9B6D     		ldr	r3, [r3, #88]
 3194 00b2 23F00602 		bic	r2, r3, #6
 3195 00b6 7B68     		ldr	r3, [r7, #4]
 3196 00b8 9A65     		str	r2, [r3, #88]
 3197 00ba 02E0     		b	.L147
 3198              	.L146:
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 223


1441:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1442:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
1443:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1444:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Reset all ADC error code fields */
1445:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         ADC_CLEAR_ERRORCODE(hadc);
 3199              		.loc 2 1445 9
 3200 00bc 7B68     		ldr	r3, [r7, #4]
 3201 00be 0022     		movs	r2, #0
 3202 00c0 9A65     		str	r2, [r3, #88]
 3203              	.L147:
1446:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1447:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1448:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Clear ADC group regular conversion flag and overrun flag               */
1449:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC operations) */
1450:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 3204              		.loc 2 1450 7
 3205 00c2 7B68     		ldr	r3, [r7, #4]
 3206 00c4 1B68     		ldr	r3, [r3]
 3207 00c6 1C22     		movs	r2, #28
 3208 00c8 1A60     		str	r2, [r3]
1451:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1452:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Process unlocked */
1453:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1454:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1455:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 3209              		.loc 2 1455 7
 3210 00ca 7B68     		ldr	r3, [r7, #4]
 3211 00cc 0022     		movs	r2, #0
 3212 00ce 83F85020 		strb	r2, [r3, #80]
1456:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1457:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1458:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1459:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1460:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* trigger event.                                                       */
1461:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Case of multimode enabled (when multimode feature is available):     */
1462:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
1463:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /*    enabled only (conversion is not started),                         */
1464:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /*  - if ADC is master, ADC is enabled and conversion is started.       */
1465:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 3213              		.loc 2 1465 12
 3214 00d2 7B68     		ldr	r3, [r7, #4]
 3215 00d4 1B68     		ldr	r3, [r3]
 3216 00d6 2B4A     		ldr	r2, .L157+4
 3217 00d8 9342     		cmp	r3, r2
 3218 00da 02D0     		beq	.L148
 3219              		.loc 2 1465 12 is_stmt 0 discriminator 1
 3220 00dc 7B68     		ldr	r3, [r7, #4]
 3221 00de 1B68     		ldr	r3, [r3]
 3222 00e0 00E0     		b	.L149
 3223              	.L148:
 3224              		.loc 2 1465 12 discriminator 2
 3225 00e2 274B     		ldr	r3, .L157
 3226              	.L149:
 3227              		.loc 2 1465 66 is_stmt 1 discriminator 4
 3228 00e4 7A68     		ldr	r2, [r7, #4]
 3229 00e6 1268     		ldr	r2, [r2]
 3230              		.loc 2 1465 10 discriminator 4
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 224


 3231 00e8 9342     		cmp	r3, r2
 3232 00ea 08D0     		beq	.L150
1466:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 3233              		.loc 2 1466 11
 3234 00ec 3B69     		ldr	r3, [r7, #16]
 3235 00ee 002B     		cmp	r3, #0
 3236 00f0 05D0     		beq	.L150
1467:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 3237              		.loc 2 1467 11
 3238 00f2 3B69     		ldr	r3, [r7, #16]
 3239 00f4 052B     		cmp	r3, #5
 3240 00f6 02D0     		beq	.L150
1468:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 3241              		.loc 2 1468 11
 3242 00f8 3B69     		ldr	r3, [r7, #16]
 3243 00fa 092B     		cmp	r3, #9
 3244 00fc 14D1     		bne	.L151
 3245              	.L150:
1469:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          )
1470:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1471:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* ADC instance is not a multimode slave instance with multimode regular conversions enable
1472:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 3246              		.loc 2 1472 13
 3247 00fe 7B68     		ldr	r3, [r7, #4]
 3248 0100 1B68     		ldr	r3, [r3]
 3249 0102 DB68     		ldr	r3, [r3, #12]
 3250 0104 03F00073 		and	r3, r3, #33554432
 3251              		.loc 2 1472 12
 3252 0108 002B     		cmp	r3, #0
 3253 010a 07D0     		beq	.L152
1473:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
1474:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 3254              		.loc 2 1474 11
 3255 010c 7B68     		ldr	r3, [r7, #4]
 3256 010e 5B6D     		ldr	r3, [r3, #84]
 3257 0110 23F44053 		bic	r3, r3, #12288
 3258 0114 43F48052 		orr	r2, r3, #4096
 3259 0118 7B68     		ldr	r3, [r7, #4]
 3260 011a 5A65     		str	r2, [r3, #84]
 3261              	.L152:
1475:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
1476:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1477:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Start ADC group regular conversion */
1478:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         LL_ADC_REG_StartConversion(hadc->Instance);
 3262              		.loc 2 1478 9
 3263 011c 7B68     		ldr	r3, [r7, #4]
 3264 011e 1B68     		ldr	r3, [r3]
 3265 0120 1846     		mov	r0, r3
 3266 0122 FFF7FEFF 		bl	LL_ADC_REG_StartConversion
 3267 0126 25E0     		b	.L156
 3268              	.L151:
1479:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1480:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
1481:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1482:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
1483:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 3269              		.loc 2 1483 9
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 225


 3270 0128 7B68     		ldr	r3, [r7, #4]
 3271 012a 5B6D     		ldr	r3, [r3, #84]
 3272 012c 43F48012 		orr	r2, r3, #1048576
 3273 0130 7B68     		ldr	r3, [r7, #4]
 3274 0132 5A65     		str	r2, [r3, #84]
1484:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* if Master ADC JAUTO bit is set, update Slave State in setting
1485:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****            HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
1486:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 3275              		.loc 2 1486 25
 3276 0134 7B68     		ldr	r3, [r7, #4]
 3277 0136 1B68     		ldr	r3, [r3]
 3278 0138 124A     		ldr	r2, .L157+4
 3279 013a 9342     		cmp	r3, r2
 3280 013c 02D0     		beq	.L154
 3281              		.loc 2 1486 25 is_stmt 0 discriminator 1
 3282 013e 7B68     		ldr	r3, [r7, #4]
 3283 0140 1B68     		ldr	r3, [r3]
 3284 0142 00E0     		b	.L155
 3285              	.L154:
 3286              		.loc 2 1486 25 discriminator 2
 3287 0144 0E4B     		ldr	r3, .L157
 3288              	.L155:
 3289              		.loc 2 1486 23 is_stmt 1 discriminator 4
 3290 0146 FB60     		str	r3, [r7, #12]
1487:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 3291              		.loc 2 1487 13 discriminator 4
 3292 0148 FB68     		ldr	r3, [r7, #12]
 3293 014a DB68     		ldr	r3, [r3, #12]
 3294 014c 03F00073 		and	r3, r3, #33554432
 3295              		.loc 2 1487 12 discriminator 4
 3296 0150 002B     		cmp	r3, #0
 3297 0152 0FD0     		beq	.L156
1488:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
1489:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 3298              		.loc 2 1489 11
 3299 0154 7B68     		ldr	r3, [r7, #4]
 3300 0156 5B6D     		ldr	r3, [r3, #84]
 3301 0158 23F44053 		bic	r3, r3, #12288
 3302 015c 43F48052 		orr	r2, r3, #4096
 3303 0160 7B68     		ldr	r3, [r7, #4]
 3304 0162 5A65     		str	r2, [r3, #84]
 3305 0164 06E0     		b	.L156
 3306              	.L141:
1490:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
1491:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1492:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1493:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1494:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
1495:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1496:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Process unlocked */
1497:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 3307              		.loc 2 1497 7
 3308 0166 7B68     		ldr	r3, [r7, #4]
 3309 0168 0022     		movs	r2, #0
 3310 016a 83F85020 		strb	r2, [r3, #80]
 3311 016e 01E0     		b	.L156
 3312              	.L138:
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 226


1498:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1499:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1500:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
1501:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1502:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
 3313              		.loc 2 1502 20
 3314 0170 0223     		movs	r3, #2
 3315 0172 FB75     		strb	r3, [r7, #23]
 3316              	.L156:
1503:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1504:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1505:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return function status */
1506:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return tmp_hal_status;
 3317              		.loc 2 1506 10
 3318 0174 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3319              	.L140:
1507:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 3320              		.loc 2 1507 1
 3321 0176 1846     		mov	r0, r3
 3322 0178 1837     		adds	r7, r7, #24
 3323              	.LCFI247:
 3324              		.cfi_def_cfa_offset 8
 3325 017a BD46     		mov	sp, r7
 3326              	.LCFI248:
 3327              		.cfi_def_cfa_register 13
 3328              		@ sp needed
 3329 017c 80BD     		pop	{r7, pc}
 3330              	.L158:
 3331 017e 00BF     		.align	2
 3332              	.L157:
 3333 0180 00200240 		.word	1073881088
 3334 0184 00210240 		.word	1073881344
 3335 0188 00230240 		.word	1073881856
 3336 018c 00630258 		.word	1476551424
 3337 0190 FEF0FFFF 		.word	-3842
 3338              		.cfi_endproc
 3339              	.LFE337:
 3341              		.section	.text.HAL_ADC_Stop,"ax",%progbits
 3342              		.align	1
 3343              		.global	HAL_ADC_Stop
 3344              		.syntax unified
 3345              		.thumb
 3346              		.thumb_func
 3348              	HAL_ADC_Stop:
 3349              	.LFB338:
1508:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1509:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
1510:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected channels in
1511:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC peripheral.
1512:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note:  ADC peripheral disable is forcing stop of potential
1513:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         conversion on injected group. If injected group is under use, it
1514:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
1515:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
1516:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status.
1517:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
1518:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
1519:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 227


 3350              		.loc 2 1519 1
 3351              		.cfi_startproc
 3352              		@ args = 0, pretend = 0, frame = 16
 3353              		@ frame_needed = 1, uses_anonymous_args = 0
 3354 0000 80B5     		push	{r7, lr}
 3355              	.LCFI249:
 3356              		.cfi_def_cfa_offset 8
 3357              		.cfi_offset 7, -8
 3358              		.cfi_offset 14, -4
 3359 0002 84B0     		sub	sp, sp, #16
 3360              	.LCFI250:
 3361              		.cfi_def_cfa_offset 24
 3362 0004 00AF     		add	r7, sp, #0
 3363              	.LCFI251:
 3364              		.cfi_def_cfa_register 7
 3365 0006 7860     		str	r0, [r7, #4]
1520:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
1521:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1522:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
1523:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1524:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1525:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Process locked */
1526:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_LOCK(hadc);
 3366              		.loc 2 1526 3
 3367 0008 7B68     		ldr	r3, [r7, #4]
 3368 000a 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 3369 000e 012B     		cmp	r3, #1
 3370 0010 01D1     		bne	.L160
 3371              		.loc 2 1526 3 is_stmt 0 discriminator 1
 3372 0012 0223     		movs	r3, #2
 3373 0014 21E0     		b	.L161
 3374              	.L160:
 3375              		.loc 2 1526 3 discriminator 2
 3376 0016 7B68     		ldr	r3, [r7, #4]
 3377 0018 0122     		movs	r2, #1
 3378 001a 83F85020 		strb	r2, [r3, #80]
1527:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1528:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* 1. Stop potential conversion on going, on ADC groups regular and injected */
1529:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 3379              		.loc 2 1529 20 is_stmt 1 discriminator 2
 3380 001e 0321     		movs	r1, #3
 3381 0020 7868     		ldr	r0, [r7, #4]
 3382 0022 FFF7FEFF 		bl	ADC_ConversionStop
 3383 0026 0346     		mov	r3, r0
 3384 0028 FB73     		strb	r3, [r7, #15]
1530:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1531:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1532:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 3385              		.loc 2 1532 6 discriminator 2
 3386 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3387 002c 002B     		cmp	r3, #0
 3388 002e 0FD1     		bne	.L162
1533:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1534:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
1535:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
 3389              		.loc 2 1535 22
 3390 0030 7868     		ldr	r0, [r7, #4]
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 228


 3391 0032 FFF7FEFF 		bl	ADC_Disable
 3392 0036 0346     		mov	r3, r0
 3393 0038 FB73     		strb	r3, [r7, #15]
1536:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1537:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
1538:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 3394              		.loc 2 1538 8
 3395 003a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3396 003c 002B     		cmp	r3, #0
 3397 003e 07D1     		bne	.L162
1539:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1540:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state */
1541:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 3398              		.loc 2 1541 7
 3399 0040 7B68     		ldr	r3, [r7, #4]
 3400 0042 5A6D     		ldr	r2, [r3, #84]
 3401 0044 074B     		ldr	r3, .L163
 3402 0046 1340     		ands	r3, r3, r2
 3403 0048 43F00102 		orr	r2, r3, #1
 3404 004c 7B68     		ldr	r3, [r7, #4]
 3405 004e 5A65     		str	r2, [r3, #84]
 3406              	.L162:
1542:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1543:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1544:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1545:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1546:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1547:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Process unlocked */
1548:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 3407              		.loc 2 1548 3
 3408 0050 7B68     		ldr	r3, [r7, #4]
 3409 0052 0022     		movs	r2, #0
 3410 0054 83F85020 		strb	r2, [r3, #80]
1549:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1550:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return function status */
1551:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return tmp_hal_status;
 3411              		.loc 2 1551 10
 3412 0058 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3413              	.L161:
1552:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 3414              		.loc 2 1552 1
 3415 005a 1846     		mov	r0, r3
 3416 005c 1037     		adds	r7, r7, #16
 3417              	.LCFI252:
 3418              		.cfi_def_cfa_offset 8
 3419 005e BD46     		mov	sp, r7
 3420              	.LCFI253:
 3421              		.cfi_def_cfa_register 13
 3422              		@ sp needed
 3423 0060 80BD     		pop	{r7, pc}
 3424              	.L164:
 3425 0062 00BF     		.align	2
 3426              	.L163:
 3427 0064 FEEEFFFF 		.word	-4354
 3428              		.cfi_endproc
 3429              	.LFE338:
 3431              		.section	.text.HAL_ADC_PollForConversion,"ax",%progbits
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 229


 3432              		.align	1
 3433              		.global	HAL_ADC_PollForConversion
 3434              		.syntax unified
 3435              		.thumb
 3436              		.thumb_func
 3438              	HAL_ADC_PollForConversion:
 3439              	.LFB339:
1553:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1554:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
1555:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Wait for regular group conversion to be completed.
1556:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   ADC conversion flags EOS (end of sequence) and EOC (end of
1557:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         conversion) are cleared by this function, with an exception:
1558:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         if low power feature "LowPowerAutoWait" is enabled, flags are
1559:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         not cleared to not interfere with this feature until data register
1560:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         is read using function HAL_ADC_GetValue().
1561:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   This function cannot be used in a particular setup: ADC configured
1562:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         in DMA mode and polling for end of each conversion (ADC init
1563:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SINGLE_CONV).
1564:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         In this case, DMA resets the flag EOC and polling cannot be
1565:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         performed on each conversion. Nevertheless, polling can still
1566:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         be performed on the complete sequence (ADC init
1567:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SEQ_CONV).
1568:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
1569:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param Timeout Timeout value in millisecond.
1570:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status
1571:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
1572:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
1573:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 3440              		.loc 2 1573 1
 3441              		.cfi_startproc
 3442              		@ args = 0, pretend = 0, frame = 32
 3443              		@ frame_needed = 1, uses_anonymous_args = 0
 3444 0000 80B5     		push	{r7, lr}
 3445              	.LCFI254:
 3446              		.cfi_def_cfa_offset 8
 3447              		.cfi_offset 7, -8
 3448              		.cfi_offset 14, -4
 3449 0002 88B0     		sub	sp, sp, #32
 3450              	.LCFI255:
 3451              		.cfi_def_cfa_offset 40
 3452 0004 00AF     		add	r7, sp, #0
 3453              	.LCFI256:
 3454              		.cfi_def_cfa_register 7
 3455 0006 7860     		str	r0, [r7, #4]
 3456 0008 3960     		str	r1, [r7]
1574:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tickstart;
1575:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_Flag_End;
1576:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_cfgr;
1577:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   const ADC_TypeDef *tmpADC_Master;
1578:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 3457              		.loc 2 1578 55
 3458 000a 7B68     		ldr	r3, [r7, #4]
 3459 000c 1B68     		ldr	r3, [r3]
 3460              		.loc 2 1578 35
 3461 000e 724A     		ldr	r2, .L192
 3462 0010 9342     		cmp	r3, r2
 3463 0012 04D0     		beq	.L166
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 230


 3464              		.loc 2 1578 55 discriminator 2
 3465 0014 7B68     		ldr	r3, [r7, #4]
 3466 0016 1B68     		ldr	r3, [r3]
 3467 0018 704A     		ldr	r2, .L192+4
 3468 001a 9342     		cmp	r3, r2
 3469 001c 01D1     		bne	.L167
 3470              	.L166:
 3471              		.loc 2 1578 35 discriminator 3
 3472 001e 704B     		ldr	r3, .L192+8
 3473 0020 00E0     		b	.L168
 3474              	.L167:
 3475              		.loc 2 1578 35 is_stmt 0 discriminator 4
 3476 0022 704B     		ldr	r3, .L192+12
 3477              	.L168:
 3478              		.loc 2 1578 35 discriminator 6
 3479 0024 1846     		mov	r0, r3
 3480 0026 FFF7FEFF 		bl	LL_ADC_GetMultimode
 3481 002a 7861     		str	r0, [r7, #20]
1579:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1580:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
1581:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1582:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1583:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* If end of conversion selected to end of sequence conversions */
1584:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 3482              		.loc 2 1584 17 is_stmt 1 discriminator 6
 3483 002c 7B68     		ldr	r3, [r7, #4]
 3484 002e 1B69     		ldr	r3, [r3, #16]
 3485              		.loc 2 1584 6 discriminator 6
 3486 0030 082B     		cmp	r3, #8
 3487 0032 02D1     		bne	.L169
1585:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1586:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_Flag_End = ADC_FLAG_EOS;
 3488              		.loc 2 1586 18
 3489 0034 0823     		movs	r3, #8
 3490 0036 FB61     		str	r3, [r7, #28]
 3491 0038 37E0     		b	.L170
 3492              	.L169:
1587:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1588:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* If end of conversion selected to end of unitary conversion */
1589:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else /* ADC_EOC_SINGLE_CONV */
1590:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1591:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Verification that ADC configuration is compliant with polling for      */
1592:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* each conversion:                                                       */
1593:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
1594:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* several ranks and polling for end of each conversion.                  */
1595:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* For code simplicity sake, this particular case is generalized to       */
1596:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* ADC configured in DMA mode and and polling for end of each conversion. */
1597:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 3493              		.loc 2 1597 8
 3494 003a 7B69     		ldr	r3, [r7, #20]
 3495 003c 002B     		cmp	r3, #0
 3496 003e 05D0     		beq	.L171
1598:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 3497              		.loc 2 1598 9
 3498 0040 7B69     		ldr	r3, [r7, #20]
 3499 0042 052B     		cmp	r3, #5
 3500 0044 02D0     		beq	.L171
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 231


1599:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 3501              		.loc 2 1599 9
 3502 0046 7B69     		ldr	r3, [r7, #20]
 3503 0048 092B     		cmp	r3, #9
 3504 004a 11D1     		bne	.L172
 3505              	.L171:
1600:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        )
1601:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1602:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Check DMNGT bit in handle ADC CFGR register */
1603:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 3506              		.loc 2 1603 11
 3507 004c 7B68     		ldr	r3, [r7, #4]
 3508 004e 1B68     		ldr	r3, [r3]
 3509 0050 DB68     		ldr	r3, [r3, #12]
 3510 0052 03F00103 		and	r3, r3, #1
 3511              		.loc 2 1603 10
 3512 0056 002B     		cmp	r3, #0
 3513 0058 07D0     		beq	.L173
1604:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1605:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 3514              		.loc 2 1605 9
 3515 005a 7B68     		ldr	r3, [r7, #4]
 3516 005c 5B6D     		ldr	r3, [r3, #84]
 3517 005e 43F02002 		orr	r2, r3, #32
 3518 0062 7B68     		ldr	r3, [r7, #4]
 3519 0064 5A65     		str	r2, [r3, #84]
1606:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         return HAL_ERROR;
 3520              		.loc 2 1606 16
 3521 0066 0123     		movs	r3, #1
 3522 0068 B1E0     		b	.L174
 3523              	.L173:
1607:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1608:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
1609:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1610:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmp_Flag_End = (ADC_FLAG_EOC);
 3524              		.loc 2 1610 22
 3525 006a 0423     		movs	r3, #4
 3526 006c FB61     		str	r3, [r7, #28]
1603:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 3527              		.loc 2 1603 10
 3528 006e 1CE0     		b	.L170
 3529              	.L172:
1611:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1612:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1613:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
1614:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1615:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Check ADC DMA mode in multimode on ADC group regular */
1616:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_
 3530              		.loc 2 1616 38
 3531 0070 7B68     		ldr	r3, [r7, #4]
 3532 0072 1B68     		ldr	r3, [r3]
 3533              		.loc 2 1616 11
 3534 0074 584A     		ldr	r2, .L192
 3535 0076 9342     		cmp	r3, r2
 3536 0078 04D0     		beq	.L175
 3537              		.loc 2 1616 38 discriminator 2
 3538 007a 7B68     		ldr	r3, [r7, #4]
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 232


 3539 007c 1B68     		ldr	r3, [r3]
 3540 007e 574A     		ldr	r2, .L192+4
 3541 0080 9342     		cmp	r3, r2
 3542 0082 01D1     		bne	.L176
 3543              	.L175:
 3544              		.loc 2 1616 11 discriminator 3
 3545 0084 564B     		ldr	r3, .L192+8
 3546 0086 00E0     		b	.L177
 3547              	.L176:
 3548              		.loc 2 1616 11 is_stmt 0 discriminator 4
 3549 0088 564B     		ldr	r3, .L192+12
 3550              	.L177:
 3551              		.loc 2 1616 11 discriminator 6
 3552 008a 1846     		mov	r0, r3
 3553 008c FFF7FEFF 		bl	LL_ADC_GetMultiDMATransfer
 3554 0090 0346     		mov	r3, r0
 3555              		.loc 2 1616 10 is_stmt 1 discriminator 6
 3556 0092 002B     		cmp	r3, #0
 3557 0094 07D0     		beq	.L178
1617:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1618:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 3558              		.loc 2 1618 9
 3559 0096 7B68     		ldr	r3, [r7, #4]
 3560 0098 5B6D     		ldr	r3, [r3, #84]
 3561 009a 43F02002 		orr	r2, r3, #32
 3562 009e 7B68     		ldr	r3, [r7, #4]
 3563 00a0 5A65     		str	r2, [r3, #84]
1619:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         return HAL_ERROR;
 3564              		.loc 2 1619 16
 3565 00a2 0123     		movs	r3, #1
 3566 00a4 93E0     		b	.L174
 3567              	.L178:
1620:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1621:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
1622:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1623:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmp_Flag_End = (ADC_FLAG_EOC);
 3568              		.loc 2 1623 22
 3569 00a6 0423     		movs	r3, #4
 3570 00a8 FB61     		str	r3, [r7, #28]
 3571              	.L170:
1624:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1625:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1626:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1627:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1628:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Get tick count */
1629:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   tickstart = HAL_GetTick();
 3572              		.loc 2 1629 15
 3573 00aa FFF7FEFF 		bl	HAL_GetTick
 3574 00ae 3861     		str	r0, [r7, #16]
1630:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1631:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Wait until End of unitary conversion or sequence conversions flag is raised */
1632:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 3575              		.loc 2 1632 9
 3576 00b0 21E0     		b	.L179
 3577              	.L181:
1633:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1634:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 233


1635:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (Timeout != HAL_MAX_DELAY)
 3578              		.loc 2 1635 8
 3579 00b2 3B68     		ldr	r3, [r7]
 3580 00b4 B3F1FF3F 		cmp	r3, #-1
 3581 00b8 1DD0     		beq	.L179
1636:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1637:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 3582              		.loc 2 1637 13
 3583 00ba FFF7FEFF 		bl	HAL_GetTick
 3584 00be 0246     		mov	r2, r0
 3585              		.loc 2 1637 27
 3586 00c0 3B69     		ldr	r3, [r7, #16]
 3587 00c2 D31A     		subs	r3, r2, r3
 3588              		.loc 2 1637 10
 3589 00c4 3A68     		ldr	r2, [r7]
 3590 00c6 9A42     		cmp	r2, r3
 3591 00c8 02D3     		bcc	.L180
 3592              		.loc 2 1637 51 discriminator 1
 3593 00ca 3B68     		ldr	r3, [r7]
 3594 00cc 002B     		cmp	r3, #0
 3595 00ce 12D1     		bne	.L179
 3596              	.L180:
1638:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1639:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* New check to avoid false timeout detection in case of preemption */
1640:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 3597              		.loc 2 1640 17
 3598 00d0 7B68     		ldr	r3, [r7, #4]
 3599 00d2 1B68     		ldr	r3, [r3]
 3600              		.loc 2 1640 27
 3601 00d4 1A68     		ldr	r2, [r3]
 3602              		.loc 2 1640 33
 3603 00d6 FB69     		ldr	r3, [r7, #28]
 3604 00d8 1340     		ands	r3, r3, r2
 3605              		.loc 2 1640 11
 3606 00da 002B     		cmp	r3, #0
 3607 00dc 0BD1     		bne	.L179
1641:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
1642:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Update ADC state machine to timeout */
1643:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 3608              		.loc 2 1643 11
 3609 00de 7B68     		ldr	r3, [r7, #4]
 3610 00e0 5B6D     		ldr	r3, [r3, #84]
 3611 00e2 43F00402 		orr	r2, r3, #4
 3612 00e6 7B68     		ldr	r3, [r7, #4]
 3613 00e8 5A65     		str	r2, [r3, #84]
1644:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1645:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Process unlocked */
1646:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           __HAL_UNLOCK(hadc);
 3614              		.loc 2 1646 11
 3615 00ea 7B68     		ldr	r3, [r7, #4]
 3616 00ec 0022     		movs	r2, #0
 3617 00ee 83F85020 		strb	r2, [r3, #80]
1647:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1648:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           return HAL_TIMEOUT;
 3618              		.loc 2 1648 18
 3619 00f2 0323     		movs	r3, #3
 3620 00f4 6BE0     		b	.L174
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 234


 3621              	.L179:
1632:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 3622              		.loc 2 1632 15
 3623 00f6 7B68     		ldr	r3, [r7, #4]
 3624 00f8 1B68     		ldr	r3, [r3]
1632:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 3625              		.loc 2 1632 25
 3626 00fa 1A68     		ldr	r2, [r3]
1632:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 3627              		.loc 2 1632 31
 3628 00fc FB69     		ldr	r3, [r7, #28]
 3629 00fe 1340     		ands	r3, r3, r2
1632:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 3630              		.loc 2 1632 9
 3631 0100 002B     		cmp	r3, #0
 3632 0102 D6D0     		beq	.L181
1649:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
1650:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1651:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1652:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1653:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1654:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Update ADC state machine */
1655:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 3633              		.loc 2 1655 3
 3634 0104 7B68     		ldr	r3, [r7, #4]
 3635 0106 5B6D     		ldr	r3, [r3, #84]
 3636 0108 43F40072 		orr	r2, r3, #512
 3637 010c 7B68     		ldr	r3, [r7, #4]
 3638 010e 5A65     		str	r2, [r3, #84]
1656:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1657:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Determine whether any further conversion upcoming on group regular       */
1658:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* by external trigger, continuous mode or scan sequence on going.          */
1659:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 3639              		.loc 2 1659 8
 3640 0110 7B68     		ldr	r3, [r7, #4]
 3641 0112 1B68     		ldr	r3, [r3]
 3642 0114 1846     		mov	r0, r3
 3643 0116 FFF7FEFF 		bl	LL_ADC_REG_IsTriggerSourceSWStart
 3644 011a 0346     		mov	r3, r0
 3645              		.loc 2 1659 6
 3646 011c 002B     		cmp	r3, #0
 3647 011e 1CD0     		beq	.L182
1660:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       && (hadc->Init.ContinuousConvMode == DISABLE)
 3648              		.loc 2 1660 21
 3649 0120 7B68     		ldr	r3, [r7, #4]
 3650 0122 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
 3651              		.loc 2 1660 7
 3652 0124 002B     		cmp	r3, #0
 3653 0126 18D1     		bne	.L182
1661:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      )
1662:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1663:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Check whether end of sequence is reached */
1664:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 3654              		.loc 2 1664 9
 3655 0128 7B68     		ldr	r3, [r7, #4]
 3656 012a 1B68     		ldr	r3, [r3]
 3657 012c 1B68     		ldr	r3, [r3]
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 235


 3658 012e 03F00803 		and	r3, r3, #8
 3659              		.loc 2 1664 8
 3660 0132 082B     		cmp	r3, #8
 3661 0134 11D1     		bne	.L182
1665:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1666:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state */
1667:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 3662              		.loc 2 1667 7
 3663 0136 7B68     		ldr	r3, [r7, #4]
 3664 0138 5B6D     		ldr	r3, [r3, #84]
 3665 013a 23F48072 		bic	r2, r3, #256
 3666 013e 7B68     		ldr	r3, [r7, #4]
 3667 0140 5A65     		str	r2, [r3, #84]
1668:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1669:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 3668              		.loc 2 1669 16
 3669 0142 7B68     		ldr	r3, [r7, #4]
 3670 0144 5B6D     		ldr	r3, [r3, #84]
 3671              		.loc 2 1669 24
 3672 0146 03F48053 		and	r3, r3, #4096
 3673              		.loc 2 1669 10
 3674 014a 002B     		cmp	r3, #0
 3675 014c 05D1     		bne	.L182
1670:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1671:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 3676              		.loc 2 1671 9
 3677 014e 7B68     		ldr	r3, [r7, #4]
 3678 0150 5B6D     		ldr	r3, [r3, #84]
 3679 0152 43F00102 		orr	r2, r3, #1
 3680 0156 7B68     		ldr	r3, [r7, #4]
 3681 0158 5A65     		str	r2, [r3, #84]
 3682              	.L182:
1672:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1673:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1674:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1675:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1676:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Get relevant register CFGR in ADC instance of ADC master or slave        */
1677:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* in function of multimode state (for devices with multimode               */
1678:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* available).                                                              */
1679:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 3683              		.loc 2 1679 8
 3684 015a 7B68     		ldr	r3, [r7, #4]
 3685 015c 1B68     		ldr	r3, [r3]
 3686 015e 1F4A     		ldr	r2, .L192+4
 3687 0160 9342     		cmp	r3, r2
 3688 0162 02D0     		beq	.L183
 3689              		.loc 2 1679 8 is_stmt 0 discriminator 1
 3690 0164 7B68     		ldr	r3, [r7, #4]
 3691 0166 1B68     		ldr	r3, [r3]
 3692 0168 00E0     		b	.L184
 3693              	.L183:
 3694              		.loc 2 1679 8 discriminator 2
 3695 016a 1B4B     		ldr	r3, .L192
 3696              	.L184:
 3697              		.loc 2 1679 62 is_stmt 1 discriminator 4
 3698 016c 7A68     		ldr	r2, [r7, #4]
 3699 016e 1268     		ldr	r2, [r2]
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 236


 3700              		.loc 2 1679 6 discriminator 4
 3701 0170 9342     		cmp	r3, r2
 3702 0172 08D0     		beq	.L185
1680:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 3703              		.loc 2 1680 7
 3704 0174 7B69     		ldr	r3, [r7, #20]
 3705 0176 002B     		cmp	r3, #0
 3706 0178 05D0     		beq	.L185
1681:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 3707              		.loc 2 1681 7
 3708 017a 7B69     		ldr	r3, [r7, #20]
 3709 017c 052B     		cmp	r3, #5
 3710 017e 02D0     		beq	.L185
1682:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 3711              		.loc 2 1682 7
 3712 0180 7B69     		ldr	r3, [r7, #20]
 3713 0182 092B     		cmp	r3, #9
 3714 0184 04D1     		bne	.L186
 3715              	.L185:
1683:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      )
1684:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1685:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Retrieve handle ADC CFGR register */
1686:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 3716              		.loc 2 1686 16
 3717 0186 7B68     		ldr	r3, [r7, #4]
 3718 0188 1B68     		ldr	r3, [r3]
 3719              		.loc 2 1686 14
 3720 018a DB68     		ldr	r3, [r3, #12]
 3721 018c BB61     		str	r3, [r7, #24]
 3722 018e 0CE0     		b	.L187
 3723              	.L186:
1687:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1688:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
1689:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1690:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Retrieve Master ADC CFGR register */
1691:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 3724              		.loc 2 1691 21
 3725 0190 7B68     		ldr	r3, [r7, #4]
 3726 0192 1B68     		ldr	r3, [r3]
 3727 0194 114A     		ldr	r2, .L192+4
 3728 0196 9342     		cmp	r3, r2
 3729 0198 02D0     		beq	.L188
 3730              		.loc 2 1691 21 is_stmt 0 discriminator 1
 3731 019a 7B68     		ldr	r3, [r7, #4]
 3732 019c 1B68     		ldr	r3, [r3]
 3733 019e 00E0     		b	.L189
 3734              	.L188:
 3735              		.loc 2 1691 21 discriminator 2
 3736 01a0 0D4B     		ldr	r3, .L192
 3737              	.L189:
 3738              		.loc 2 1691 19 is_stmt 1 discriminator 4
 3739 01a2 FB60     		str	r3, [r7, #12]
1692:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 3740              		.loc 2 1692 14 discriminator 4
 3741 01a4 FB68     		ldr	r3, [r7, #12]
 3742 01a6 DB68     		ldr	r3, [r3, #12]
 3743 01a8 BB61     		str	r3, [r7, #24]
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 237


 3744              	.L187:
1693:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1694:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1695:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Clear polled flag */
1696:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (tmp_Flag_End == ADC_FLAG_EOS)
 3745              		.loc 2 1696 6
 3746 01aa FB69     		ldr	r3, [r7, #28]
 3747 01ac 082B     		cmp	r3, #8
 3748 01ae 04D1     		bne	.L190
1697:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1698:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 3749              		.loc 2 1698 5
 3750 01b0 7B68     		ldr	r3, [r7, #4]
 3751 01b2 1B68     		ldr	r3, [r3]
 3752 01b4 0822     		movs	r2, #8
 3753 01b6 1A60     		str	r2, [r3]
 3754 01b8 08E0     		b	.L191
 3755              	.L190:
1699:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1700:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
1701:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1702:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Clear end of conversion EOC flag of regular group if low power feature */
1703:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
1704:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* until data register is read using function HAL_ADC_GetValue().         */
1705:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 3756              		.loc 2 1705 9
 3757 01ba BB69     		ldr	r3, [r7, #24]
 3758 01bc 03F48043 		and	r3, r3, #16384
 3759              		.loc 2 1705 8
 3760 01c0 002B     		cmp	r3, #0
 3761 01c2 03D1     		bne	.L191
1706:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1707:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 3762              		.loc 2 1707 7
 3763 01c4 7B68     		ldr	r3, [r7, #4]
 3764 01c6 1B68     		ldr	r3, [r3]
 3765 01c8 0C22     		movs	r2, #12
 3766 01ca 1A60     		str	r2, [r3]
 3767              	.L191:
1708:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1709:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1710:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1711:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return function status */
1712:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return HAL_OK;
 3768              		.loc 2 1712 10
 3769 01cc 0023     		movs	r3, #0
 3770              	.L174:
1713:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 3771              		.loc 2 1713 1
 3772 01ce 1846     		mov	r0, r3
 3773 01d0 2037     		adds	r7, r7, #32
 3774              	.LCFI257:
 3775              		.cfi_def_cfa_offset 8
 3776 01d2 BD46     		mov	sp, r7
 3777              	.LCFI258:
 3778              		.cfi_def_cfa_register 13
 3779              		@ sp needed
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 238


 3780 01d4 80BD     		pop	{r7, pc}
 3781              	.L193:
 3782 01d6 00BF     		.align	2
 3783              	.L192:
 3784 01d8 00200240 		.word	1073881088
 3785 01dc 00210240 		.word	1073881344
 3786 01e0 00230240 		.word	1073881856
 3787 01e4 00630258 		.word	1476551424
 3788              		.cfi_endproc
 3789              	.LFE339:
 3791              		.section	.text.HAL_ADC_PollForEvent,"ax",%progbits
 3792              		.align	1
 3793              		.global	HAL_ADC_PollForEvent
 3794              		.syntax unified
 3795              		.thumb
 3796              		.thumb_func
 3798              	HAL_ADC_PollForEvent:
 3799              	.LFB340:
1714:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1715:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
1716:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Poll for ADC event.
1717:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
1718:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param EventType the ADC event type.
1719:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          This parameter can be one of the following values:
1720:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *            @arg @ref ADC_EOSMP_EVENT  ADC End of Sampling event
1721:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *            @arg @ref ADC_AWD1_EVENT   ADC Analog watchdog 1 event (main analog watchdog, presen
1722:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *            @arg @ref ADC_AWD2_EVENT   ADC Analog watchdog 2 event (additional analog watchdog, 
1723:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *            @arg @ref ADC_AWD3_EVENT   ADC Analog watchdog 3 event (additional analog watchdog, 
1724:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *            @arg @ref ADC_OVR_EVENT    ADC Overrun event
1725:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *            @arg @ref ADC_JQOVF_EVENT  ADC Injected context queue overflow event
1726:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param Timeout Timeout value in millisecond.
1727:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   The relevant flag is cleared if found to be set, except for ADC_FLAG_OVR.
1728:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         Indeed, the latter is reset only if hadc->Init.Overrun field is set
1729:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         to ADC_OVR_DATA_OVERWRITTEN. Otherwise, data register may be potentially overwritten
1730:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         by a new converted data as soon as OVR is cleared.
1731:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         To reset OVR flag once the preserved data is retrieved, the user can resort
1732:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         to macro __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1733:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status
1734:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
1735:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef *hadc, uint32_t EventType, uint32_t Timeou
1736:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 3800              		.loc 2 1736 1
 3801              		.cfi_startproc
 3802              		@ args = 0, pretend = 0, frame = 24
 3803              		@ frame_needed = 1, uses_anonymous_args = 0
 3804 0000 80B5     		push	{r7, lr}
 3805              	.LCFI259:
 3806              		.cfi_def_cfa_offset 8
 3807              		.cfi_offset 7, -8
 3808              		.cfi_offset 14, -4
 3809 0002 86B0     		sub	sp, sp, #24
 3810              	.LCFI260:
 3811              		.cfi_def_cfa_offset 32
 3812 0004 00AF     		add	r7, sp, #0
 3813              	.LCFI261:
 3814              		.cfi_def_cfa_register 7
 3815 0006 F860     		str	r0, [r7, #12]
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 239


 3816 0008 B960     		str	r1, [r7, #8]
 3817 000a 7A60     		str	r2, [r7, #4]
1737:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tickstart;
1738:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1739:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
1740:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1741:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_EVENT_TYPE(EventType));
1742:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1743:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Get tick count */
1744:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   tickstart = HAL_GetTick();
 3818              		.loc 2 1744 15
 3819 000c FFF7FEFF 		bl	HAL_GetTick
 3820 0010 7861     		str	r0, [r7, #20]
1745:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1746:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check selected event flag */
1747:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   while (__HAL_ADC_GET_FLAG(hadc, EventType) == 0UL)
 3821              		.loc 2 1747 9
 3822 0012 22E0     		b	.L195
 3823              	.L198:
1748:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1749:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
1750:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (Timeout != HAL_MAX_DELAY)
 3824              		.loc 2 1750 8
 3825 0014 7B68     		ldr	r3, [r7, #4]
 3826 0016 B3F1FF3F 		cmp	r3, #-1
 3827 001a 1ED0     		beq	.L195
1751:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1752:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 3828              		.loc 2 1752 13
 3829 001c FFF7FEFF 		bl	HAL_GetTick
 3830 0020 0246     		mov	r2, r0
 3831              		.loc 2 1752 27
 3832 0022 7B69     		ldr	r3, [r7, #20]
 3833 0024 D31A     		subs	r3, r2, r3
 3834              		.loc 2 1752 10
 3835 0026 7A68     		ldr	r2, [r7, #4]
 3836 0028 9A42     		cmp	r2, r3
 3837 002a 02D3     		bcc	.L196
 3838              		.loc 2 1752 51 discriminator 1
 3839 002c 7B68     		ldr	r3, [r7, #4]
 3840 002e 002B     		cmp	r3, #0
 3841 0030 13D1     		bne	.L195
 3842              	.L196:
1753:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1754:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* New check to avoid false timeout detection in case of preemption */
1755:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if(__HAL_ADC_GET_FLAG(hadc, EventType) == 0UL)
 3843              		.loc 2 1755 12
 3844 0032 FB68     		ldr	r3, [r7, #12]
 3845 0034 1B68     		ldr	r3, [r3]
 3846 0036 1A68     		ldr	r2, [r3]
 3847 0038 BB68     		ldr	r3, [r7, #8]
 3848 003a 1340     		ands	r3, r3, r2
 3849              		.loc 2 1755 11
 3850 003c BA68     		ldr	r2, [r7, #8]
 3851 003e 9A42     		cmp	r2, r3
 3852 0040 0BD0     		beq	.L195
1756:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 240


1757:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Update ADC state machine to timeout */
1758:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 3853              		.loc 2 1758 11
 3854 0042 FB68     		ldr	r3, [r7, #12]
 3855 0044 5B6D     		ldr	r3, [r3, #84]
 3856 0046 43F00402 		orr	r2, r3, #4
 3857 004a FB68     		ldr	r3, [r7, #12]
 3858 004c 5A65     		str	r2, [r3, #84]
1759:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1760:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Process unlocked */
1761:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           __HAL_UNLOCK(hadc);
 3859              		.loc 2 1761 11
 3860 004e FB68     		ldr	r3, [r7, #12]
 3861 0050 0022     		movs	r2, #0
 3862 0052 83F85020 		strb	r2, [r3, #80]
1762:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1763:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           return HAL_TIMEOUT;
 3863              		.loc 2 1763 18
 3864 0056 0323     		movs	r3, #3
 3865 0058 7DE0     		b	.L197
 3866              	.L195:
1747:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 3867              		.loc 2 1747 10
 3868 005a FB68     		ldr	r3, [r7, #12]
 3869 005c 1B68     		ldr	r3, [r3]
 3870 005e 1A68     		ldr	r2, [r3]
 3871 0060 BB68     		ldr	r3, [r7, #8]
 3872 0062 1340     		ands	r3, r3, r2
1747:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 3873              		.loc 2 1747 9
 3874 0064 BA68     		ldr	r2, [r7, #8]
 3875 0066 9A42     		cmp	r2, r3
 3876 0068 D4D1     		bne	.L198
1764:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
1765:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1766:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1767:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1768:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1769:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   switch (EventType)
 3877              		.loc 2 1769 3
 3878 006a BB68     		ldr	r3, [r7, #8]
 3879 006c B3F5806F 		cmp	r3, #1024
 3880 0070 48D0     		beq	.L199
 3881 0072 BB68     		ldr	r3, [r7, #8]
 3882 0074 B3F5806F 		cmp	r3, #1024
 3883 0078 56D8     		bhi	.L200
 3884 007a BB68     		ldr	r3, [r7, #8]
 3885 007c B3F5007F 		cmp	r3, #512
 3886 0080 34D0     		beq	.L201
 3887 0082 BB68     		ldr	r3, [r7, #8]
 3888 0084 B3F5007F 		cmp	r3, #512
 3889 0088 4ED8     		bhi	.L200
 3890 008a BB68     		ldr	r3, [r7, #8]
 3891 008c B3F5807F 		cmp	r3, #256
 3892 0090 20D0     		beq	.L202
 3893 0092 BB68     		ldr	r3, [r7, #8]
 3894 0094 B3F5807F 		cmp	r3, #256
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 241


 3895 0098 46D8     		bhi	.L200
 3896 009a BB68     		ldr	r3, [r7, #8]
 3897 009c 022B     		cmp	r3, #2
 3898 009e 03D0     		beq	.L203
 3899 00a0 BB68     		ldr	r3, [r7, #8]
 3900 00a2 802B     		cmp	r3, #128
 3901 00a4 0BD0     		beq	.L204
 3902 00a6 3FE0     		b	.L200
 3903              	.L203:
1770:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1771:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* End Of Sampling event */
1772:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     case ADC_EOSMP_EVENT:
1773:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state */
1774:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 3904              		.loc 2 1774 7
 3905 00a8 FB68     		ldr	r3, [r7, #12]
 3906 00aa 5B6D     		ldr	r3, [r3, #84]
 3907 00ac 43F40062 		orr	r2, r3, #2048
 3908 00b0 FB68     		ldr	r3, [r7, #12]
 3909 00b2 5A65     		str	r2, [r3, #84]
1775:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1776:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Clear the End Of Sampling flag */
1777:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 3910              		.loc 2 1777 7
 3911 00b4 FB68     		ldr	r3, [r7, #12]
 3912 00b6 1B68     		ldr	r3, [r3]
 3913 00b8 0222     		movs	r2, #2
 3914 00ba 1A60     		str	r2, [r3]
1778:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1779:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       break;
 3915              		.loc 2 1779 7
 3916 00bc 4AE0     		b	.L205
 3917              	.L204:
1780:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1781:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Analog watchdog (level out of window) event */
1782:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Note: In case of several analog watchdog enabled, if needed to know      */
1783:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* which one triggered and on which ADCx, test ADC state of analog watchdog */
1784:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* flags HAL_ADC_STATE_AWD1/2/3 using function "HAL_ADC_GetState()".        */
1785:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* For example:                                                             */
1786:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "          */
1787:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD2) != 0UL) "          */
1788:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD3) != 0UL) "          */
1789:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1790:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Check analog watchdog 1 flag */
1791:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     case ADC_AWD_EVENT:
1792:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state */
1793:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 3918              		.loc 2 1793 7
 3919 00be FB68     		ldr	r3, [r7, #12]
 3920 00c0 5B6D     		ldr	r3, [r3, #84]
 3921 00c2 43F48032 		orr	r2, r3, #65536
 3922 00c6 FB68     		ldr	r3, [r7, #12]
 3923 00c8 5A65     		str	r2, [r3, #84]
1794:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1795:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Clear ADC analog watchdog flag */
1796:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 3924              		.loc 2 1796 7
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 242


 3925 00ca FB68     		ldr	r3, [r7, #12]
 3926 00cc 1B68     		ldr	r3, [r3]
 3927 00ce 8022     		movs	r2, #128
 3928 00d0 1A60     		str	r2, [r3]
1797:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1798:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       break;
 3929              		.loc 2 1798 7
 3930 00d2 3FE0     		b	.L205
 3931              	.L202:
1799:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1800:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Check analog watchdog 2 flag */
1801:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     case ADC_AWD2_EVENT:
1802:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state */
1803:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 3932              		.loc 2 1803 7
 3933 00d4 FB68     		ldr	r3, [r7, #12]
 3934 00d6 5B6D     		ldr	r3, [r3, #84]
 3935 00d8 43F40032 		orr	r2, r3, #131072
 3936 00dc FB68     		ldr	r3, [r7, #12]
 3937 00de 5A65     		str	r2, [r3, #84]
1804:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1805:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Clear ADC analog watchdog flag */
1806:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 3938              		.loc 2 1806 7
 3939 00e0 FB68     		ldr	r3, [r7, #12]
 3940 00e2 1B68     		ldr	r3, [r3]
 3941 00e4 4FF48072 		mov	r2, #256
 3942 00e8 1A60     		str	r2, [r3]
1807:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1808:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       break;
 3943              		.loc 2 1808 7
 3944 00ea 33E0     		b	.L205
 3945              	.L201:
1809:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1810:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Check analog watchdog 3 flag */
1811:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     case ADC_AWD3_EVENT:
1812:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state */
1813:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 3946              		.loc 2 1813 7
 3947 00ec FB68     		ldr	r3, [r7, #12]
 3948 00ee 5B6D     		ldr	r3, [r3, #84]
 3949 00f0 43F48022 		orr	r2, r3, #262144
 3950 00f4 FB68     		ldr	r3, [r7, #12]
 3951 00f6 5A65     		str	r2, [r3, #84]
1814:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1815:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Clear ADC analog watchdog flag */
1816:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 3952              		.loc 2 1816 7
 3953 00f8 FB68     		ldr	r3, [r7, #12]
 3954 00fa 1B68     		ldr	r3, [r3]
 3955 00fc 4FF40072 		mov	r2, #512
 3956 0100 1A60     		str	r2, [r3]
1817:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1818:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       break;
 3957              		.loc 2 1818 7
 3958 0102 27E0     		b	.L205
 3959              	.L199:
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 243


1819:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1820:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Injected context queue overflow event */
1821:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     case ADC_JQOVF_EVENT:
1822:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state */
1823:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 3960              		.loc 2 1823 7
 3961 0104 FB68     		ldr	r3, [r7, #12]
 3962 0106 5B6D     		ldr	r3, [r3, #84]
 3963 0108 43F48042 		orr	r2, r3, #16384
 3964 010c FB68     		ldr	r3, [r7, #12]
 3965 010e 5A65     		str	r2, [r3, #84]
1824:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1825:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC error code to Injected context queue overflow */
1826:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 3966              		.loc 2 1826 7
 3967 0110 FB68     		ldr	r3, [r7, #12]
 3968 0112 9B6D     		ldr	r3, [r3, #88]
 3969 0114 43F00802 		orr	r2, r3, #8
 3970 0118 FB68     		ldr	r3, [r7, #12]
 3971 011a 9A65     		str	r2, [r3, #88]
1827:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1828:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Clear ADC Injected context queue overflow flag */
1829:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 3972              		.loc 2 1829 7
 3973 011c FB68     		ldr	r3, [r7, #12]
 3974 011e 1B68     		ldr	r3, [r3]
 3975 0120 4FF48062 		mov	r2, #1024
 3976 0124 1A60     		str	r2, [r3]
1830:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1831:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       break;
 3977              		.loc 2 1831 7
 3978 0126 15E0     		b	.L205
 3979              	.L200:
1832:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1833:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Overrun event */
1834:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     default: /* Case ADC_OVR_EVENT */
1835:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* If overrun is set to overwrite previous data, overrun event is not     */
1836:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* considered as an error.                                                */
1837:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* (cf ref manual "Managing conversions without using the DMA and without */
1838:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* overrun ")                                                             */
1839:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 3980              		.loc 2 1839 21
 3981 0128 FB68     		ldr	r3, [r7, #12]
 3982 012a 1B6B     		ldr	r3, [r3, #48]
 3983              		.loc 2 1839 10
 3984 012c 002B     		cmp	r3, #0
 3985 012e 0CD1     		bne	.L206
1840:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1841:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Set ADC state */
1842:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 3986              		.loc 2 1842 9
 3987 0130 FB68     		ldr	r3, [r7, #12]
 3988 0132 5B6D     		ldr	r3, [r3, #84]
 3989 0134 43F48062 		orr	r2, r3, #1024
 3990 0138 FB68     		ldr	r3, [r7, #12]
 3991 013a 5A65     		str	r2, [r3, #84]
1843:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 244


1844:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Set ADC error code to overrun */
1845:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 3992              		.loc 2 1845 9
 3993 013c FB68     		ldr	r3, [r7, #12]
 3994 013e 9B6D     		ldr	r3, [r3, #88]
 3995 0140 43F00202 		orr	r2, r3, #2
 3996 0144 FB68     		ldr	r3, [r7, #12]
 3997 0146 9A65     		str	r2, [r3, #88]
1846:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1847:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
1848:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1849:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Clear ADC Overrun flag only if Overrun is set to ADC_OVR_DATA_OVERWRITTEN
1850:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****            otherwise, data register is potentially overwritten by new converted data as soon
1851:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****            as OVR is cleared. */
1852:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1853:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1854:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       break;
 3998              		.loc 2 1854 7
 3999 0148 03E0     		b	.L208
 4000              	.L206:
1852:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 4001              		.loc 2 1852 9
 4002 014a FB68     		ldr	r3, [r7, #12]
 4003 014c 1B68     		ldr	r3, [r3]
 4004 014e 1022     		movs	r2, #16
 4005 0150 1A60     		str	r2, [r3]
 4006              	.L208:
 4007              		.loc 2 1854 7
 4008 0152 00BF     		nop
 4009              	.L205:
1855:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1856:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1857:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return function status */
1858:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return HAL_OK;
 4010              		.loc 2 1858 10
 4011 0154 0023     		movs	r3, #0
 4012              	.L197:
1859:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 4013              		.loc 2 1859 1
 4014 0156 1846     		mov	r0, r3
 4015 0158 1837     		adds	r7, r7, #24
 4016              	.LCFI262:
 4017              		.cfi_def_cfa_offset 8
 4018 015a BD46     		mov	sp, r7
 4019              	.LCFI263:
 4020              		.cfi_def_cfa_register 13
 4021              		@ sp needed
 4022 015c 80BD     		pop	{r7, pc}
 4023              		.cfi_endproc
 4024              	.LFE340:
 4026              		.section	.text.HAL_ADC_Start_IT,"ax",%progbits
 4027              		.align	1
 4028              		.global	HAL_ADC_Start_IT
 4029              		.syntax unified
 4030              		.thumb
 4031              		.thumb_func
 4033              	HAL_ADC_Start_IT:
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 245


 4034              	.LFB341:
1860:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1861:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
1862:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Enable ADC, start conversion of regular group with interruption.
1863:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Interruptions enabled in this function according to initialization
1864:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         setting : EOC (end of conversion), EOS (end of sequence),
1865:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         OVR overrun.
1866:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1867:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Case of multimode enabled (when multimode feature is available):
1868:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         HAL_ADC_Start_IT() must be called for ADC Slave first, then for
1869:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         ADC Master.
1870:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         For ADC Slave, ADC is enabled only (conversion is not started).
1871:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         For ADC Master, ADC is enabled and multimode conversion is started.
1872:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   To guarantee a proper reset of all interruptions once all the needed
1873:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         conversions are obtained, HAL_ADC_Stop_IT() must be called to ensure
1874:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         a correct stop of the IT-based conversions.
1875:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   By default, HAL_ADC_Start_IT() does not enable the End Of Sampling
1876:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         interruption. If required (e.g. in case of oversampling with trigger
1877:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         mode), the user must:
1878:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          1. first clear the EOSMP flag if set with macro __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EO
1879:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          2. then enable the EOSMP interrupt with macro __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOSMP)
1880:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          before calling HAL_ADC_Start_IT().
1881:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
1882:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status
1883:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
1884:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
1885:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 4035              		.loc 2 1885 1
 4036              		.cfi_startproc
 4037              		@ args = 0, pretend = 0, frame = 24
 4038              		@ frame_needed = 1, uses_anonymous_args = 0
 4039 0000 80B5     		push	{r7, lr}
 4040              	.LCFI264:
 4041              		.cfi_def_cfa_offset 8
 4042              		.cfi_offset 7, -8
 4043              		.cfi_offset 14, -4
 4044 0002 86B0     		sub	sp, sp, #24
 4045              	.LCFI265:
 4046              		.cfi_def_cfa_offset 32
 4047 0004 00AF     		add	r7, sp, #0
 4048              	.LCFI266:
 4049              		.cfi_def_cfa_register 7
 4050 0006 7860     		str	r0, [r7, #4]
1886:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
1887:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   const ADC_TypeDef *tmpADC_Master;
1888:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 4051              		.loc 2 1888 55
 4052 0008 7B68     		ldr	r3, [r7, #4]
 4053 000a 1B68     		ldr	r3, [r3]
 4054              		.loc 2 1888 35
 4055 000c 904A     		ldr	r2, .L239
 4056 000e 9342     		cmp	r3, r2
 4057 0010 04D0     		beq	.L210
 4058              		.loc 2 1888 55 discriminator 2
 4059 0012 7B68     		ldr	r3, [r7, #4]
 4060 0014 1B68     		ldr	r3, [r3]
 4061 0016 8F4A     		ldr	r2, .L239+4
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 246


 4062 0018 9342     		cmp	r3, r2
 4063 001a 01D1     		bne	.L211
 4064              	.L210:
 4065              		.loc 2 1888 35 discriminator 3
 4066 001c 8E4B     		ldr	r3, .L239+8
 4067 001e 00E0     		b	.L212
 4068              	.L211:
 4069              		.loc 2 1888 35 is_stmt 0 discriminator 4
 4070 0020 8E4B     		ldr	r3, .L239+12
 4071              	.L212:
 4072              		.loc 2 1888 35 discriminator 6
 4073 0022 1846     		mov	r0, r3
 4074 0024 FFF7FEFF 		bl	LL_ADC_GetMultimode
 4075 0028 3861     		str	r0, [r7, #16]
1889:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1890:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
1891:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1892:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1893:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
1894:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 4076              		.loc 2 1894 7 is_stmt 1 discriminator 6
 4077 002a 7B68     		ldr	r3, [r7, #4]
 4078 002c 1B68     		ldr	r3, [r3]
 4079 002e 1846     		mov	r0, r3
 4080 0030 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 4081 0034 0346     		mov	r3, r0
 4082              		.loc 2 1894 6 discriminator 6
 4083 0036 002B     		cmp	r3, #0
 4084 0038 40F01981 		bne	.L213
1895:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1896:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Process locked */
1897:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_LOCK(hadc);
 4085              		.loc 2 1897 5
 4086 003c 7B68     		ldr	r3, [r7, #4]
 4087 003e 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4088 0042 012B     		cmp	r3, #1
 4089 0044 01D1     		bne	.L214
 4090              		.loc 2 1897 5 is_stmt 0 discriminator 1
 4091 0046 0223     		movs	r3, #2
 4092 0048 16E1     		b	.L215
 4093              	.L214:
 4094              		.loc 2 1897 5 discriminator 2
 4095 004a 7B68     		ldr	r3, [r7, #4]
 4096 004c 0122     		movs	r2, #1
 4097 004e 83F85020 		strb	r2, [r3, #80]
1898:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1899:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Enable the ADC peripheral */
1900:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_hal_status = ADC_Enable(hadc);
 4098              		.loc 2 1900 22 is_stmt 1 discriminator 2
 4099 0052 7868     		ldr	r0, [r7, #4]
 4100 0054 FFF7FEFF 		bl	ADC_Enable
 4101 0058 0346     		mov	r3, r0
 4102 005a FB75     		strb	r3, [r7, #23]
1901:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1902:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1903:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 4103              		.loc 2 1903 8 discriminator 2
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 247


 4104 005c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4105 005e 002B     		cmp	r3, #0
 4106 0060 40F00081 		bne	.L216
1904:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1905:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state                                                        */
1906:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1907:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1908:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 4107              		.loc 2 1908 7
 4108 0064 7B68     		ldr	r3, [r7, #4]
 4109 0066 5A6D     		ldr	r2, [r3, #84]
 4110 0068 7D4B     		ldr	r3, .L239+16
 4111 006a 1340     		ands	r3, r3, r2
 4112 006c 43F48072 		orr	r2, r3, #256
 4113 0070 7B68     		ldr	r3, [r7, #4]
 4114 0072 5A65     		str	r2, [r3, #84]
1909:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1910:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1911:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1912:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
1913:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         - if ADC instance is master or if multimode feature is not available
1914:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         - if multimode setting is disabled (ADC instance slave in independent mode) */
1915:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 4115              		.loc 2 1915 12
 4116 0074 7B68     		ldr	r3, [r7, #4]
 4117 0076 1B68     		ldr	r3, [r3]
 4118 0078 764A     		ldr	r2, .L239+4
 4119 007a 9342     		cmp	r3, r2
 4120 007c 02D0     		beq	.L217
 4121              		.loc 2 1915 12 is_stmt 0 discriminator 1
 4122 007e 7B68     		ldr	r3, [r7, #4]
 4123 0080 1B68     		ldr	r3, [r3]
 4124 0082 00E0     		b	.L218
 4125              	.L217:
 4126              		.loc 2 1915 12 discriminator 2
 4127 0084 724B     		ldr	r3, .L239
 4128              	.L218:
 4129              		.loc 2 1915 66 is_stmt 1 discriminator 4
 4130 0086 7A68     		ldr	r2, [r7, #4]
 4131 0088 1268     		ldr	r2, [r2]
 4132              		.loc 2 1915 10 discriminator 4
 4133 008a 9342     		cmp	r3, r2
 4134 008c 02D0     		beq	.L219
1916:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4135              		.loc 2 1916 11
 4136 008e 3B69     		ldr	r3, [r7, #16]
 4137 0090 002B     		cmp	r3, #0
 4138 0092 05D1     		bne	.L220
 4139              	.L219:
1917:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          )
1918:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1919:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 4140              		.loc 2 1919 9
 4141 0094 7B68     		ldr	r3, [r7, #4]
 4142 0096 5B6D     		ldr	r3, [r3, #84]
 4143 0098 23F48012 		bic	r2, r3, #1048576
 4144 009c 7B68     		ldr	r3, [r7, #4]
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 248


 4145 009e 5A65     		str	r2, [r3, #84]
 4146              	.L220:
1920:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1921:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1922:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC error code */
1923:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Check if a conversion is on going on ADC group injected */
1924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 4147              		.loc 2 1924 16
 4148 00a0 7B68     		ldr	r3, [r7, #4]
 4149 00a2 5B6D     		ldr	r3, [r3, #84]
 4150              		.loc 2 1924 24
 4151 00a4 03F48053 		and	r3, r3, #4096
 4152              		.loc 2 1924 10
 4153 00a8 002B     		cmp	r3, #0
 4154 00aa 06D0     		beq	.L221
1925:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1926:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Reset ADC error code fields related to regular conversions only */
1927:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 4155              		.loc 2 1927 9
 4156 00ac 7B68     		ldr	r3, [r7, #4]
 4157 00ae 9B6D     		ldr	r3, [r3, #88]
 4158 00b0 23F00602 		bic	r2, r3, #6
 4159 00b4 7B68     		ldr	r3, [r7, #4]
 4160 00b6 9A65     		str	r2, [r3, #88]
 4161 00b8 02E0     		b	.L222
 4162              	.L221:
1928:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1929:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
1930:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1931:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Reset all ADC error code fields */
1932:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         ADC_CLEAR_ERRORCODE(hadc);
 4163              		.loc 2 1932 9
 4164 00ba 7B68     		ldr	r3, [r7, #4]
 4165 00bc 0022     		movs	r2, #0
 4166 00be 9A65     		str	r2, [r3, #88]
 4167              	.L222:
1933:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1934:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1935:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Clear ADC group regular conversion flag and overrun flag               */
1936:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC operations) */
1937:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 4168              		.loc 2 1937 7
 4169 00c0 7B68     		ldr	r3, [r7, #4]
 4170 00c2 1B68     		ldr	r3, [r3]
 4171 00c4 1C22     		movs	r2, #28
 4172 00c6 1A60     		str	r2, [r3]
1938:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1939:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Process unlocked */
1940:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1941:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1942:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 4173              		.loc 2 1942 7
 4174 00c8 7B68     		ldr	r3, [r7, #4]
 4175 00ca 0022     		movs	r2, #0
 4176 00cc 83F85020 		strb	r2, [r3, #80]
1943:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1944:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Disable all interruptions before enabling the desired ones */
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 249


1945:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 4177              		.loc 2 1945 7
 4178 00d0 7B68     		ldr	r3, [r7, #4]
 4179 00d2 1B68     		ldr	r3, [r3]
 4180 00d4 5A68     		ldr	r2, [r3, #4]
 4181 00d6 7B68     		ldr	r3, [r7, #4]
 4182 00d8 1B68     		ldr	r3, [r3]
 4183 00da 22F01C02 		bic	r2, r2, #28
 4184 00de 5A60     		str	r2, [r3, #4]
1946:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1947:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Enable ADC end of conversion interrupt */
1948:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       switch (hadc->Init.EOCSelection)
 4185              		.loc 2 1948 25
 4186 00e0 7B68     		ldr	r3, [r7, #4]
 4187 00e2 1B69     		ldr	r3, [r3, #16]
 4188              		.loc 2 1948 7
 4189 00e4 082B     		cmp	r3, #8
 4190 00e6 08D1     		bne	.L223
1949:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1950:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_EOC_SEQ_CONV:
1951:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 4191              		.loc 2 1951 11
 4192 00e8 7B68     		ldr	r3, [r7, #4]
 4193 00ea 1B68     		ldr	r3, [r3]
 4194 00ec 5A68     		ldr	r2, [r3, #4]
 4195 00ee 7B68     		ldr	r3, [r7, #4]
 4196 00f0 1B68     		ldr	r3, [r3]
 4197 00f2 42F00802 		orr	r2, r2, #8
 4198 00f6 5A60     		str	r2, [r3, #4]
1952:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
 4199              		.loc 2 1952 11
 4200 00f8 08E0     		b	.L224
 4201              	.L223:
1953:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* case ADC_EOC_SINGLE_CONV */
1954:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         default:
1955:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 4202              		.loc 2 1955 11
 4203 00fa 7B68     		ldr	r3, [r7, #4]
 4204 00fc 1B68     		ldr	r3, [r3]
 4205 00fe 5A68     		ldr	r2, [r3, #4]
 4206 0100 7B68     		ldr	r3, [r7, #4]
 4207 0102 1B68     		ldr	r3, [r3]
 4208 0104 42F00402 		orr	r2, r2, #4
 4209 0108 5A60     		str	r2, [r3, #4]
1956:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
 4210              		.loc 2 1956 11
 4211 010a 00BF     		nop
 4212              	.L224:
1957:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1958:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1959:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Enable ADC overrun interrupt */
1960:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
1961:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
1962:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          behavior and no CPU time is lost for a non-processed interruption */
1963:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 4213              		.loc 2 1963 21
 4214 010c 7B68     		ldr	r3, [r7, #4]
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 250


 4215 010e 1B6B     		ldr	r3, [r3, #48]
 4216              		.loc 2 1963 10
 4217 0110 002B     		cmp	r3, #0
 4218 0112 07D1     		bne	.L225
1964:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1965:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 4219              		.loc 2 1965 9
 4220 0114 7B68     		ldr	r3, [r7, #4]
 4221 0116 1B68     		ldr	r3, [r3]
 4222 0118 5A68     		ldr	r2, [r3, #4]
 4223 011a 7B68     		ldr	r3, [r7, #4]
 4224 011c 1B68     		ldr	r3, [r3]
 4225 011e 42F01002 		orr	r2, r2, #16
 4226 0122 5A60     		str	r2, [r3, #4]
 4227              	.L225:
1966:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1967:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1968:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1969:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1970:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1971:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* trigger event.                                                       */
1972:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Case of multimode enabled (when multimode feature is available):     */
1973:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
1974:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /*    enabled only (conversion is not started),                         */
1975:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /*  - if ADC is master, ADC is enabled and conversion is started.       */
1976:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 4228              		.loc 2 1976 12
 4229 0124 7B68     		ldr	r3, [r7, #4]
 4230 0126 1B68     		ldr	r3, [r3]
 4231 0128 4A4A     		ldr	r2, .L239+4
 4232 012a 9342     		cmp	r3, r2
 4233 012c 02D0     		beq	.L226
 4234              		.loc 2 1976 12 is_stmt 0 discriminator 1
 4235 012e 7B68     		ldr	r3, [r7, #4]
 4236 0130 1B68     		ldr	r3, [r3]
 4237 0132 00E0     		b	.L227
 4238              	.L226:
 4239              		.loc 2 1976 12 discriminator 2
 4240 0134 464B     		ldr	r3, .L239
 4241              	.L227:
 4242              		.loc 2 1976 66 is_stmt 1 discriminator 4
 4243 0136 7A68     		ldr	r2, [r7, #4]
 4244 0138 1268     		ldr	r2, [r2]
 4245              		.loc 2 1976 10 discriminator 4
 4246 013a 9342     		cmp	r3, r2
 4247 013c 08D0     		beq	.L228
1977:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4248              		.loc 2 1977 11
 4249 013e 3B69     		ldr	r3, [r7, #16]
 4250 0140 002B     		cmp	r3, #0
 4251 0142 05D0     		beq	.L228
1978:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 4252              		.loc 2 1978 11
 4253 0144 3B69     		ldr	r3, [r7, #16]
 4254 0146 052B     		cmp	r3, #5
 4255 0148 02D0     		beq	.L228
1979:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 251


 4256              		.loc 2 1979 11
 4257 014a 3B69     		ldr	r3, [r7, #16]
 4258 014c 092B     		cmp	r3, #9
 4259 014e 3BD1     		bne	.L229
 4260              	.L228:
1980:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          )
1981:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1982:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* ADC instance is not a multimode slave instance with multimode regular conversions enable
1983:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 4261              		.loc 2 1983 13
 4262 0150 7B68     		ldr	r3, [r7, #4]
 4263 0152 1B68     		ldr	r3, [r3]
 4264 0154 DB68     		ldr	r3, [r3, #12]
 4265 0156 03F00073 		and	r3, r3, #33554432
 4266              		.loc 2 1983 12
 4267 015a 002B     		cmp	r3, #0
 4268 015c 2DD0     		beq	.L237
1984:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
1985:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 4269              		.loc 2 1985 11
 4270 015e 7B68     		ldr	r3, [r7, #4]
 4271 0160 5B6D     		ldr	r3, [r3, #84]
 4272 0162 23F44053 		bic	r3, r3, #12288
 4273 0166 43F48052 		orr	r2, r3, #4096
 4274 016a 7B68     		ldr	r3, [r7, #4]
 4275 016c 5A65     		str	r2, [r3, #84]
1986:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1987:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Enable as well injected interruptions in case
1988:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****            HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
1989:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****            allows to start regular and injected conversions when JAUTO is
1990:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****            set with a single call to HAL_ADC_Start_IT() */
1991:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           switch (hadc->Init.EOCSelection)
 4276              		.loc 2 1991 29
 4277 016e 7B68     		ldr	r3, [r7, #4]
 4278 0170 1B69     		ldr	r3, [r3, #16]
 4279              		.loc 2 1991 11
 4280 0172 082B     		cmp	r3, #8
 4281 0174 10D1     		bne	.L231
1992:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
1993:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             case ADC_EOC_SEQ_CONV:
1994:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 4282              		.loc 2 1994 15
 4283 0176 7B68     		ldr	r3, [r7, #4]
 4284 0178 1B68     		ldr	r3, [r3]
 4285 017a 5A68     		ldr	r2, [r3, #4]
 4286 017c 7B68     		ldr	r3, [r7, #4]
 4287 017e 1B68     		ldr	r3, [r3]
 4288 0180 22F02002 		bic	r2, r2, #32
 4289 0184 5A60     		str	r2, [r3, #4]
1995:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 4290              		.loc 2 1995 15
 4291 0186 7B68     		ldr	r3, [r7, #4]
 4292 0188 1B68     		ldr	r3, [r3]
 4293 018a 5A68     		ldr	r2, [r3, #4]
 4294 018c 7B68     		ldr	r3, [r7, #4]
 4295 018e 1B68     		ldr	r3, [r3]
 4296 0190 42F04002 		orr	r2, r2, #64
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 252


 4297 0194 5A60     		str	r2, [r3, #4]
1996:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               break;
 4298              		.loc 2 1996 15
 4299 0196 11E0     		b	.L230
 4300              	.L231:
1997:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* case ADC_EOC_SINGLE_CONV */
1998:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             default:
1999:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 4301              		.loc 2 1999 15
 4302 0198 7B68     		ldr	r3, [r7, #4]
 4303 019a 1B68     		ldr	r3, [r3]
 4304 019c 5A68     		ldr	r2, [r3, #4]
 4305 019e 7B68     		ldr	r3, [r7, #4]
 4306 01a0 1B68     		ldr	r3, [r3]
 4307 01a2 22F04002 		bic	r2, r2, #64
 4308 01a6 5A60     		str	r2, [r3, #4]
2000:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 4309              		.loc 2 2000 15
 4310 01a8 7B68     		ldr	r3, [r7, #4]
 4311 01aa 1B68     		ldr	r3, [r3]
 4312 01ac 5A68     		ldr	r2, [r3, #4]
 4313 01ae 7B68     		ldr	r3, [r7, #4]
 4314 01b0 1B68     		ldr	r3, [r3]
 4315 01b2 42F02002 		orr	r2, r2, #32
 4316 01b6 5A60     		str	r2, [r3, #4]
2001:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               break;
 4317              		.loc 2 2001 15
 4318 01b8 00E0     		b	.L230
 4319              	.L237:
2002:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
2003:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 4320              		.loc 2 2003 9
 4321 01ba 00BF     		nop
 4322              	.L230:
2004:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2005:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Start ADC group regular conversion */
2006:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         LL_ADC_REG_StartConversion(hadc->Instance);
 4323              		.loc 2 2006 9
 4324 01bc 7B68     		ldr	r3, [r7, #4]
 4325 01be 1B68     		ldr	r3, [r3]
 4326 01c0 1846     		mov	r0, r3
 4327 01c2 FFF7FEFF 		bl	LL_ADC_REG_StartConversion
 4328 01c6 56E0     		b	.L236
 4329              	.L229:
2007:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2008:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
2009:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2010:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
2011:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 4330              		.loc 2 2011 9
 4331 01c8 7B68     		ldr	r3, [r7, #4]
 4332 01ca 5B6D     		ldr	r3, [r3, #84]
 4333 01cc 43F48012 		orr	r2, r3, #1048576
 4334 01d0 7B68     		ldr	r3, [r7, #4]
 4335 01d2 5A65     		str	r2, [r3, #84]
2012:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* if Master ADC JAUTO bit is set, Slave injected interruptions
2013:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****            are enabled nevertheless (for same reason as above) */
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 253


2014:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 4336              		.loc 2 2014 25
 4337 01d4 7B68     		ldr	r3, [r7, #4]
 4338 01d6 1B68     		ldr	r3, [r3]
 4339 01d8 1E4A     		ldr	r2, .L239+4
 4340 01da 9342     		cmp	r3, r2
 4341 01dc 02D0     		beq	.L233
 4342              		.loc 2 2014 25 is_stmt 0 discriminator 1
 4343 01de 7B68     		ldr	r3, [r7, #4]
 4344 01e0 1B68     		ldr	r3, [r3]
 4345 01e2 00E0     		b	.L234
 4346              	.L233:
 4347              		.loc 2 2014 25 discriminator 2
 4348 01e4 1A4B     		ldr	r3, .L239
 4349              	.L234:
 4350              		.loc 2 2014 23 is_stmt 1 discriminator 4
 4351 01e6 FB60     		str	r3, [r7, #12]
2015:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 4352              		.loc 2 2015 13 discriminator 4
 4353 01e8 FB68     		ldr	r3, [r7, #12]
 4354 01ea DB68     		ldr	r3, [r3, #12]
 4355 01ec 03F00073 		and	r3, r3, #33554432
 4356              		.loc 2 2015 12 discriminator 4
 4357 01f0 002B     		cmp	r3, #0
 4358 01f2 3FD0     		beq	.L238
2016:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2017:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
2018:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****              and in resetting HAL_ADC_STATE_INJ_EOC bit */
2019:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 4359              		.loc 2 2019 11
 4360 01f4 7B68     		ldr	r3, [r7, #4]
 4361 01f6 5B6D     		ldr	r3, [r3, #84]
 4362 01f8 23F44053 		bic	r3, r3, #12288
 4363 01fc 43F48052 		orr	r2, r3, #4096
 4364 0200 7B68     		ldr	r3, [r7, #4]
 4365 0202 5A65     		str	r2, [r3, #84]
2020:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Next, set Slave injected interruptions */
2021:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           switch (hadc->Init.EOCSelection)
 4366              		.loc 2 2021 29
 4367 0204 7B68     		ldr	r3, [r7, #4]
 4368 0206 1B69     		ldr	r3, [r3, #16]
 4369              		.loc 2 2021 11
 4370 0208 082B     		cmp	r3, #8
 4371 020a 10D1     		bne	.L235
2022:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
2023:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             case ADC_EOC_SEQ_CONV:
2024:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 4372              		.loc 2 2024 15
 4373 020c 7B68     		ldr	r3, [r7, #4]
 4374 020e 1B68     		ldr	r3, [r3]
 4375 0210 5A68     		ldr	r2, [r3, #4]
 4376 0212 7B68     		ldr	r3, [r7, #4]
 4377 0214 1B68     		ldr	r3, [r3]
 4378 0216 22F02002 		bic	r2, r2, #32
 4379 021a 5A60     		str	r2, [r3, #4]
2025:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 4380              		.loc 2 2025 15
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 254


 4381 021c 7B68     		ldr	r3, [r7, #4]
 4382 021e 1B68     		ldr	r3, [r3]
 4383 0220 5A68     		ldr	r2, [r3, #4]
 4384 0222 7B68     		ldr	r3, [r7, #4]
 4385 0224 1B68     		ldr	r3, [r3]
 4386 0226 42F04002 		orr	r2, r2, #64
 4387 022a 5A60     		str	r2, [r3, #4]
2026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               break;
 4388              		.loc 2 2026 15
 4389 022c 23E0     		b	.L236
 4390              	.L235:
2027:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* case ADC_EOC_SINGLE_CONV */
2028:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             default:
2029:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 4391              		.loc 2 2029 15
 4392 022e 7B68     		ldr	r3, [r7, #4]
 4393 0230 1B68     		ldr	r3, [r3]
 4394 0232 5A68     		ldr	r2, [r3, #4]
 4395 0234 7B68     		ldr	r3, [r7, #4]
 4396 0236 1B68     		ldr	r3, [r3]
 4397 0238 22F04002 		bic	r2, r2, #64
 4398 023c 5A60     		str	r2, [r3, #4]
2030:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 4399              		.loc 2 2030 15
 4400 023e 7B68     		ldr	r3, [r7, #4]
 4401 0240 1B68     		ldr	r3, [r3]
 4402 0242 5A68     		ldr	r2, [r3, #4]
 4403 0244 7B68     		ldr	r3, [r7, #4]
 4404 0246 1B68     		ldr	r3, [r3]
 4405 0248 42F02002 		orr	r2, r2, #32
 4406 024c 5A60     		str	r2, [r3, #4]
2031:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               break;
 4407              		.loc 2 2031 15
 4408 024e 12E0     		b	.L236
 4409              	.L240:
 4410              		.align	2
 4411              	.L239:
 4412 0250 00200240 		.word	1073881088
 4413 0254 00210240 		.word	1073881344
 4414 0258 00230240 		.word	1073881856
 4415 025c 00630258 		.word	1476551424
 4416 0260 FEF0FFFF 		.word	-3842
 4417              	.L216:
2032:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
2033:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2034:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2035:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2036:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
2037:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2038:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Process unlocked */
2039:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 4418              		.loc 2 2039 7
 4419 0264 7B68     		ldr	r3, [r7, #4]
 4420 0266 0022     		movs	r2, #0
 4421 0268 83F85020 		strb	r2, [r3, #80]
 4422 026c 03E0     		b	.L236
 4423              	.L213:
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 255


2040:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2041:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2042:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2043:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
2044:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2045:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
 4424              		.loc 2 2045 20
 4425 026e 0223     		movs	r3, #2
 4426 0270 FB75     		strb	r3, [r7, #23]
 4427 0272 00E0     		b	.L236
 4428              	.L238:
2033:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 4429              		.loc 2 2033 9
 4430 0274 00BF     		nop
 4431              	.L236:
2046:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2047:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2048:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return function status */
2049:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return tmp_hal_status;
 4432              		.loc 2 2049 10
 4433 0276 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4434              	.L215:
2050:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 4435              		.loc 2 2050 1
 4436 0278 1846     		mov	r0, r3
 4437 027a 1837     		adds	r7, r7, #24
 4438              	.LCFI267:
 4439              		.cfi_def_cfa_offset 8
 4440 027c BD46     		mov	sp, r7
 4441              	.LCFI268:
 4442              		.cfi_def_cfa_register 13
 4443              		@ sp needed
 4444 027e 80BD     		pop	{r7, pc}
 4445              		.cfi_endproc
 4446              	.LFE341:
 4448              		.section	.text.HAL_ADC_Stop_IT,"ax",%progbits
 4449              		.align	1
 4450              		.global	HAL_ADC_Stop_IT
 4451              		.syntax unified
 4452              		.thumb
 4453              		.thumb_func
 4455              	HAL_ADC_Stop_IT:
 4456              	.LFB342:
2051:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2052:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
2053:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in
2054:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         case of auto_injection mode), disable interrution of
2055:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         end-of-conversion, disable ADC peripheral.
2056:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
2057:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status.
2058:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2059:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
2060:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 4457              		.loc 2 2060 1
 4458              		.cfi_startproc
 4459              		@ args = 0, pretend = 0, frame = 16
 4460              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 256


 4461 0000 80B5     		push	{r7, lr}
 4462              	.LCFI269:
 4463              		.cfi_def_cfa_offset 8
 4464              		.cfi_offset 7, -8
 4465              		.cfi_offset 14, -4
 4466 0002 84B0     		sub	sp, sp, #16
 4467              	.LCFI270:
 4468              		.cfi_def_cfa_offset 24
 4469 0004 00AF     		add	r7, sp, #0
 4470              	.LCFI271:
 4471              		.cfi_def_cfa_register 7
 4472 0006 7860     		str	r0, [r7, #4]
2061:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
2062:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2063:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
2064:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2065:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2066:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Process locked */
2067:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_LOCK(hadc);
 4473              		.loc 2 2067 3
 4474 0008 7B68     		ldr	r3, [r7, #4]
 4475 000a 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4476 000e 012B     		cmp	r3, #1
 4477 0010 01D1     		bne	.L242
 4478              		.loc 2 2067 3 is_stmt 0 discriminator 1
 4479 0012 0223     		movs	r3, #2
 4480 0014 29E0     		b	.L243
 4481              	.L242:
 4482              		.loc 2 2067 3 discriminator 2
 4483 0016 7B68     		ldr	r3, [r7, #4]
 4484 0018 0122     		movs	r2, #1
 4485 001a 83F85020 		strb	r2, [r3, #80]
2068:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2069:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* 1. Stop potential conversion on going, on ADC groups regular and injected */
2070:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 4486              		.loc 2 2070 20 is_stmt 1 discriminator 2
 4487 001e 0321     		movs	r1, #3
 4488 0020 7868     		ldr	r0, [r7, #4]
 4489 0022 FFF7FEFF 		bl	ADC_ConversionStop
 4490 0026 0346     		mov	r3, r0
 4491 0028 FB73     		strb	r3, [r7, #15]
2071:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2072:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
2073:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 4492              		.loc 2 2073 6 discriminator 2
 4493 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4494 002c 002B     		cmp	r3, #0
 4495 002e 17D1     		bne	.L244
2074:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2075:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Disable ADC end of conversion interrupt for regular group */
2076:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
2077:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 4496              		.loc 2 2077 5
 4497 0030 7B68     		ldr	r3, [r7, #4]
 4498 0032 1B68     		ldr	r3, [r3]
 4499 0034 5A68     		ldr	r2, [r3, #4]
 4500 0036 7B68     		ldr	r3, [r7, #4]
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 257


 4501 0038 1B68     		ldr	r3, [r3]
 4502 003a 22F01C02 		bic	r2, r2, #28
 4503 003e 5A60     		str	r2, [r3, #4]
2078:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2079:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
2080:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
 4504              		.loc 2 2080 22
 4505 0040 7868     		ldr	r0, [r7, #4]
 4506 0042 FFF7FEFF 		bl	ADC_Disable
 4507 0046 0346     		mov	r3, r0
 4508 0048 FB73     		strb	r3, [r7, #15]
2081:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2082:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
2083:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 4509              		.loc 2 2083 8
 4510 004a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4511 004c 002B     		cmp	r3, #0
 4512 004e 07D1     		bne	.L244
2084:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2085:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state */
2086:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 4513              		.loc 2 2086 7
 4514 0050 7B68     		ldr	r3, [r7, #4]
 4515 0052 5A6D     		ldr	r2, [r3, #84]
 4516 0054 074B     		ldr	r3, .L245
 4517 0056 1340     		ands	r3, r3, r2
 4518 0058 43F00102 		orr	r2, r3, #1
 4519 005c 7B68     		ldr	r3, [r7, #4]
 4520 005e 5A65     		str	r2, [r3, #84]
 4521              	.L244:
2087:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
2088:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
2089:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2090:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2091:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2092:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Process unlocked */
2093:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 4522              		.loc 2 2093 3
 4523 0060 7B68     		ldr	r3, [r7, #4]
 4524 0062 0022     		movs	r2, #0
 4525 0064 83F85020 		strb	r2, [r3, #80]
2094:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2095:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return function status */
2096:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return tmp_hal_status;
 4526              		.loc 2 2096 10
 4527 0068 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4528              	.L243:
2097:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 4529              		.loc 2 2097 1
 4530 006a 1846     		mov	r0, r3
 4531 006c 1037     		adds	r7, r7, #16
 4532              	.LCFI272:
 4533              		.cfi_def_cfa_offset 8
 4534 006e BD46     		mov	sp, r7
 4535              	.LCFI273:
 4536              		.cfi_def_cfa_register 13
 4537              		@ sp needed
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 258


 4538 0070 80BD     		pop	{r7, pc}
 4539              	.L246:
 4540 0072 00BF     		.align	2
 4541              	.L245:
 4542 0074 FEEEFFFF 		.word	-4354
 4543              		.cfi_endproc
 4544              	.LFE342:
 4546              		.section	.text.HAL_ADC_Start_DMA,"ax",%progbits
 4547              		.align	1
 4548              		.global	HAL_ADC_Start_DMA
 4549              		.syntax unified
 4550              		.thumb
 4551              		.thumb_func
 4553              	HAL_ADC_Start_DMA:
 4554              	.LFB343:
2098:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2099:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
2100:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Enable ADC, start conversion of regular group and transfer result through DMA.
2101:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Interruptions enabled in this function:
2102:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         overrun (if applicable), DMA half transfer, DMA transfer complete.
2103:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
2104:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Case of multimode enabled (when multimode feature is available): HAL_ADC_Start_DMA()
2105:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         is designed for single-ADC mode only. For multimode, the dedicated
2106:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         HAL_ADCEx_MultiModeStart_DMA() function must be used.
2107:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
2108:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param pData Destination Buffer address.
2109:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param Length Number of data to be transferred from ADC peripheral to memory
2110:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status.
2111:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2112:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
2113:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 4555              		.loc 2 2113 1
 4556              		.cfi_startproc
 4557              		@ args = 0, pretend = 0, frame = 24
 4558              		@ frame_needed = 1, uses_anonymous_args = 0
 4559 0000 80B5     		push	{r7, lr}
 4560              	.LCFI274:
 4561              		.cfi_def_cfa_offset 8
 4562              		.cfi_offset 7, -8
 4563              		.cfi_offset 14, -4
 4564 0002 86B0     		sub	sp, sp, #24
 4565              	.LCFI275:
 4566              		.cfi_def_cfa_offset 32
 4567 0004 00AF     		add	r7, sp, #0
 4568              	.LCFI276:
 4569              		.cfi_def_cfa_register 7
 4570 0006 F860     		str	r0, [r7, #12]
 4571 0008 B960     		str	r1, [r7, #8]
 4572 000a 7A60     		str	r2, [r7, #4]
2114:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
2115:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 4573              		.loc 2 2115 55
 4574 000c FB68     		ldr	r3, [r7, #12]
 4575 000e 1B68     		ldr	r3, [r3]
 4576              		.loc 2 2115 35
 4577 0010 554A     		ldr	r2, .L266
 4578 0012 9342     		cmp	r3, r2
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 259


 4579 0014 04D0     		beq	.L248
 4580              		.loc 2 2115 55 discriminator 2
 4581 0016 FB68     		ldr	r3, [r7, #12]
 4582 0018 1B68     		ldr	r3, [r3]
 4583 001a 544A     		ldr	r2, .L266+4
 4584 001c 9342     		cmp	r3, r2
 4585 001e 01D1     		bne	.L249
 4586              	.L248:
 4587              		.loc 2 2115 35 discriminator 3
 4588 0020 534B     		ldr	r3, .L266+8
 4589 0022 00E0     		b	.L250
 4590              	.L249:
 4591              		.loc 2 2115 35 is_stmt 0 discriminator 4
 4592 0024 534B     		ldr	r3, .L266+12
 4593              	.L250:
 4594              		.loc 2 2115 35 discriminator 6
 4595 0026 1846     		mov	r0, r3
 4596 0028 FFF7FEFF 		bl	LL_ADC_GetMultimode
 4597 002c 3861     		str	r0, [r7, #16]
2116:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2117:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
2118:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2119:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2120:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
2121:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 4598              		.loc 2 2121 7 is_stmt 1 discriminator 6
 4599 002e FB68     		ldr	r3, [r7, #12]
 4600 0030 1B68     		ldr	r3, [r3]
 4601 0032 1846     		mov	r0, r3
 4602 0034 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 4603 0038 0346     		mov	r3, r0
 4604              		.loc 2 2121 6 discriminator 6
 4605 003a 002B     		cmp	r3, #0
 4606 003c 40F08C80 		bne	.L251
2122:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2123:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Process locked */
2124:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_LOCK(hadc);
 4607              		.loc 2 2124 5
 4608 0040 FB68     		ldr	r3, [r7, #12]
 4609 0042 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4610 0046 012B     		cmp	r3, #1
 4611 0048 01D1     		bne	.L252
 4612              		.loc 2 2124 5 is_stmt 0 discriminator 1
 4613 004a 0223     		movs	r3, #2
 4614 004c 87E0     		b	.L253
 4615              	.L252:
 4616              		.loc 2 2124 5 discriminator 2
 4617 004e FB68     		ldr	r3, [r7, #12]
 4618 0050 0122     		movs	r2, #1
 4619 0052 83F85020 		strb	r2, [r3, #80]
2125:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2126:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Ensure that multimode regular conversions are not enabled.   */
2127:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
2128:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4620              		.loc 2 2128 8 is_stmt 1 discriminator 2
 4621 0056 3B69     		ldr	r3, [r7, #16]
 4622 0058 002B     		cmp	r3, #0
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 260


 4623 005a 05D0     		beq	.L254
2129:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 4624              		.loc 2 2129 9
 4625 005c 3B69     		ldr	r3, [r7, #16]
 4626 005e 052B     		cmp	r3, #5
 4627 0060 02D0     		beq	.L254
2130:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 4628              		.loc 2 2130 9
 4629 0062 3B69     		ldr	r3, [r7, #16]
 4630 0064 092B     		cmp	r3, #9
 4631 0066 70D1     		bne	.L255
 4632              	.L254:
2131:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        )
2132:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2133:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Enable the ADC peripheral */
2134:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmp_hal_status = ADC_Enable(hadc);
 4633              		.loc 2 2134 24
 4634 0068 F868     		ldr	r0, [r7, #12]
 4635 006a FFF7FEFF 		bl	ADC_Enable
 4636 006e 0346     		mov	r3, r0
 4637 0070 FB75     		strb	r3, [r7, #23]
2135:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2136:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Start conversion if ADC is effectively enabled */
2137:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (tmp_hal_status == HAL_OK)
 4638              		.loc 2 2137 10
 4639 0072 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4640 0074 002B     		cmp	r3, #0
 4641 0076 63D1     		bne	.L256
2138:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2139:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Set ADC state                                                        */
2140:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* - Clear state bitfield related to regular group conversion results   */
2141:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* - Set state bitfield related to regular operation                    */
2142:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State,
 4642              		.loc 2 2142 9
 4643 0078 FB68     		ldr	r3, [r7, #12]
 4644 007a 5A6D     		ldr	r2, [r3, #84]
 4645 007c 3E4B     		ldr	r3, .L266+16
 4646 007e 1340     		ands	r3, r3, r2
 4647 0080 43F48072 		orr	r2, r3, #256
 4648 0084 FB68     		ldr	r3, [r7, #12]
 4649 0086 5A65     		str	r2, [r3, #84]
2143:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                           HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL
2144:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                           HAL_ADC_STATE_REG_BUSY);
2145:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2146:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
2147:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           - if ADC instance is master or if multimode feature is not available
2148:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           - if multimode setting is disabled (ADC instance slave in independent mode) */
2149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 4650              		.loc 2 2149 14
 4651 0088 FB68     		ldr	r3, [r7, #12]
 4652 008a 1B68     		ldr	r3, [r3]
 4653 008c 374A     		ldr	r2, .L266+4
 4654 008e 9342     		cmp	r3, r2
 4655 0090 02D0     		beq	.L257
 4656              		.loc 2 2149 14 is_stmt 0 discriminator 1
 4657 0092 FB68     		ldr	r3, [r7, #12]
 4658 0094 1B68     		ldr	r3, [r3]
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 261


 4659 0096 00E0     		b	.L258
 4660              	.L257:
 4661              		.loc 2 2149 14 discriminator 2
 4662 0098 334B     		ldr	r3, .L266
 4663              	.L258:
 4664              		.loc 2 2149 68 is_stmt 1 discriminator 4
 4665 009a FA68     		ldr	r2, [r7, #12]
 4666 009c 1268     		ldr	r2, [r2]
 4667              		.loc 2 2149 12 discriminator 4
 4668 009e 9342     		cmp	r3, r2
 4669 00a0 02D0     		beq	.L259
2150:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4670              		.loc 2 2150 13
 4671 00a2 3B69     		ldr	r3, [r7, #16]
 4672 00a4 002B     		cmp	r3, #0
 4673 00a6 05D1     		bne	.L260
 4674              	.L259:
2151:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****            )
2152:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2153:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 4675              		.loc 2 2153 11
 4676 00a8 FB68     		ldr	r3, [r7, #12]
 4677 00aa 5B6D     		ldr	r3, [r3, #84]
 4678 00ac 23F48012 		bic	r2, r3, #1048576
 4679 00b0 FB68     		ldr	r3, [r7, #12]
 4680 00b2 5A65     		str	r2, [r3, #84]
 4681              	.L260:
2154:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2155:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2156:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Check if a conversion is on going on ADC group injected */
2157:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 4682              		.loc 2 2157 18
 4683 00b4 FB68     		ldr	r3, [r7, #12]
 4684 00b6 5B6D     		ldr	r3, [r3, #84]
 4685              		.loc 2 2157 26
 4686 00b8 03F48053 		and	r3, r3, #4096
 4687              		.loc 2 2157 12
 4688 00bc 002B     		cmp	r3, #0
 4689 00be 06D0     		beq	.L261
2158:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2159:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Reset ADC error code fields related to regular conversions only */
2160:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 4690              		.loc 2 2160 11
 4691 00c0 FB68     		ldr	r3, [r7, #12]
 4692 00c2 9B6D     		ldr	r3, [r3, #88]
 4693 00c4 23F00602 		bic	r2, r3, #6
 4694 00c8 FB68     		ldr	r3, [r7, #12]
 4695 00ca 9A65     		str	r2, [r3, #88]
 4696 00cc 02E0     		b	.L262
 4697              	.L261:
2161:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2162:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         else
2163:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2164:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Reset all ADC error code fields */
2165:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           ADC_CLEAR_ERRORCODE(hadc);
 4698              		.loc 2 2165 11
 4699 00ce FB68     		ldr	r3, [r7, #12]
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 262


 4700 00d0 0022     		movs	r2, #0
 4701 00d2 9A65     		str	r2, [r3, #88]
 4702              	.L262:
2166:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2167:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2168:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Set the DMA transfer complete callback */
2169:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 4703              		.loc 2 2169 13
 4704 00d4 FB68     		ldr	r3, [r7, #12]
 4705 00d6 DB6C     		ldr	r3, [r3, #76]
 4706              		.loc 2 2169 44
 4707 00d8 284A     		ldr	r2, .L266+20
 4708 00da DA63     		str	r2, [r3, #60]
2170:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2171:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Set the DMA half transfer complete callback */
2172:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 4709              		.loc 2 2172 13
 4710 00dc FB68     		ldr	r3, [r7, #12]
 4711 00de DB6C     		ldr	r3, [r3, #76]
 4712              		.loc 2 2172 48
 4713 00e0 274A     		ldr	r2, .L266+24
 4714 00e2 1A64     		str	r2, [r3, #64]
2173:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2174:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Set the DMA error callback */
2175:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 4715              		.loc 2 2175 13
 4716 00e4 FB68     		ldr	r3, [r7, #12]
 4717 00e6 DB6C     		ldr	r3, [r3, #76]
 4718              		.loc 2 2175 45
 4719 00e8 264A     		ldr	r2, .L266+28
 4720 00ea DA64     		str	r2, [r3, #76]
2176:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2177:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2178:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Manage ADC and DMA start: ADC overrun interruption, DMA start,     */
2179:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* ADC start (in case of SW start):                                   */
2180:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2181:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Clear regular group conversion flag and overrun flag               */
2182:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* (To ensure of no unknown state from potential previous ADC         */
2183:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* operations)                                                        */
2184:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 4721              		.loc 2 2184 9
 4722 00ec FB68     		ldr	r3, [r7, #12]
 4723 00ee 1B68     		ldr	r3, [r3]
 4724 00f0 1C22     		movs	r2, #28
 4725 00f2 1A60     		str	r2, [r3]
2185:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2186:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Process unlocked */
2187:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Unlock before starting ADC conversions: in case of potential         */
2188:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* interruption, to let the process to ADC IRQ Handler.                 */
2189:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 4726              		.loc 2 2189 9
 4727 00f4 FB68     		ldr	r3, [r7, #12]
 4728 00f6 0022     		movs	r2, #0
 4729 00f8 83F85020 		strb	r2, [r3, #80]
2190:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2191:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* With DMA, overrun event is always considered as an error even if
2192:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****            hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 263


2193:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****            ADC_IT_OVR is enabled. */
2194:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 4730              		.loc 2 2194 9
 4731 00fc FB68     		ldr	r3, [r7, #12]
 4732 00fe 1B68     		ldr	r3, [r3]
 4733 0100 5A68     		ldr	r2, [r3, #4]
 4734 0102 FB68     		ldr	r3, [r7, #12]
 4735 0104 1B68     		ldr	r3, [r3]
 4736 0106 42F01002 		orr	r2, r2, #16
 4737 010a 5A60     		str	r2, [r3, #4]
2195:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2196:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Enable ADC DMA  mode*/
2197:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
2198:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (hadc->Instance == ADC3)
2199:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2200:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.D
2201:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_EnableDMAReq(hadc->Instance);
2202:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2203:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         else
2204:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2205:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.C
2206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2207:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2208:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
2209:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagemen
 4738              		.loc 2 2209 9
 4739 010c FB68     		ldr	r3, [r7, #12]
 4740 010e 1A68     		ldr	r2, [r3]
 4741              		.loc 2 2209 76
 4742 0110 FB68     		ldr	r3, [r7, #12]
 4743 0112 DB6A     		ldr	r3, [r3, #44]
 4744              		.loc 2 2209 9
 4745 0114 1946     		mov	r1, r3
 4746 0116 1046     		mov	r0, r2
 4747 0118 FFF7FEFF 		bl	LL_ADC_REG_SetDataTransferMode
2210:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif
2211:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2212:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2213:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Start the DMA channel */
2214:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_
 4748              		.loc 2 2214 26
 4749 011c FB68     		ldr	r3, [r7, #12]
 4750 011e D86C     		ldr	r0, [r3, #76]
 4751              		.loc 2 2214 76
 4752 0120 FB68     		ldr	r3, [r7, #12]
 4753 0122 1B68     		ldr	r3, [r3]
 4754              		.loc 2 2214 71
 4755 0124 4033     		adds	r3, r3, #64
 4756              		.loc 2 2214 26
 4757 0126 1946     		mov	r1, r3
 4758 0128 BA68     		ldr	r2, [r7, #8]
 4759 012a 7B68     		ldr	r3, [r7, #4]
 4760 012c FFF7FEFF 		bl	HAL_DMA_Start_IT
 4761 0130 0346     		mov	r3, r0
 4762 0132 FB75     		strb	r3, [r7, #23]
2215:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2216:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Enable conversion of regular group.                                  */
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 264


2217:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* If software start has been selected, conversion starts immediately.  */
2218:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* If external trigger has been selected, conversion will start at next */
2219:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* trigger event.                                                       */
2220:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Start ADC group regular conversion */
2221:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         LL_ADC_REG_StartConversion(hadc->Instance);
 4763              		.loc 2 2221 9
 4764 0134 FB68     		ldr	r3, [r7, #12]
 4765 0136 1B68     		ldr	r3, [r3]
 4766 0138 1846     		mov	r0, r3
 4767 013a FFF7FEFF 		bl	LL_ADC_REG_StartConversion
2137:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 4768              		.loc 2 2137 10
 4769 013e 0DE0     		b	.L265
 4770              	.L256:
2222:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2223:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
2224:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2225:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Process unlocked */
2226:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 4771              		.loc 2 2226 9
 4772 0140 FB68     		ldr	r3, [r7, #12]
 4773 0142 0022     		movs	r2, #0
 4774 0144 83F85020 		strb	r2, [r3, #80]
2137:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 4775              		.loc 2 2137 10
 4776 0148 08E0     		b	.L265
 4777              	.L255:
2227:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2228:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2229:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2230:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
2231:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2232:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmp_hal_status = HAL_ERROR;
 4778              		.loc 2 2232 22
 4779 014a 0123     		movs	r3, #1
 4780 014c FB75     		strb	r3, [r7, #23]
2233:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Process unlocked */
2234:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 4781              		.loc 2 2234 7
 4782 014e FB68     		ldr	r3, [r7, #12]
 4783 0150 0022     		movs	r2, #0
 4784 0152 83F85020 		strb	r2, [r3, #80]
 4785 0156 01E0     		b	.L265
 4786              	.L251:
2235:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2236:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2237:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
2238:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2239:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
 4787              		.loc 2 2239 20
 4788 0158 0223     		movs	r3, #2
 4789 015a FB75     		strb	r3, [r7, #23]
 4790              	.L265:
2240:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2241:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2242:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return function status */
2243:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return tmp_hal_status;
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 265


 4791              		.loc 2 2243 10
 4792 015c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4793              	.L253:
2244:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 4794              		.loc 2 2244 1
 4795 015e 1846     		mov	r0, r3
 4796 0160 1837     		adds	r7, r7, #24
 4797              	.LCFI277:
 4798              		.cfi_def_cfa_offset 8
 4799 0162 BD46     		mov	sp, r7
 4800              	.LCFI278:
 4801              		.cfi_def_cfa_register 13
 4802              		@ sp needed
 4803 0164 80BD     		pop	{r7, pc}
 4804              	.L267:
 4805 0166 00BF     		.align	2
 4806              	.L266:
 4807 0168 00200240 		.word	1073881088
 4808 016c 00210240 		.word	1073881344
 4809 0170 00230240 		.word	1073881856
 4810 0174 00630258 		.word	1476551424
 4811 0178 FEF0FFFF 		.word	-3842
 4812 017c 00000000 		.word	ADC_DMAConvCplt
 4813 0180 00000000 		.word	ADC_DMAHalfConvCplt
 4814 0184 00000000 		.word	ADC_DMAError
 4815              		.cfi_endproc
 4816              	.LFE343:
 4818              		.section	.text.HAL_ADC_Stop_DMA,"ax",%progbits
 4819              		.align	1
 4820              		.global	HAL_ADC_Stop_DMA
 4821              		.syntax unified
 4822              		.thumb
 4823              		.thumb_func
 4825              	HAL_ADC_Stop_DMA:
 4826              	.LFB344:
2245:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2246:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
2247:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in
2248:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC DMA transfer, disable
2249:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         ADC peripheral.
2250:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note:  ADC peripheral disable is forcing stop of potential
2251:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         conversion on ADC group injected. If ADC group injected is under use, it
2252:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
2253:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Case of multimode enabled (when multimode feature is available):
2254:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         HAL_ADC_Stop_DMA() function is dedicated to single-ADC mode only.
2255:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
2256:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
2257:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status.
2258:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2259:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
2260:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 4827              		.loc 2 2260 1
 4828              		.cfi_startproc
 4829              		@ args = 0, pretend = 0, frame = 16
 4830              		@ frame_needed = 1, uses_anonymous_args = 0
 4831 0000 80B5     		push	{r7, lr}
 4832              	.LCFI279:
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 266


 4833              		.cfi_def_cfa_offset 8
 4834              		.cfi_offset 7, -8
 4835              		.cfi_offset 14, -4
 4836 0002 84B0     		sub	sp, sp, #16
 4837              	.LCFI280:
 4838              		.cfi_def_cfa_offset 24
 4839 0004 00AF     		add	r7, sp, #0
 4840              	.LCFI281:
 4841              		.cfi_def_cfa_register 7
 4842 0006 7860     		str	r0, [r7, #4]
2261:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
2262:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2263:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
2264:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2265:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2266:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Process locked */
2267:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_LOCK(hadc);
 4843              		.loc 2 2267 3
 4844 0008 7B68     		ldr	r3, [r7, #4]
 4845 000a 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4846 000e 012B     		cmp	r3, #1
 4847 0010 01D1     		bne	.L269
 4848              		.loc 2 2267 3 is_stmt 0 discriminator 1
 4849 0012 0223     		movs	r3, #2
 4850 0014 4FE0     		b	.L270
 4851              	.L269:
 4852              		.loc 2 2267 3 discriminator 2
 4853 0016 7B68     		ldr	r3, [r7, #4]
 4854 0018 0122     		movs	r2, #1
 4855 001a 83F85020 		strb	r2, [r3, #80]
2268:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2269:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* 1. Stop potential ADC group regular conversion on going */
2270:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 4856              		.loc 2 2270 20 is_stmt 1 discriminator 2
 4857 001e 0321     		movs	r1, #3
 4858 0020 7868     		ldr	r0, [r7, #4]
 4859 0022 FFF7FEFF 		bl	ADC_ConversionStop
 4860 0026 0346     		mov	r3, r0
 4861 0028 FB73     		strb	r3, [r7, #15]
2271:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2272:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
2273:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 4862              		.loc 2 2273 6 discriminator 2
 4863 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4864 002c 002B     		cmp	r3, #0
 4865 002e 3DD1     		bne	.L271
2274:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2275:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
2276:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 4866              		.loc 2 2276 5
 4867 0030 7B68     		ldr	r3, [r7, #4]
 4868 0032 1B68     		ldr	r3, [r3]
 4869 0034 DA68     		ldr	r2, [r3, #12]
 4870 0036 7B68     		ldr	r3, [r7, #4]
 4871 0038 1B68     		ldr	r3, [r3]
 4872 003a 22F00302 		bic	r2, r2, #3
 4873 003e DA60     		str	r2, [r3, #12]
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 267


2277:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2278:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop       */
2279:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* while DMA transfer is on going)                                        */
2280:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 4874              		.loc 2 2280 13
 4875 0040 7B68     		ldr	r3, [r7, #4]
 4876 0042 DB6C     		ldr	r3, [r3, #76]
 4877              		.loc 2 2280 25
 4878 0044 93F83530 		ldrb	r3, [r3, #53]
 4879 0048 DBB2     		uxtb	r3, r3
 4880              		.loc 2 2280 8
 4881 004a 022B     		cmp	r3, #2
 4882 004c 0FD1     		bne	.L272
2281:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2282:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 4883              		.loc 2 2282 24
 4884 004e 7B68     		ldr	r3, [r7, #4]
 4885 0050 DB6C     		ldr	r3, [r3, #76]
 4886 0052 1846     		mov	r0, r3
 4887 0054 FFF7FEFF 		bl	HAL_DMA_Abort
 4888 0058 0346     		mov	r3, r0
 4889 005a FB73     		strb	r3, [r7, #15]
2283:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2284:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Check if DMA channel effectively disabled */
2285:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (tmp_hal_status != HAL_OK)
 4890              		.loc 2 2285 10
 4891 005c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4892 005e 002B     		cmp	r3, #0
 4893 0060 05D0     		beq	.L272
2286:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2287:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Update ADC state machine to error */
2288:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 4894              		.loc 2 2288 9
 4895 0062 7B68     		ldr	r3, [r7, #4]
 4896 0064 5B6D     		ldr	r3, [r3, #84]
 4897 0066 43F04002 		orr	r2, r3, #64
 4898 006a 7B68     		ldr	r3, [r7, #4]
 4899 006c 5A65     		str	r2, [r3, #84]
 4900              	.L272:
2289:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2290:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2291:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2292:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
2293:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 4901              		.loc 2 2293 5
 4902 006e 7B68     		ldr	r3, [r7, #4]
 4903 0070 1B68     		ldr	r3, [r3]
 4904 0072 5A68     		ldr	r2, [r3, #4]
 4905 0074 7B68     		ldr	r3, [r7, #4]
 4906 0076 1B68     		ldr	r3, [r3]
 4907 0078 22F01002 		bic	r2, r2, #16
 4908 007c 5A60     		str	r2, [r3, #4]
2294:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2295:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
2296:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
2297:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* to keep in memory a potential failing status.                          */
2298:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 268


 4909              		.loc 2 2298 8
 4910 007e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4911 0080 002B     		cmp	r3, #0
 4912 0082 05D1     		bne	.L273
2299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2300:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmp_hal_status = ADC_Disable(hadc);
 4913              		.loc 2 2300 24
 4914 0084 7868     		ldr	r0, [r7, #4]
 4915 0086 FFF7FEFF 		bl	ADC_Disable
 4916 008a 0346     		mov	r3, r0
 4917 008c FB73     		strb	r3, [r7, #15]
 4918 008e 02E0     		b	.L274
 4919              	.L273:
2301:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2302:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
2303:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2304:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (void)ADC_Disable(hadc);
 4920              		.loc 2 2304 13
 4921 0090 7868     		ldr	r0, [r7, #4]
 4922 0092 FFF7FEFF 		bl	ADC_Disable
 4923              	.L274:
2305:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2306:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2307:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
2308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 4924              		.loc 2 2308 8
 4925 0096 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4926 0098 002B     		cmp	r3, #0
 4927 009a 07D1     		bne	.L271
2309:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2310:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state */
2311:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 4928              		.loc 2 2311 7
 4929 009c 7B68     		ldr	r3, [r7, #4]
 4930 009e 5A6D     		ldr	r2, [r3, #84]
 4931 00a0 074B     		ldr	r3, .L275
 4932 00a2 1340     		ands	r3, r3, r2
 4933 00a4 43F00102 		orr	r2, r3, #1
 4934 00a8 7B68     		ldr	r3, [r7, #4]
 4935 00aa 5A65     		str	r2, [r3, #84]
 4936              	.L271:
2312:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
2313:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
2314:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2315:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2316:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2317:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2318:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Process unlocked */
2319:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 4937              		.loc 2 2319 3
 4938 00ac 7B68     		ldr	r3, [r7, #4]
 4939 00ae 0022     		movs	r2, #0
 4940 00b0 83F85020 		strb	r2, [r3, #80]
2320:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2321:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return function status */
2322:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return tmp_hal_status;
 4941              		.loc 2 2322 10
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 269


 4942 00b4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4943              	.L270:
2323:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 4944              		.loc 2 2323 1
 4945 00b6 1846     		mov	r0, r3
 4946 00b8 1037     		adds	r7, r7, #16
 4947              	.LCFI282:
 4948              		.cfi_def_cfa_offset 8
 4949 00ba BD46     		mov	sp, r7
 4950              	.LCFI283:
 4951              		.cfi_def_cfa_register 13
 4952              		@ sp needed
 4953 00bc 80BD     		pop	{r7, pc}
 4954              	.L276:
 4955 00be 00BF     		.align	2
 4956              	.L275:
 4957 00c0 FEEEFFFF 		.word	-4354
 4958              		.cfi_endproc
 4959              	.LFE344:
 4961              		.section	.text.HAL_ADC_GetValue,"ax",%progbits
 4962              		.align	1
 4963              		.global	HAL_ADC_GetValue
 4964              		.syntax unified
 4965              		.thumb
 4966              		.thumb_func
 4968              	HAL_ADC_GetValue:
 4969              	.LFB345:
2324:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2325:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
2326:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Get ADC regular group conversion result.
2327:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Reading register DR automatically clears ADC flag EOC
2328:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         (ADC group regular end of unitary conversion).
2329:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   This function does not clear ADC flag EOS
2330:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         (ADC group regular end of sequence conversion).
2331:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         Occurrence of flag EOS rising:
2332:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          - If sequencer is composed of 1 rank, flag EOS is equivalent
2333:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *            to flag EOC.
2334:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          - If sequencer is composed of several ranks, during the scan
2335:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *            sequence flag EOC only is raised, at the end of the scan sequence
2336:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *            both flags EOC and EOS are raised.
2337:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         To clear this flag, either use function:
2338:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
2339:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         model polling: @ref HAL_ADC_PollForConversion()
2340:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
2341:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
2342:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval ADC group regular conversion data
2343:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2344:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
2345:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 4970              		.loc 2 2345 1
 4971              		.cfi_startproc
 4972              		@ args = 0, pretend = 0, frame = 8
 4973              		@ frame_needed = 1, uses_anonymous_args = 0
 4974              		@ link register save eliminated.
 4975 0000 80B4     		push	{r7}
 4976              	.LCFI284:
 4977              		.cfi_def_cfa_offset 4
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 270


 4978              		.cfi_offset 7, -4
 4979 0002 83B0     		sub	sp, sp, #12
 4980              	.LCFI285:
 4981              		.cfi_def_cfa_offset 16
 4982 0004 00AF     		add	r7, sp, #0
 4983              	.LCFI286:
 4984              		.cfi_def_cfa_register 7
 4985 0006 7860     		str	r0, [r7, #4]
2346:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
2347:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2348:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2349:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Note: EOC flag is not cleared here by software because automatically     */
2350:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /*       cleared by hardware when reading register DR.                      */
2351:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2352:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return ADC converted value */
2353:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return hadc->Instance->DR;
 4986              		.loc 2 2353 14
 4987 0008 7B68     		ldr	r3, [r7, #4]
 4988 000a 1B68     		ldr	r3, [r3]
 4989              		.loc 2 2353 24
 4990 000c 1B6C     		ldr	r3, [r3, #64]
2354:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 4991              		.loc 2 2354 1
 4992 000e 1846     		mov	r0, r3
 4993 0010 0C37     		adds	r7, r7, #12
 4994              	.LCFI287:
 4995              		.cfi_def_cfa_offset 4
 4996 0012 BD46     		mov	sp, r7
 4997              	.LCFI288:
 4998              		.cfi_def_cfa_register 13
 4999              		@ sp needed
 5000 0014 5DF8047B 		ldr	r7, [sp], #4
 5001              	.LCFI289:
 5002              		.cfi_restore 7
 5003              		.cfi_def_cfa_offset 0
 5004 0018 7047     		bx	lr
 5005              		.cfi_endproc
 5006              	.LFE345:
 5008              		.section	.text.HAL_ADC_IRQHandler,"ax",%progbits
 5009              		.align	1
 5010              		.global	HAL_ADC_IRQHandler
 5011              		.syntax unified
 5012              		.thumb
 5013              		.thumb_func
 5015              	HAL_ADC_IRQHandler:
 5016              	.LFB346:
2355:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2356:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
2357:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Handle ADC interrupt request.
2358:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
2359:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval None
2360:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2361:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
2362:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 5017              		.loc 2 2362 1
 5018              		.cfi_startproc
 5019              		@ args = 0, pretend = 0, frame = 40
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 271


 5020              		@ frame_needed = 1, uses_anonymous_args = 0
 5021 0000 80B5     		push	{r7, lr}
 5022              	.LCFI290:
 5023              		.cfi_def_cfa_offset 8
 5024              		.cfi_offset 7, -8
 5025              		.cfi_offset 14, -4
 5026 0002 8AB0     		sub	sp, sp, #40
 5027              	.LCFI291:
 5028              		.cfi_def_cfa_offset 48
 5029 0004 00AF     		add	r7, sp, #0
 5030              	.LCFI292:
 5031              		.cfi_def_cfa_register 7
 5032 0006 7860     		str	r0, [r7, #4]
2363:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error 
 5033              		.loc 2 2363 12
 5034 0008 0023     		movs	r3, #0
 5035 000a 7B62     		str	r3, [r7, #36]
2364:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_isr = hadc->Instance->ISR;
 5036              		.loc 2 2364 26
 5037 000c 7B68     		ldr	r3, [r7, #4]
 5038 000e 1B68     		ldr	r3, [r3]
 5039              		.loc 2 2364 12
 5040 0010 1B68     		ldr	r3, [r3]
 5041 0012 FB61     		str	r3, [r7, #28]
2365:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_ier = hadc->Instance->IER;
 5042              		.loc 2 2365 26
 5043 0014 7B68     		ldr	r3, [r7, #4]
 5044 0016 1B68     		ldr	r3, [r3]
 5045              		.loc 2 2365 12
 5046 0018 5B68     		ldr	r3, [r3, #4]
 5047 001a BB61     		str	r3, [r7, #24]
2366:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_adc_inj_is_trigger_source_sw_start;
2367:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_adc_reg_is_trigger_source_sw_start;
2368:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_cfgr;
2369:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   const ADC_TypeDef *tmpADC_Master;
2370:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 5048              		.loc 2 2370 55
 5049 001c 7B68     		ldr	r3, [r7, #4]
 5050 001e 1B68     		ldr	r3, [r3]
 5051              		.loc 2 2370 35
 5052 0020 874A     		ldr	r2, .L325
 5053 0022 9342     		cmp	r3, r2
 5054 0024 04D0     		beq	.L280
 5055              		.loc 2 2370 55 discriminator 2
 5056 0026 7B68     		ldr	r3, [r7, #4]
 5057 0028 1B68     		ldr	r3, [r3]
 5058 002a 864A     		ldr	r2, .L325+4
 5059 002c 9342     		cmp	r3, r2
 5060 002e 01D1     		bne	.L281
 5061              	.L280:
 5062              		.loc 2 2370 35 discriminator 3
 5063 0030 854B     		ldr	r3, .L325+8
 5064 0032 00E0     		b	.L282
 5065              	.L281:
 5066              		.loc 2 2370 35 is_stmt 0 discriminator 4
 5067 0034 854B     		ldr	r3, .L325+12
 5068              	.L282:
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 272


 5069              		.loc 2 2370 35 discriminator 6
 5070 0036 1846     		mov	r0, r3
 5071 0038 FFF7FEFF 		bl	LL_ADC_GetMultimode
 5072 003c 7861     		str	r0, [r7, #20]
2371:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2372:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
2373:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2374:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
2375:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2376:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* ========== Check End of Sampling flag for ADC group regular ========== */
2377:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 5073              		.loc 2 2377 17 is_stmt 1 discriminator 6
 5074 003e FB69     		ldr	r3, [r7, #28]
 5075 0040 03F00203 		and	r3, r3, #2
 5076              		.loc 2 2377 6 discriminator 6
 5077 0044 002B     		cmp	r3, #0
 5078 0046 17D0     		beq	.L283
 5079              		.loc 2 2377 67 discriminator 1
 5080 0048 BB69     		ldr	r3, [r7, #24]
 5081 004a 03F00203 		and	r3, r3, #2
 5082              		.loc 2 2377 54 discriminator 1
 5083 004e 002B     		cmp	r3, #0
 5084 0050 12D0     		beq	.L283
2378:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2379:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Update state machine on end of sampling status if not in error state */
2380:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 5085              		.loc 2 2380 14
 5086 0052 7B68     		ldr	r3, [r7, #4]
 5087 0054 5B6D     		ldr	r3, [r3, #84]
 5088              		.loc 2 2380 22
 5089 0056 03F01003 		and	r3, r3, #16
 5090              		.loc 2 2380 8
 5091 005a 002B     		cmp	r3, #0
 5092 005c 05D1     		bne	.L284
2381:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2382:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state */
2383:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 5093              		.loc 2 2383 7
 5094 005e 7B68     		ldr	r3, [r7, #4]
 5095 0060 5B6D     		ldr	r3, [r3, #84]
 5096 0062 43F40062 		orr	r2, r3, #2048
 5097 0066 7B68     		ldr	r3, [r7, #4]
 5098 0068 5A65     		str	r2, [r3, #84]
 5099              	.L284:
2384:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2385:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2386:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* End Of Sampling callback */
2387:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2388:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->EndOfSamplingCallback(hadc);
2389:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
2390:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     HAL_ADCEx_EndOfSamplingCallback(hadc);
 5100              		.loc 2 2390 5
 5101 006a 7868     		ldr	r0, [r7, #4]
 5102 006c FFF7FEFF 		bl	HAL_ADCEx_EndOfSamplingCallback
2391:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2392:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2393:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Clear regular group conversion flag */
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 273


2394:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 5103              		.loc 2 2394 5
 5104 0070 7B68     		ldr	r3, [r7, #4]
 5105 0072 1B68     		ldr	r3, [r3]
 5106 0074 0222     		movs	r2, #2
 5107 0076 1A60     		str	r2, [r3]
 5108              	.L283:
2395:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2396:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2397:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
2398:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 5109              		.loc 2 2398 18
 5110 0078 FB69     		ldr	r3, [r7, #28]
 5111 007a 03F00403 		and	r3, r3, #4
 5112              		.loc 2 2398 6
 5113 007e 002B     		cmp	r3, #0
 5114 0080 04D0     		beq	.L285
 5115              		.loc 2 2398 64 discriminator 1
 5116 0082 BB69     		ldr	r3, [r7, #24]
 5117 0084 03F00403 		and	r3, r3, #4
 5118              		.loc 2 2398 51 discriminator 1
 5119 0088 002B     		cmp	r3, #0
 5120 008a 0AD1     		bne	.L286
 5121              	.L285:
2399:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 5122              		.loc 2 2399 18 discriminator 3
 5123 008c FB69     		ldr	r3, [r7, #28]
 5124 008e 03F00803 		and	r3, r3, #8
2398:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 5125              		.loc 2 2398 94 discriminator 3
 5126 0092 002B     		cmp	r3, #0
 5127 0094 00F08380 		beq	.L287
 5128              		.loc 2 2399 64
 5129 0098 BB69     		ldr	r3, [r7, #24]
 5130 009a 03F00803 		and	r3, r3, #8
 5131              		.loc 2 2399 51
 5132 009e 002B     		cmp	r3, #0
 5133 00a0 7DD0     		beq	.L287
 5134              	.L286:
2400:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2401:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Update state machine on conversion status if not in error state */
2402:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 5135              		.loc 2 2402 14
 5136 00a2 7B68     		ldr	r3, [r7, #4]
 5137 00a4 5B6D     		ldr	r3, [r3, #84]
 5138              		.loc 2 2402 22
 5139 00a6 03F01003 		and	r3, r3, #16
 5140              		.loc 2 2402 8
 5141 00aa 002B     		cmp	r3, #0
 5142 00ac 05D1     		bne	.L288
2403:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2404:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state */
2405:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 5143              		.loc 2 2405 7
 5144 00ae 7B68     		ldr	r3, [r7, #4]
 5145 00b0 5B6D     		ldr	r3, [r3, #84]
 5146 00b2 43F40072 		orr	r2, r3, #512
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 274


 5147 00b6 7B68     		ldr	r3, [r7, #4]
 5148 00b8 5A65     		str	r2, [r3, #84]
 5149              	.L288:
2406:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2407:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2408:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
2409:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going         */
2410:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* to disable interruption.                                               */
2411:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 5150              		.loc 2 2411 9
 5151 00ba 7B68     		ldr	r3, [r7, #4]
 5152 00bc 1B68     		ldr	r3, [r3]
 5153 00be 1846     		mov	r0, r3
 5154 00c0 FFF7FEFF 		bl	LL_ADC_REG_IsTriggerSourceSWStart
 5155 00c4 0346     		mov	r3, r0
 5156              		.loc 2 2411 8
 5157 00c6 002B     		cmp	r3, #0
 5158 00c8 62D0     		beq	.L289
2412:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2413:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Get relevant register CFGR in ADC instance of ADC master or slave    */
2414:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* in function of multimode state (for devices with multimode           */
2415:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* available).                                                          */
2416:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 5159              		.loc 2 2416 12
 5160 00ca 7B68     		ldr	r3, [r7, #4]
 5161 00cc 1B68     		ldr	r3, [r3]
 5162 00ce 5D4A     		ldr	r2, .L325+4
 5163 00d0 9342     		cmp	r3, r2
 5164 00d2 02D0     		beq	.L290
 5165              		.loc 2 2416 12 is_stmt 0 discriminator 1
 5166 00d4 7B68     		ldr	r3, [r7, #4]
 5167 00d6 1B68     		ldr	r3, [r3]
 5168 00d8 00E0     		b	.L291
 5169              	.L290:
 5170              		.loc 2 2416 12 discriminator 2
 5171 00da 594B     		ldr	r3, .L325
 5172              	.L291:
 5173              		.loc 2 2416 66 is_stmt 1 discriminator 4
 5174 00dc 7A68     		ldr	r2, [r7, #4]
 5175 00de 1268     		ldr	r2, [r2]
 5176              		.loc 2 2416 10 discriminator 4
 5177 00e0 9342     		cmp	r3, r2
 5178 00e2 08D0     		beq	.L292
2417:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 5179              		.loc 2 2417 11
 5180 00e4 7B69     		ldr	r3, [r7, #20]
 5181 00e6 002B     		cmp	r3, #0
 5182 00e8 05D0     		beq	.L292
2418:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 5183              		.loc 2 2418 11
 5184 00ea 7B69     		ldr	r3, [r7, #20]
 5185 00ec 052B     		cmp	r3, #5
 5186 00ee 02D0     		beq	.L292
2419:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 5187              		.loc 2 2419 11
 5188 00f0 7B69     		ldr	r3, [r7, #20]
 5189 00f2 092B     		cmp	r3, #9
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 275


 5190 00f4 04D1     		bne	.L293
 5191              	.L292:
2420:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          )
2421:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2422:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* check CONT bit directly in handle ADC CFGR register */
2423:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 5192              		.loc 2 2423 20
 5193 00f6 7B68     		ldr	r3, [r7, #4]
 5194 00f8 1B68     		ldr	r3, [r3]
 5195              		.loc 2 2423 18
 5196 00fa DB68     		ldr	r3, [r3, #12]
 5197 00fc 3B62     		str	r3, [r7, #32]
 5198 00fe 0CE0     		b	.L294
 5199              	.L293:
2424:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2425:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
2426:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2427:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* else need to check Master ADC CONT bit */
2428:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 5200              		.loc 2 2428 25
 5201 0100 7B68     		ldr	r3, [r7, #4]
 5202 0102 1B68     		ldr	r3, [r3]
 5203 0104 4F4A     		ldr	r2, .L325+4
 5204 0106 9342     		cmp	r3, r2
 5205 0108 02D0     		beq	.L295
 5206              		.loc 2 2428 25 is_stmt 0 discriminator 1
 5207 010a 7B68     		ldr	r3, [r7, #4]
 5208 010c 1B68     		ldr	r3, [r3]
 5209 010e 00E0     		b	.L296
 5210              	.L295:
 5211              		.loc 2 2428 25 discriminator 2
 5212 0110 4B4B     		ldr	r3, .L325
 5213              	.L296:
 5214              		.loc 2 2428 23 is_stmt 1 discriminator 4
 5215 0112 3B61     		str	r3, [r7, #16]
2429:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 5216              		.loc 2 2429 18 discriminator 4
 5217 0114 3B69     		ldr	r3, [r7, #16]
 5218 0116 DB68     		ldr	r3, [r3, #12]
 5219 0118 3B62     		str	r3, [r7, #32]
 5220              	.L294:
2430:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2431:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2432:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Carry on if continuous mode is disabled */
2433:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 5221              		.loc 2 2433 11
 5222 011a 3B6A     		ldr	r3, [r7, #32]
 5223 011c 03F40053 		and	r3, r3, #8192
 5224              		.loc 2 2433 10
 5225 0120 002B     		cmp	r3, #0
 5226 0122 35D1     		bne	.L289
2434:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2435:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* If End of Sequence is reached, disable interrupts */
2436:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 5227              		.loc 2 2436 13
 5228 0124 7B68     		ldr	r3, [r7, #4]
 5229 0126 1B68     		ldr	r3, [r3]
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 276


 5230 0128 1B68     		ldr	r3, [r3]
 5231 012a 03F00803 		and	r3, r3, #8
 5232              		.loc 2 2436 12
 5233 012e 082B     		cmp	r3, #8
 5234 0130 2ED1     		bne	.L289
2437:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2438:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
2439:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* ADSTART==0 (no conversion on going)                              */
2440:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 5235              		.loc 2 2440 15
 5236 0132 7B68     		ldr	r3, [r7, #4]
 5237 0134 1B68     		ldr	r3, [r3]
 5238 0136 1846     		mov	r0, r3
 5239 0138 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 5240 013c 0346     		mov	r3, r0
 5241              		.loc 2 2440 14
 5242 013e 002B     		cmp	r3, #0
 5243 0140 1AD1     		bne	.L297
2441:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
2442:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* Disable ADC end of sequence conversion interrupt */
2443:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* Note: Overrun interrupt was enabled with EOC interrupt in      */
2444:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* HAL_Start_IT(), but is not disabled here because can be used   */
2445:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* by overrun IRQ process below.                                  */
2446:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 5244              		.loc 2 2446 13
 5245 0142 7B68     		ldr	r3, [r7, #4]
 5246 0144 1B68     		ldr	r3, [r3]
 5247 0146 5A68     		ldr	r2, [r3, #4]
 5248 0148 7B68     		ldr	r3, [r7, #4]
 5249 014a 1B68     		ldr	r3, [r3]
 5250 014c 22F00C02 		bic	r2, r2, #12
 5251 0150 5A60     		str	r2, [r3, #4]
2447:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2448:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* Set ADC state */
2449:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 5252              		.loc 2 2449 13
 5253 0152 7B68     		ldr	r3, [r7, #4]
 5254 0154 5B6D     		ldr	r3, [r3, #84]
 5255 0156 23F48072 		bic	r2, r3, #256
 5256 015a 7B68     		ldr	r3, [r7, #4]
 5257 015c 5A65     		str	r2, [r3, #84]
2450:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2451:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 5258              		.loc 2 2451 22
 5259 015e 7B68     		ldr	r3, [r7, #4]
 5260 0160 5B6D     		ldr	r3, [r3, #84]
 5261              		.loc 2 2451 30
 5262 0162 03F48053 		and	r3, r3, #4096
 5263              		.loc 2 2451 16
 5264 0166 002B     		cmp	r3, #0
 5265 0168 12D1     		bne	.L289
2452:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             {
2453:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 5266              		.loc 2 2453 15
 5267 016a 7B68     		ldr	r3, [r7, #4]
 5268 016c 5B6D     		ldr	r3, [r3, #84]
 5269 016e 43F00102 		orr	r2, r3, #1
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 277


 5270 0172 7B68     		ldr	r3, [r7, #4]
 5271 0174 5A65     		str	r2, [r3, #84]
 5272 0176 0BE0     		b	.L289
 5273              	.L297:
2454:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
2455:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
2456:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           else
2457:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
2458:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* Change ADC state to error state */
2459:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 5274              		.loc 2 2459 13
 5275 0178 7B68     		ldr	r3, [r7, #4]
 5276 017a 5B6D     		ldr	r3, [r3, #84]
 5277 017c 43F01002 		orr	r2, r3, #16
 5278 0180 7B68     		ldr	r3, [r7, #4]
 5279 0182 5A65     		str	r2, [r3, #84]
2460:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2461:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* Set ADC error code to ADC peripheral internal error */
2462:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 5280              		.loc 2 2462 13
 5281 0184 7B68     		ldr	r3, [r7, #4]
 5282 0186 9B6D     		ldr	r3, [r3, #88]
 5283 0188 43F00102 		orr	r2, r3, #1
 5284 018c 7B68     		ldr	r3, [r7, #4]
 5285 018e 9A65     		str	r2, [r3, #88]
 5286              	.L289:
2463:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
2464:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2465:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2466:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2467:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2468:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Conversion complete callback */
2469:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Note: Into callback function "HAL_ADC_ConvCpltCallback()",             */
2470:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*       to determine if conversion has been triggered from EOC or EOS,   */
2471:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*       possibility to use:                                              */
2472:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
2473:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2474:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->ConvCpltCallback(hadc);
2475:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
2476:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
 5287              		.loc 2 2476 5
 5288 0190 7868     		ldr	r0, [r7, #4]
 5289 0192 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
2477:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2478:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2479:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Clear regular group conversion flag */
2480:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
2481:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*       conversion flags clear induces the release of the preserved data.*/
2482:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*       Therefore, if the preserved data value is needed, it must be     */
2483:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
2484:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 5290              		.loc 2 2484 5
 5291 0196 7B68     		ldr	r3, [r7, #4]
 5292 0198 1B68     		ldr	r3, [r3]
 5293 019a 0C22     		movs	r2, #12
 5294 019c 1A60     		str	r2, [r3]
 5295              	.L287:
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 278


2485:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2486:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2487:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
2488:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 5296              		.loc 2 2488 18
 5297 019e FB69     		ldr	r3, [r7, #28]
 5298 01a0 03F02003 		and	r3, r3, #32
 5299              		.loc 2 2488 6
 5300 01a4 002B     		cmp	r3, #0
 5301 01a6 04D0     		beq	.L298
 5302              		.loc 2 2488 66 discriminator 1
 5303 01a8 BB69     		ldr	r3, [r7, #24]
 5304 01aa 03F02003 		and	r3, r3, #32
 5305              		.loc 2 2488 53 discriminator 1
 5306 01ae 002B     		cmp	r3, #0
 5307 01b0 0BD1     		bne	.L299
 5308              	.L298:
2489:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 5309              		.loc 2 2489 18 discriminator 3
 5310 01b2 FB69     		ldr	r3, [r7, #28]
 5311 01b4 03F04003 		and	r3, r3, #64
2488:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 5312              		.loc 2 2488 98 discriminator 3
 5313 01b8 002B     		cmp	r3, #0
 5314 01ba 00F0A080 		beq	.L300
 5315              		.loc 2 2489 66
 5316 01be BB69     		ldr	r3, [r7, #24]
 5317 01c0 03F04003 		and	r3, r3, #64
 5318              		.loc 2 2489 53
 5319 01c4 002B     		cmp	r3, #0
 5320 01c6 00F09A80 		beq	.L300
 5321              	.L299:
2490:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2491:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Update state machine on conversion status if not in error state */
2492:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 5322              		.loc 2 2492 14
 5323 01ca 7B68     		ldr	r3, [r7, #4]
 5324 01cc 5B6D     		ldr	r3, [r3, #84]
 5325              		.loc 2 2492 22
 5326 01ce 03F01003 		and	r3, r3, #16
 5327              		.loc 2 2492 8
 5328 01d2 002B     		cmp	r3, #0
 5329 01d4 05D1     		bne	.L301
2493:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2494:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state */
2495:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 5330              		.loc 2 2495 7
 5331 01d6 7B68     		ldr	r3, [r7, #4]
 5332 01d8 5B6D     		ldr	r3, [r3, #84]
 5333 01da 43F40052 		orr	r2, r3, #8192
 5334 01de 7B68     		ldr	r3, [r7, #4]
 5335 01e0 5A65     		str	r2, [r3, #84]
 5336              	.L301:
2496:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2497:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2498:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Retrieve ADC configuration */
2499:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 279


 5337              		.loc 2 2499 46
 5338 01e2 7B68     		ldr	r3, [r7, #4]
 5339 01e4 1B68     		ldr	r3, [r3]
 5340 01e6 1846     		mov	r0, r3
 5341 01e8 FFF7FEFF 		bl	LL_ADC_INJ_IsTriggerSourceSWStart
 5342 01ec F860     		str	r0, [r7, #12]
2500:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 5343              		.loc 2 2500 46
 5344 01ee 7B68     		ldr	r3, [r7, #4]
 5345 01f0 1B68     		ldr	r3, [r3]
 5346 01f2 1846     		mov	r0, r3
 5347 01f4 FFF7FEFF 		bl	LL_ADC_REG_IsTriggerSourceSWStart
 5348 01f8 B860     		str	r0, [r7, #8]
2501:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Get relevant register CFGR in ADC instance of ADC master or slave  */
2502:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* in function of multimode state (for devices with multimode         */
2503:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* available).                                                        */
2504:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 5349              		.loc 2 2504 10
 5350 01fa 7B68     		ldr	r3, [r7, #4]
 5351 01fc 1B68     		ldr	r3, [r3]
 5352 01fe 114A     		ldr	r2, .L325+4
 5353 0200 9342     		cmp	r3, r2
 5354 0202 02D0     		beq	.L302
 5355              		.loc 2 2504 10 is_stmt 0 discriminator 1
 5356 0204 7B68     		ldr	r3, [r7, #4]
 5357 0206 1B68     		ldr	r3, [r3]
 5358 0208 00E0     		b	.L303
 5359              	.L302:
 5360              		.loc 2 2504 10 discriminator 2
 5361 020a 0D4B     		ldr	r3, .L325
 5362              	.L303:
 5363              		.loc 2 2504 64 is_stmt 1 discriminator 4
 5364 020c 7A68     		ldr	r2, [r7, #4]
 5365 020e 1268     		ldr	r2, [r2]
 5366              		.loc 2 2504 8 discriminator 4
 5367 0210 9342     		cmp	r3, r2
 5368 0212 08D0     		beq	.L304
2505:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 5369              		.loc 2 2505 9
 5370 0214 7B69     		ldr	r3, [r7, #20]
 5371 0216 002B     		cmp	r3, #0
 5372 0218 05D0     		beq	.L304
2506:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 5373              		.loc 2 2506 9
 5374 021a 7B69     		ldr	r3, [r7, #20]
 5375 021c 062B     		cmp	r3, #6
 5376 021e 02D0     		beq	.L304
2507:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 5377              		.loc 2 2507 9
 5378 0220 7B69     		ldr	r3, [r7, #20]
 5379 0222 072B     		cmp	r3, #7
 5380 0224 04D1     		bne	.L305
 5381              	.L304:
2508:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        )
2509:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2510:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 5382              		.loc 2 2510 18
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 280


 5383 0226 7B68     		ldr	r3, [r7, #4]
 5384 0228 1B68     		ldr	r3, [r3]
 5385              		.loc 2 2510 16
 5386 022a DB68     		ldr	r3, [r3, #12]
 5387 022c 3B62     		str	r3, [r7, #32]
 5388 022e 14E0     		b	.L306
 5389              	.L305:
2511:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2512:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
2513:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2514:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 5390              		.loc 2 2514 23
 5391 0230 7B68     		ldr	r3, [r7, #4]
 5392 0232 1B68     		ldr	r3, [r3]
 5393 0234 034A     		ldr	r2, .L325+4
 5394 0236 9342     		cmp	r3, r2
 5395 0238 0AD0     		beq	.L307
 5396              		.loc 2 2514 23 is_stmt 0 discriminator 1
 5397 023a 7B68     		ldr	r3, [r7, #4]
 5398 023c 1B68     		ldr	r3, [r3]
 5399 023e 08E0     		b	.L308
 5400              	.L326:
 5401              		.align	2
 5402              	.L325:
 5403 0240 00200240 		.word	1073881088
 5404 0244 00210240 		.word	1073881344
 5405 0248 00230240 		.word	1073881856
 5406 024c 00630258 		.word	1476551424
 5407              	.L307:
 5408              		.loc 2 2514 23 discriminator 2
 5409 0250 844B     		ldr	r3, .L327
 5410              	.L308:
 5411              		.loc 2 2514 21 is_stmt 1 discriminator 4
 5412 0252 3B61     		str	r3, [r7, #16]
2515:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 5413              		.loc 2 2515 16 discriminator 4
 5414 0254 3B69     		ldr	r3, [r7, #16]
 5415 0256 DB68     		ldr	r3, [r3, #12]
 5416 0258 3B62     		str	r3, [r7, #32]
 5417              	.L306:
2516:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2517:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2518:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Disable interruption if no further conversion upcoming by injected     */
2519:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* external trigger or by automatic injected conversion with regular      */
2520:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* group having no further conversion upcoming (same conditions as        */
2521:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* regular group interruption disabling above),                           */
2522:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* and if injected scan sequence is completed.                            */
2523:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 5418              		.loc 2 2523 8
 5419 025a FB68     		ldr	r3, [r7, #12]
 5420 025c 002B     		cmp	r3, #0
 5421 025e 47D0     		beq	.L309
2524:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2525:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 5422              		.loc 2 2525 12
 5423 0260 3B6A     		ldr	r3, [r7, #32]
 5424 0262 03F00073 		and	r3, r3, #33554432
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 281


 5425              		.loc 2 2525 10
 5426 0266 002B     		cmp	r3, #0
 5427 0268 07D0     		beq	.L310
 5428              		.loc 2 2525 55 discriminator 1
 5429 026a BB68     		ldr	r3, [r7, #8]
 5430 026c 002B     		cmp	r3, #0
 5431 026e 3FD0     		beq	.L309
2526:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
2527:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****            (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 5432              		.loc 2 2527 13
 5433 0270 3B6A     		ldr	r3, [r7, #32]
 5434 0272 03F40053 		and	r3, r3, #8192
2526:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 5435              		.loc 2 2526 60
 5436 0276 002B     		cmp	r3, #0
 5437 0278 3AD1     		bne	.L309
 5438              	.L310:
2528:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2529:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* If End of Sequence is reached, disable interrupts */
2530:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 5439              		.loc 2 2530 13
 5440 027a 7B68     		ldr	r3, [r7, #4]
 5441 027c 1B68     		ldr	r3, [r3]
 5442 027e 1B68     		ldr	r3, [r3]
 5443 0280 03F04003 		and	r3, r3, #64
 5444              		.loc 2 2530 12
 5445 0284 402B     		cmp	r3, #64
 5446 0286 33D1     		bne	.L309
2531:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2532:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Particular case if injected contexts queue is enabled:             */
2533:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* when the last context has been fully processed, JSQR is reset      */
2534:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* by the hardware. Even if no injected conversion is planned to come */
2535:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* (queue empty, triggers are ignored), it can start again            */
2536:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* immediately after setting a new context (JADSTART is still set).   */
2537:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Therefore, state of HAL ADC injected group is kept to busy.        */
2538:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 5447              		.loc 2 2538 15
 5448 0288 3B6A     		ldr	r3, [r7, #32]
 5449 028a 03F40013 		and	r3, r3, #2097152
 5450              		.loc 2 2538 14
 5451 028e 002B     		cmp	r3, #0
 5452 0290 2ED1     		bne	.L309
2539:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
2540:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
2541:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* JADSTART==0 (no conversion on going)                             */
2542:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 5453              		.loc 2 2542 17
 5454 0292 7B68     		ldr	r3, [r7, #4]
 5455 0294 1B68     		ldr	r3, [r3]
 5456 0296 1846     		mov	r0, r3
 5457 0298 FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 5458 029c 0346     		mov	r3, r0
 5459              		.loc 2 2542 16
 5460 029e 002B     		cmp	r3, #0
 5461 02a0 1AD1     		bne	.L311
2543:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             {
2544:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               /* Disable ADC end of sequence conversion interrupt  */
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 282


2545:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 5462              		.loc 2 2545 15
 5463 02a2 7B68     		ldr	r3, [r7, #4]
 5464 02a4 1B68     		ldr	r3, [r3]
 5465 02a6 5A68     		ldr	r2, [r3, #4]
 5466 02a8 7B68     		ldr	r3, [r7, #4]
 5467 02aa 1B68     		ldr	r3, [r3]
 5468 02ac 22F06002 		bic	r2, r2, #96
 5469 02b0 5A60     		str	r2, [r3, #4]
2546:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2547:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               /* Set ADC state */
2548:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 5470              		.loc 2 2548 15
 5471 02b2 7B68     		ldr	r3, [r7, #4]
 5472 02b4 5B6D     		ldr	r3, [r3, #84]
 5473 02b6 23F48052 		bic	r2, r3, #4096
 5474 02ba 7B68     		ldr	r3, [r7, #4]
 5475 02bc 5A65     		str	r2, [r3, #84]
2549:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2550:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 5476              		.loc 2 2550 24
 5477 02be 7B68     		ldr	r3, [r7, #4]
 5478 02c0 5B6D     		ldr	r3, [r3, #84]
 5479              		.loc 2 2550 32
 5480 02c2 03F48073 		and	r3, r3, #256
 5481              		.loc 2 2550 18
 5482 02c6 002B     		cmp	r3, #0
 5483 02c8 12D1     		bne	.L309
2551:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               {
2552:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 5484              		.loc 2 2552 17
 5485 02ca 7B68     		ldr	r3, [r7, #4]
 5486 02cc 5B6D     		ldr	r3, [r3, #84]
 5487 02ce 43F00102 		orr	r2, r3, #1
 5488 02d2 7B68     		ldr	r3, [r7, #4]
 5489 02d4 5A65     		str	r2, [r3, #84]
 5490 02d6 0BE0     		b	.L309
 5491              	.L311:
2553:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               }
2554:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
2555:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             else
2556:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             {
2557:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               /* Update ADC state machine to error */
2558:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 5492              		.loc 2 2558 15
 5493 02d8 7B68     		ldr	r3, [r7, #4]
 5494 02da 5B6D     		ldr	r3, [r3, #84]
 5495 02dc 43F01002 		orr	r2, r3, #16
 5496 02e0 7B68     		ldr	r3, [r7, #4]
 5497 02e2 5A65     		str	r2, [r3, #84]
2559:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2560:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               /* Set ADC error code to ADC peripheral internal error */
2561:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 5498              		.loc 2 2561 15
 5499 02e4 7B68     		ldr	r3, [r7, #4]
 5500 02e6 9B6D     		ldr	r3, [r3, #88]
 5501 02e8 43F00102 		orr	r2, r3, #1
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 283


 5502 02ec 7B68     		ldr	r3, [r7, #4]
 5503 02ee 9A65     		str	r2, [r3, #88]
 5504              	.L309:
2562:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
2563:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
2564:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2565:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2566:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2567:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2568:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Injected Conversion complete callback */
2569:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Note:  HAL_ADCEx_InjectedConvCpltCallback can resort to
2570:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) or
2571:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOC)) to determine whether
2572:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               interruption has been triggered by end of conversion or end of
2573:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               sequence.    */
2574:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2575:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->InjectedConvCpltCallback(hadc);
2576:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
2577:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     HAL_ADCEx_InjectedConvCpltCallback(hadc);
 5505              		.loc 2 2577 5
 5506 02f0 7868     		ldr	r0, [r7, #4]
 5507 02f2 FFF7FEFF 		bl	HAL_ADCEx_InjectedConvCpltCallback
2578:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2579:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2580:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Clear injected group conversion flag */
2581:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 5508              		.loc 2 2581 5
 5509 02f6 7B68     		ldr	r3, [r7, #4]
 5510 02f8 1B68     		ldr	r3, [r3]
 5511 02fa 6022     		movs	r2, #96
 5512 02fc 1A60     		str	r2, [r3]
 5513              	.L300:
2582:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2583:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2584:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* ========== Check Analog watchdog 1 flag ========== */
2585:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 5514              		.loc 2 2585 17
 5515 02fe FB69     		ldr	r3, [r7, #28]
 5516 0300 03F08003 		and	r3, r3, #128
 5517              		.loc 2 2585 6
 5518 0304 002B     		cmp	r3, #0
 5519 0306 11D0     		beq	.L312
 5520              		.loc 2 2585 65 discriminator 1
 5521 0308 BB69     		ldr	r3, [r7, #24]
 5522 030a 03F08003 		and	r3, r3, #128
 5523              		.loc 2 2585 52 discriminator 1
 5524 030e 002B     		cmp	r3, #0
 5525 0310 0CD0     		beq	.L312
2586:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2587:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Set ADC state */
2588:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 5526              		.loc 2 2588 5
 5527 0312 7B68     		ldr	r3, [r7, #4]
 5528 0314 5B6D     		ldr	r3, [r3, #84]
 5529 0316 43F48032 		orr	r2, r3, #65536
 5530 031a 7B68     		ldr	r3, [r7, #4]
 5531 031c 5A65     		str	r2, [r3, #84]
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 284


2589:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2590:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Level out of window 1 callback */
2591:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2592:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->LevelOutOfWindowCallback(hadc);
2593:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
2594:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     HAL_ADC_LevelOutOfWindowCallback(hadc);
 5532              		.loc 2 2594 5
 5533 031e 7868     		ldr	r0, [r7, #4]
 5534 0320 FFF7FEFF 		bl	HAL_ADC_LevelOutOfWindowCallback
2595:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2596:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2597:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
2598:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 5535              		.loc 2 2598 5
 5536 0324 7B68     		ldr	r3, [r7, #4]
 5537 0326 1B68     		ldr	r3, [r3]
 5538 0328 8022     		movs	r2, #128
 5539 032a 1A60     		str	r2, [r3]
 5540              	.L312:
2599:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2600:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2601:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* ========== Check analog watchdog 2 flag ========== */
2602:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 5541              		.loc 2 2602 17
 5542 032c FB69     		ldr	r3, [r7, #28]
 5543 032e 03F48073 		and	r3, r3, #256
 5544              		.loc 2 2602 6
 5545 0332 002B     		cmp	r3, #0
 5546 0334 12D0     		beq	.L313
 5547              		.loc 2 2602 65 discriminator 1
 5548 0336 BB69     		ldr	r3, [r7, #24]
 5549 0338 03F48073 		and	r3, r3, #256
 5550              		.loc 2 2602 52 discriminator 1
 5551 033c 002B     		cmp	r3, #0
 5552 033e 0DD0     		beq	.L313
2603:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2604:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Set ADC state */
2605:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 5553              		.loc 2 2605 5
 5554 0340 7B68     		ldr	r3, [r7, #4]
 5555 0342 5B6D     		ldr	r3, [r3, #84]
 5556 0344 43F40032 		orr	r2, r3, #131072
 5557 0348 7B68     		ldr	r3, [r7, #4]
 5558 034a 5A65     		str	r2, [r3, #84]
2606:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2607:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Level out of window 2 callback */
2608:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2609:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->LevelOutOfWindow2Callback(hadc);
2610:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
2611:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 5559              		.loc 2 2611 5
 5560 034c 7868     		ldr	r0, [r7, #4]
 5561 034e FFF7FEFF 		bl	HAL_ADCEx_LevelOutOfWindow2Callback
2612:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2613:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2614:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
2615:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 285


 5562              		.loc 2 2615 5
 5563 0352 7B68     		ldr	r3, [r7, #4]
 5564 0354 1B68     		ldr	r3, [r3]
 5565 0356 4FF48072 		mov	r2, #256
 5566 035a 1A60     		str	r2, [r3]
 5567              	.L313:
2616:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2617:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2618:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* ========== Check analog watchdog 3 flag ========== */
2619:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 5568              		.loc 2 2619 17
 5569 035c FB69     		ldr	r3, [r7, #28]
 5570 035e 03F40073 		and	r3, r3, #512
 5571              		.loc 2 2619 6
 5572 0362 002B     		cmp	r3, #0
 5573 0364 12D0     		beq	.L314
 5574              		.loc 2 2619 65 discriminator 1
 5575 0366 BB69     		ldr	r3, [r7, #24]
 5576 0368 03F40073 		and	r3, r3, #512
 5577              		.loc 2 2619 52 discriminator 1
 5578 036c 002B     		cmp	r3, #0
 5579 036e 0DD0     		beq	.L314
2620:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2621:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Set ADC state */
2622:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 5580              		.loc 2 2622 5
 5581 0370 7B68     		ldr	r3, [r7, #4]
 5582 0372 5B6D     		ldr	r3, [r3, #84]
 5583 0374 43F48022 		orr	r2, r3, #262144
 5584 0378 7B68     		ldr	r3, [r7, #4]
 5585 037a 5A65     		str	r2, [r3, #84]
2623:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2624:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Level out of window 3 callback */
2625:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2626:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->LevelOutOfWindow3Callback(hadc);
2627:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
2628:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 5586              		.loc 2 2628 5
 5587 037c 7868     		ldr	r0, [r7, #4]
 5588 037e FFF7FEFF 		bl	HAL_ADCEx_LevelOutOfWindow3Callback
2629:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2630:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2631:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
2632:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 5589              		.loc 2 2632 5
 5590 0382 7B68     		ldr	r3, [r7, #4]
 5591 0384 1B68     		ldr	r3, [r3]
 5592 0386 4FF40072 		mov	r2, #512
 5593 038a 1A60     		str	r2, [r3]
 5594              	.L314:
2633:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2634:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2635:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* ========== Check Overrun flag ========== */
2636:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 5595              		.loc 2 2636 17
 5596 038c FB69     		ldr	r3, [r7, #28]
 5597 038e 03F01003 		and	r3, r3, #16
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 286


 5598              		.loc 2 2636 6
 5599 0392 002B     		cmp	r3, #0
 5600 0394 43D0     		beq	.L315
 5601              		.loc 2 2636 63 discriminator 1
 5602 0396 BB69     		ldr	r3, [r7, #24]
 5603 0398 03F01003 		and	r3, r3, #16
 5604              		.loc 2 2636 50 discriminator 1
 5605 039c 002B     		cmp	r3, #0
 5606 039e 3ED0     		beq	.L315
2637:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2638:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* If overrun is set to overwrite previous data (default setting),        */
2639:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* overrun event is not considered as an error.                           */
2640:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* (cf ref manual "Managing conversions without using the DMA and without */
2641:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* overrun ")                                                             */
2642:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Exception for usage with DMA overrun event always considered as an     */
2643:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* error.                                                                 */
2644:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 5607              		.loc 2 2644 19
 5608 03a0 7B68     		ldr	r3, [r7, #4]
 5609 03a2 1B6B     		ldr	r3, [r3, #48]
 5610              		.loc 2 2644 8
 5611 03a4 002B     		cmp	r3, #0
 5612 03a6 02D1     		bne	.L316
2645:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2646:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       overrun_error = 1UL;
 5613              		.loc 2 2646 21
 5614 03a8 0123     		movs	r3, #1
 5615 03aa 7B62     		str	r3, [r7, #36]
 5616 03ac 21E0     		b	.L317
 5617              	.L316:
2647:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2648:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
2649:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2650:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Check DMA configuration */
2651:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 5618              		.loc 2 2651 10
 5619 03ae 7B69     		ldr	r3, [r7, #20]
 5620 03b0 002B     		cmp	r3, #0
 5621 03b2 15D0     		beq	.L318
2652:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2653:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Multimode (when feature is available) is enabled,
2654:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****            Common Control Register MDMA bits must be checked. */
2655:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_RE
 5622              		.loc 2 2655 40
 5623 03b4 7B68     		ldr	r3, [r7, #4]
 5624 03b6 1B68     		ldr	r3, [r3]
 5625              		.loc 2 2655 13
 5626 03b8 2A4A     		ldr	r2, .L327
 5627 03ba 9342     		cmp	r3, r2
 5628 03bc 04D0     		beq	.L319
 5629              		.loc 2 2655 40 discriminator 2
 5630 03be 7B68     		ldr	r3, [r7, #4]
 5631 03c0 1B68     		ldr	r3, [r3]
 5632 03c2 294A     		ldr	r2, .L327+4
 5633 03c4 9342     		cmp	r3, r2
 5634 03c6 01D1     		bne	.L320
 5635              	.L319:
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 287


 5636              		.loc 2 2655 13 discriminator 3
 5637 03c8 284B     		ldr	r3, .L327+8
 5638 03ca 00E0     		b	.L321
 5639              	.L320:
 5640              		.loc 2 2655 13 is_stmt 0 discriminator 4
 5641 03cc 284B     		ldr	r3, .L327+12
 5642              	.L321:
 5643              		.loc 2 2655 13 discriminator 6
 5644 03ce 1846     		mov	r0, r3
 5645 03d0 FFF7FEFF 		bl	LL_ADC_GetMultiDMATransfer
 5646 03d4 0346     		mov	r3, r0
 5647              		.loc 2 2655 12 is_stmt 1 discriminator 6
 5648 03d6 002B     		cmp	r3, #0
 5649 03d8 0BD0     		beq	.L317
2656:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2657:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           overrun_error = 1UL;
 5650              		.loc 2 2657 25
 5651 03da 0123     		movs	r3, #1
 5652 03dc 7B62     		str	r3, [r7, #36]
 5653 03de 08E0     		b	.L317
 5654              	.L318:
2658:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2659:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2660:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
2661:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2662:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Multimode not set or feature not available or ADC independent */
2663:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 5655              		.loc 2 2663 18
 5656 03e0 7B68     		ldr	r3, [r7, #4]
 5657 03e2 1B68     		ldr	r3, [r3]
 5658              		.loc 2 2663 28
 5659 03e4 DB68     		ldr	r3, [r3, #12]
 5660              		.loc 2 2663 35
 5661 03e6 03F00303 		and	r3, r3, #3
 5662              		.loc 2 2663 12
 5663 03ea 002B     		cmp	r3, #0
 5664 03ec 01D0     		beq	.L317
2664:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2665:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           overrun_error = 1UL;
 5665              		.loc 2 2665 25
 5666 03ee 0123     		movs	r3, #1
 5667 03f0 7B62     		str	r3, [r7, #36]
 5668              	.L317:
2666:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2667:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2668:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2669:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2670:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (overrun_error == 1UL)
 5669              		.loc 2 2670 8
 5670 03f2 7B6A     		ldr	r3, [r7, #36]
 5671 03f4 012B     		cmp	r3, #1
 5672 03f6 0ED1     		bne	.L322
2671:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2672:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Change ADC state to error state */
2673:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 5673              		.loc 2 2673 7
 5674 03f8 7B68     		ldr	r3, [r7, #4]
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 288


 5675 03fa 5B6D     		ldr	r3, [r3, #84]
 5676 03fc 43F48062 		orr	r2, r3, #1024
 5677 0400 7B68     		ldr	r3, [r7, #4]
 5678 0402 5A65     		str	r2, [r3, #84]
2674:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2675:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC error code to overrun */
2676:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 5679              		.loc 2 2676 7
 5680 0404 7B68     		ldr	r3, [r7, #4]
 5681 0406 9B6D     		ldr	r3, [r3, #88]
 5682 0408 43F00202 		orr	r2, r3, #2
 5683 040c 7B68     		ldr	r3, [r7, #4]
 5684 040e 9A65     		str	r2, [r3, #88]
2677:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2678:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Error callback */
2679:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Note: In case of overrun, ADC conversion data is preserved until     */
2680:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /*       flag OVR is reset.                                             */
2681:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /*       Therefore, old ADC conversion data can be retrieved in         */
2682:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /*       function "HAL_ADC_ErrorCallback()".                            */
2683:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2684:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       hadc->ErrorCallback(hadc);
2685:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
2686:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       HAL_ADC_ErrorCallback(hadc);
 5685              		.loc 2 2686 7
 5686 0410 7868     		ldr	r0, [r7, #4]
 5687 0412 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 5688              	.L322:
2687:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2688:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2689:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2690:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Clear ADC overrun flag */
2691:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 5689              		.loc 2 2691 5
 5690 0416 7B68     		ldr	r3, [r7, #4]
 5691 0418 1B68     		ldr	r3, [r3]
 5692 041a 1022     		movs	r2, #16
 5693 041c 1A60     		str	r2, [r3]
 5694              	.L315:
2692:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2693:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2694:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* ========== Check Injected context queue overflow flag ========== */
2695:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 5695              		.loc 2 2695 17
 5696 041e FB69     		ldr	r3, [r7, #28]
 5697 0420 03F48063 		and	r3, r3, #1024
 5698              		.loc 2 2695 6
 5699 0424 002B     		cmp	r3, #0
 5700 0426 18D0     		beq	.L324
 5701              		.loc 2 2695 67 discriminator 1
 5702 0428 BB69     		ldr	r3, [r7, #24]
 5703 042a 03F48063 		and	r3, r3, #1024
 5704              		.loc 2 2695 54 discriminator 1
 5705 042e 002B     		cmp	r3, #0
 5706 0430 13D0     		beq	.L324
2696:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2697:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Change ADC state to overrun state */
2698:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 289


 5707              		.loc 2 2698 5
 5708 0432 7B68     		ldr	r3, [r7, #4]
 5709 0434 5B6D     		ldr	r3, [r3, #84]
 5710 0436 43F48042 		orr	r2, r3, #16384
 5711 043a 7B68     		ldr	r3, [r7, #4]
 5712 043c 5A65     		str	r2, [r3, #84]
2699:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2700:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Set ADC error code to Injected context queue overflow */
2701:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 5713              		.loc 2 2701 5
 5714 043e 7B68     		ldr	r3, [r7, #4]
 5715 0440 9B6D     		ldr	r3, [r3, #88]
 5716 0442 43F00802 		orr	r2, r3, #8
 5717 0446 7B68     		ldr	r3, [r7, #4]
 5718 0448 9A65     		str	r2, [r3, #88]
2702:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2703:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Clear the Injected context queue overflow flag */
2704:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 5719              		.loc 2 2704 5
 5720 044a 7B68     		ldr	r3, [r7, #4]
 5721 044c 1B68     		ldr	r3, [r3]
 5722 044e 4FF48062 		mov	r2, #1024
 5723 0452 1A60     		str	r2, [r3]
2705:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2706:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Injected context queue overflow callback */
2707:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2708:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->InjectedQueueOverflowCallback(hadc);
2709:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
2710:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 5724              		.loc 2 2710 5
 5725 0454 7868     		ldr	r0, [r7, #4]
 5726 0456 FFF7FEFF 		bl	HAL_ADCEx_InjectedQueueOverflowCallback
 5727              	.L324:
2711:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2712:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2713:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2714:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 5728              		.loc 2 2714 1
 5729 045a 00BF     		nop
 5730 045c 2837     		adds	r7, r7, #40
 5731              	.LCFI293:
 5732              		.cfi_def_cfa_offset 8
 5733 045e BD46     		mov	sp, r7
 5734              	.LCFI294:
 5735              		.cfi_def_cfa_register 13
 5736              		@ sp needed
 5737 0460 80BD     		pop	{r7, pc}
 5738              	.L328:
 5739 0462 00BF     		.align	2
 5740              	.L327:
 5741 0464 00200240 		.word	1073881088
 5742 0468 00210240 		.word	1073881344
 5743 046c 00230240 		.word	1073881856
 5744 0470 00630258 		.word	1476551424
 5745              		.cfi_endproc
 5746              	.LFE346:
 5748              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 290


 5749              		.align	1
 5750              		.weak	HAL_ADC_ConvCpltCallback
 5751              		.syntax unified
 5752              		.thumb
 5753              		.thumb_func
 5755              	HAL_ADC_ConvCpltCallback:
 5756              	.LFB347:
2715:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2716:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
2717:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Conversion complete callback in non-blocking mode.
2718:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
2719:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval None
2720:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2721:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** __weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
2722:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 5757              		.loc 2 2722 1
 5758              		.cfi_startproc
 5759              		@ args = 0, pretend = 0, frame = 8
 5760              		@ frame_needed = 1, uses_anonymous_args = 0
 5761              		@ link register save eliminated.
 5762 0000 80B4     		push	{r7}
 5763              	.LCFI295:
 5764              		.cfi_def_cfa_offset 4
 5765              		.cfi_offset 7, -4
 5766 0002 83B0     		sub	sp, sp, #12
 5767              	.LCFI296:
 5768              		.cfi_def_cfa_offset 16
 5769 0004 00AF     		add	r7, sp, #0
 5770              	.LCFI297:
 5771              		.cfi_def_cfa_register 7
 5772 0006 7860     		str	r0, [r7, #4]
2723:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
2724:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   UNUSED(hadc);
2725:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2726:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
2727:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             function HAL_ADC_ConvCpltCallback must be implemented in the user file.
2728:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****    */
2729:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 5773              		.loc 2 2729 1
 5774 0008 00BF     		nop
 5775 000a 0C37     		adds	r7, r7, #12
 5776              	.LCFI298:
 5777              		.cfi_def_cfa_offset 4
 5778 000c BD46     		mov	sp, r7
 5779              	.LCFI299:
 5780              		.cfi_def_cfa_register 13
 5781              		@ sp needed
 5782 000e 5DF8047B 		ldr	r7, [sp], #4
 5783              	.LCFI300:
 5784              		.cfi_restore 7
 5785              		.cfi_def_cfa_offset 0
 5786 0012 7047     		bx	lr
 5787              		.cfi_endproc
 5788              	.LFE347:
 5790              		.section	.text.HAL_ADC_ConvHalfCpltCallback,"ax",%progbits
 5791              		.align	1
 5792              		.weak	HAL_ADC_ConvHalfCpltCallback
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 291


 5793              		.syntax unified
 5794              		.thumb
 5795              		.thumb_func
 5797              	HAL_ADC_ConvHalfCpltCallback:
 5798              	.LFB348:
2730:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2731:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
2732:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Conversion DMA half-transfer callback in non-blocking mode.
2733:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
2734:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval None
2735:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2736:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** __weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
2737:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 5799              		.loc 2 2737 1
 5800              		.cfi_startproc
 5801              		@ args = 0, pretend = 0, frame = 8
 5802              		@ frame_needed = 1, uses_anonymous_args = 0
 5803              		@ link register save eliminated.
 5804 0000 80B4     		push	{r7}
 5805              	.LCFI301:
 5806              		.cfi_def_cfa_offset 4
 5807              		.cfi_offset 7, -4
 5808 0002 83B0     		sub	sp, sp, #12
 5809              	.LCFI302:
 5810              		.cfi_def_cfa_offset 16
 5811 0004 00AF     		add	r7, sp, #0
 5812              	.LCFI303:
 5813              		.cfi_def_cfa_register 7
 5814 0006 7860     		str	r0, [r7, #4]
2738:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
2739:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   UNUSED(hadc);
2740:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2741:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
2742:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
2743:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2744:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 5815              		.loc 2 2744 1
 5816 0008 00BF     		nop
 5817 000a 0C37     		adds	r7, r7, #12
 5818              	.LCFI304:
 5819              		.cfi_def_cfa_offset 4
 5820 000c BD46     		mov	sp, r7
 5821              	.LCFI305:
 5822              		.cfi_def_cfa_register 13
 5823              		@ sp needed
 5824 000e 5DF8047B 		ldr	r7, [sp], #4
 5825              	.LCFI306:
 5826              		.cfi_restore 7
 5827              		.cfi_def_cfa_offset 0
 5828 0012 7047     		bx	lr
 5829              		.cfi_endproc
 5830              	.LFE348:
 5832              		.section	.text.HAL_ADC_LevelOutOfWindowCallback,"ax",%progbits
 5833              		.align	1
 5834              		.weak	HAL_ADC_LevelOutOfWindowCallback
 5835              		.syntax unified
 5836              		.thumb
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 292


 5837              		.thumb_func
 5839              	HAL_ADC_LevelOutOfWindowCallback:
 5840              	.LFB349:
2745:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2746:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
2747:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Analog watchdog 1 callback in non-blocking mode.
2748:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
2749:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval None
2750:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2751:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** __weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
2752:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 5841              		.loc 2 2752 1
 5842              		.cfi_startproc
 5843              		@ args = 0, pretend = 0, frame = 8
 5844              		@ frame_needed = 1, uses_anonymous_args = 0
 5845              		@ link register save eliminated.
 5846 0000 80B4     		push	{r7}
 5847              	.LCFI307:
 5848              		.cfi_def_cfa_offset 4
 5849              		.cfi_offset 7, -4
 5850 0002 83B0     		sub	sp, sp, #12
 5851              	.LCFI308:
 5852              		.cfi_def_cfa_offset 16
 5853 0004 00AF     		add	r7, sp, #0
 5854              	.LCFI309:
 5855              		.cfi_def_cfa_register 7
 5856 0006 7860     		str	r0, [r7, #4]
2753:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
2754:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   UNUSED(hadc);
2755:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2756:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
2757:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
2758:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2759:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 5857              		.loc 2 2759 1
 5858 0008 00BF     		nop
 5859 000a 0C37     		adds	r7, r7, #12
 5860              	.LCFI310:
 5861              		.cfi_def_cfa_offset 4
 5862 000c BD46     		mov	sp, r7
 5863              	.LCFI311:
 5864              		.cfi_def_cfa_register 13
 5865              		@ sp needed
 5866 000e 5DF8047B 		ldr	r7, [sp], #4
 5867              	.LCFI312:
 5868              		.cfi_restore 7
 5869              		.cfi_def_cfa_offset 0
 5870 0012 7047     		bx	lr
 5871              		.cfi_endproc
 5872              	.LFE349:
 5874              		.section	.text.HAL_ADC_ErrorCallback,"ax",%progbits
 5875              		.align	1
 5876              		.weak	HAL_ADC_ErrorCallback
 5877              		.syntax unified
 5878              		.thumb
 5879              		.thumb_func
 5881              	HAL_ADC_ErrorCallback:
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 293


 5882              	.LFB350:
2760:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2761:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
2762:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  ADC error callback in non-blocking mode
2763:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         (ADC conversion with interruption or transfer by DMA).
2764:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   In case of error due to overrun when using ADC with DMA transfer
2765:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         (HAL ADC handle parameter "ErrorCode" to state "HAL_ADC_ERROR_OVR"):
2766:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         - Reinitialize the DMA using function "HAL_ADC_Stop_DMA()".
2767:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         - If needed, restart a new ADC conversion using function
2768:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *           "HAL_ADC_Start_DMA()"
2769:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *           (this function is also clearing overrun flag)
2770:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
2771:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval None
2772:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2773:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** __weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
2774:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 5883              		.loc 2 2774 1
 5884              		.cfi_startproc
 5885              		@ args = 0, pretend = 0, frame = 8
 5886              		@ frame_needed = 1, uses_anonymous_args = 0
 5887              		@ link register save eliminated.
 5888 0000 80B4     		push	{r7}
 5889              	.LCFI313:
 5890              		.cfi_def_cfa_offset 4
 5891              		.cfi_offset 7, -4
 5892 0002 83B0     		sub	sp, sp, #12
 5893              	.LCFI314:
 5894              		.cfi_def_cfa_offset 16
 5895 0004 00AF     		add	r7, sp, #0
 5896              	.LCFI315:
 5897              		.cfi_def_cfa_register 7
 5898 0006 7860     		str	r0, [r7, #4]
2775:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
2776:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   UNUSED(hadc);
2777:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2778:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
2779:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             function HAL_ADC_ErrorCallback must be implemented in the user file.
2780:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2781:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 5899              		.loc 2 2781 1
 5900 0008 00BF     		nop
 5901 000a 0C37     		adds	r7, r7, #12
 5902              	.LCFI316:
 5903              		.cfi_def_cfa_offset 4
 5904 000c BD46     		mov	sp, r7
 5905              	.LCFI317:
 5906              		.cfi_def_cfa_register 13
 5907              		@ sp needed
 5908 000e 5DF8047B 		ldr	r7, [sp], #4
 5909              	.LCFI318:
 5910              		.cfi_restore 7
 5911              		.cfi_def_cfa_offset 0
 5912 0012 7047     		bx	lr
 5913              		.cfi_endproc
 5914              	.LFE350:
 5916              		.section	.text.HAL_ADC_ConfigChannel,"ax",%progbits
 5917              		.align	1
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 294


 5918              		.global	HAL_ADC_ConfigChannel
 5919              		.syntax unified
 5920              		.thumb
 5921              		.thumb_func
 5923              	HAL_ADC_ConfigChannel:
 5924              	.LFB351:
2782:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2783:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
2784:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @}
2785:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2786:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2787:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group3 Peripheral Control functions
2788:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief    Peripheral Control functions
2789:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *
2790:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** @verbatim
2791:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****  ===============================================================================
2792:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****              ##### Peripheral Control functions #####
2793:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****  ===============================================================================
2794:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     [..]  This section provides functions allowing to:
2795:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Configure channels on regular group
2796:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Configure the analog watchdog
2797:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2798:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** @endverbatim
2799:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @{
2800:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2801:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2802:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
2803:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Configure a channel to be assigned to ADC group regular.
2804:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   In case of usage of internal measurement channels:
2805:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         Vbat/VrefInt/TempSensor.
2806:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         These internal paths can be disabled using function
2807:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         HAL_ADC_DeInit().
2808:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
2809:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         This function initializes channel into ADC group regular,
2810:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         following calls to this function can be used to reconfigure
2811:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         some parameters of structure "ADC_ChannelConfTypeDef" on the fly,
2812:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         without resetting the ADC.
2813:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state:
2814:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         Refer to comments of structure "ADC_ChannelConfTypeDef".
2815:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
2816:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param sConfig Structure of ADC channel assigned to ADC group regular.
2817:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status
2818:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2819:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
2820:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 5925              		.loc 2 2820 1
 5926              		.cfi_startproc
 5927              		@ args = 0, pretend = 0, frame = 128
 5928              		@ frame_needed = 1, uses_anonymous_args = 0
 5929 0000 90B5     		push	{r4, r7, lr}
 5930              	.LCFI319:
 5931              		.cfi_def_cfa_offset 12
 5932              		.cfi_offset 4, -12
 5933              		.cfi_offset 7, -8
 5934              		.cfi_offset 14, -4
 5935 0002 A1B0     		sub	sp, sp, #132
 5936              	.LCFI320:
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 295


 5937              		.cfi_def_cfa_offset 144
 5938 0004 00AF     		add	r7, sp, #0
 5939              	.LCFI321:
 5940              		.cfi_def_cfa_register 7
 5941 0006 7860     		str	r0, [r7, #4]
 5942 0008 3960     		str	r1, [r7]
2821:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 5943              		.loc 2 2821 21
 5944 000a 0023     		movs	r3, #0
 5945 000c 87F87F30 		strb	r3, [r7, #127]
2822:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmpOffsetShifted;
2823:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_config_internal_channel;
2824:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0;
 5946              		.loc 2 2824 17
 5947 0010 0023     		movs	r3, #0
 5948 0012 BB60     		str	r3, [r7, #8]
2825:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
2826:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_injected;
2827:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2828:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
2829:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2830:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
2831:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
2832:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
2833:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
2834:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check offset range according to oversampling setting */
2835:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (hadc->Init.OversamplingMode == ENABLE)
2836:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2837:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset / (hadc->Init.Oversampling.
2838:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2839:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
2840:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2841:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
2842:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Instance == ADC3)
2843:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2844:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC3_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
2845:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2846:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
2847:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* ADC_VER_V5_V90 */
2848:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2849:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
2850:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2851:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2852:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2853:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
2854:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      ignored (considered as reset) */
2855:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENAB
2856:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2857:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Verification of channel number */
2858:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 5949              		.loc 2 2858 14
 5950 0014 3B68     		ldr	r3, [r7]
 5951 0016 DB68     		ldr	r3, [r3, #12]
 5952              		.loc 2 2858 6
 5953 0018 9D4A     		ldr	r2, .L418
 5954 001a 9342     		cmp	r3, r2
2859:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 296


2860:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     assert_param(IS_ADC_CHANNEL(sConfig->Channel));
2861:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2862:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
2863:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2864:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Instance == ADC1)
2865:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2866:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC1_DIFF_CHANNEL(sConfig->Channel));
2867:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2868:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Instance == ADC2)
2869:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2870:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC2_DIFF_CHANNEL(sConfig->Channel));
2871:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2872:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC3)
2873:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* ADC3 is not available on some STM32H7 products */
2874:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Instance == ADC3)
2875:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2876:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC3_DIFF_CHANNEL(sConfig->Channel));
2877:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2878:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif
2879:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2880:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2881:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Process locked */
2882:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_LOCK(hadc);
 5955              		.loc 2 2882 3
 5956 001c 7B68     		ldr	r3, [r7, #4]
 5957 001e 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 5958 0022 012B     		cmp	r3, #1
 5959 0024 01D1     		bne	.L335
 5960              		.loc 2 2882 3 is_stmt 0 discriminator 1
 5961 0026 0223     		movs	r3, #2
 5962 0028 21E3     		b	.L336
 5963              	.L335:
 5964              		.loc 2 2882 3 discriminator 2
 5965 002a 7B68     		ldr	r3, [r7, #4]
 5966 002c 0122     		movs	r2, #1
 5967 002e 83F85020 		strb	r2, [r3, #80]
2883:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2884:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Parameters update conditioned to ADC state:                              */
2885:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
2886:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* conversion on going on regular group:                                    */
2887:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /*  - Channel number                                                        */
2888:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /*  - Channel rank                                                          */
2889:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 5968              		.loc 2 2889 7 is_stmt 1 discriminator 2
 5969 0032 7B68     		ldr	r3, [r7, #4]
 5970 0034 1B68     		ldr	r3, [r3]
 5971 0036 1846     		mov	r0, r3
 5972 0038 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 5973 003c 0346     		mov	r3, r0
 5974              		.loc 2 2889 6 discriminator 2
 5975 003e 002B     		cmp	r3, #0
 5976 0040 40F00683 		bne	.L337
2890:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2891:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2892:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
2893:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Instance != ADC3)
2894:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 297


2895:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* ADC channels preselection */
2896:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Chan
2897:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2898:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
2899:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* ADC channels preselection */
2900:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 
 5977              		.loc 2 2900 39
 5978 0044 3B68     		ldr	r3, [r7]
 5979 0046 1B68     		ldr	r3, [r3]
 5980 0048 C3F31303 		ubfx	r3, r3, #0, #20
 5981              		.loc 2 2900 35
 5982 004c 002B     		cmp	r3, #0
 5983 004e 08D1     		bne	.L338
 5984              		.loc 2 2900 39 discriminator 1
 5985 0050 3B68     		ldr	r3, [r7]
 5986 0052 1B68     		ldr	r3, [r3]
 5987 0054 9B0E     		lsrs	r3, r3, #26
 5988 0056 03F01F03 		and	r3, r3, #31
 5989              		.loc 2 2900 35 discriminator 1
 5990 005a 0122     		movs	r2, #1
 5991 005c 02FA03F3 		lsl	r3, r2, r3
 5992 0060 16E0     		b	.L339
 5993              	.L338:
 5994              		.loc 2 2900 39 discriminator 2
 5995 0062 3B68     		ldr	r3, [r7]
 5996 0064 1B68     		ldr	r3, [r3]
 5997 0066 7B66     		str	r3, [r7, #100]
 5998              	.LBB51:
 5999              	.LBB52:
 6000              		.file 3 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 298


  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 299


  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 300


 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 301


 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 214:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 220:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 302


 256:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 260:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 262:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 302:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 303


 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 321:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 346:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 360:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 364:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 304


 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 393:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 402:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 414:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 419:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 423:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 305


 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 437:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 449:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 454:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 474:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 306


 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 512:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 519:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 523:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 527:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 530:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 533:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 307


 541:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 545:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 546:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 553:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 576:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 578:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 587:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 588:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 589:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 593:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 597:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 308


 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 617:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 618:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 629:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 640:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 642:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 309


 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 658:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 667:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 680:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 686:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 706:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 310


 712:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 713:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 753:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 754:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 758:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 768:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 311


 769:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 774:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 779:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 782:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 784:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 788:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 802:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 815:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 819:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 821:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 312


 826:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 827:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 833:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 843:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 847:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 848:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 854:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 871:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 875:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 313


 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 884:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 885:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 886:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 894:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 903:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 905:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 909:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 912:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 913:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 914:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 917:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 918:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 919:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 920:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 926:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 931:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 932:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 933:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 935:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 314


 940:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 943:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 945:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 947:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 948:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 952:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 953:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 954:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 956:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 958:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 959:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 963:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 964:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 965:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 966:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 967:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 968:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 969:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 970:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 971:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 972:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 973:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 974:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 975:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 976:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 977:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 978:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 979:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 980:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 981:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 982:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 983:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 984:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 985:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 986:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 987:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 988:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 989:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 990:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 991:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 992:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 993:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 994:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 995:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 996:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 315


 997:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 998:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 999:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
1000:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1001:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
1002:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1003:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1004:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
1005:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
1006:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
1007:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1008:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
1009:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
1010:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1011:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1012:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1013:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1014:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1015:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
1016:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
1017:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
1018:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
1019:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
1020:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1021:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
1022:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1023:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
1024:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
1025:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
1026:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
1027:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
1028:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
1029:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1030:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1031:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1032:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1033:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
1034:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
1035:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
1036:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
1037:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
1038:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1039:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
1040:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1041:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1042:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1043:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
1044:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
1045:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
1046:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
1047:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1048:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
1049:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1050:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
1051:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1052:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1053:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 316


1054:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
1055:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 6001              		.loc 3 1055 4 discriminator 2
 6002 0068 7B6E     		ldr	r3, [r7, #100]
 6003              		.syntax unified
 6004              	@ 1055 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6005 006a 93FAA3F3 		rbit r3, r3
 6006              	@ 0 "" 2
 6007              		.thumb
 6008              		.syntax unified
 6009 006e 3B66     		str	r3, [r7, #96]
1056:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
1057:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
1058:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1059:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
1060:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
1061:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
1062:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
1063:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
1064:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
1065:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
1066:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1067:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1068:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 6010              		.loc 3 1068 10 discriminator 2
 6011 0070 3B6E     		ldr	r3, [r7, #96]
 6012 0072 BB66     		str	r3, [r7, #104]
 6013              	.LBE52:
 6014              	.LBE51:
 6015              	.LBB53:
 6016              	.LBB54:
1069:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1070:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1071:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1072:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1073:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
1074:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
1075:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
1076:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
1077:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1078:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
1079:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1080:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
1081:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
1082:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
1083:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
1084:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
1085:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
1086:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
1087:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
1088:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
1089:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 6017              		.loc 3 1089 6 discriminator 2
 6018 0074 BB6E     		ldr	r3, [r7, #104]
 6019 0076 002B     		cmp	r3, #0
 6020 0078 01D1     		bne	.L341
1090:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 317


1091:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 6021              		.loc 3 1091 12
 6022 007a 2023     		movs	r3, #32
 6023 007c 03E0     		b	.L342
 6024              	.L341:
1092:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
1093:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 6025              		.loc 3 1093 10
 6026 007e BB6E     		ldr	r3, [r7, #104]
 6027 0080 B3FA83F3 		clz	r3, r3
 6028 0084 DBB2     		uxtb	r3, r3
 6029              	.L342:
 6030              	.LBE54:
 6031              	.LBE53:
 6032              		.loc 2 2900 98
 6033 0086 03F01F03 		and	r3, r3, #31
 6034              		.loc 2 2900 35
 6035 008a 0122     		movs	r2, #1
 6036 008c 02FA03F3 		lsl	r3, r2, r3
 6037              	.L339:
 6038              		.loc 2 2900 9 discriminator 4
 6039 0090 7A68     		ldr	r2, [r7, #4]
 6040 0092 1268     		ldr	r2, [r2]
 6041              		.loc 2 2900 27 discriminator 4
 6042 0094 D169     		ldr	r1, [r2, #28]
 6043              		.loc 2 2900 9 discriminator 4
 6044 0096 7A68     		ldr	r2, [r7, #4]
 6045 0098 1268     		ldr	r2, [r2]
 6046              		.loc 2 2900 27 discriminator 4
 6047 009a 0B43     		orrs	r3, r3, r1
 6048 009c D361     		str	r3, [r2, #28]
2901:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* ADC_VER_V5_V90 */
2902:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2903:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Set ADC group regular sequence: channel on the selected scan sequence rank */
2904:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 6049              		.loc 2 2904 5 discriminator 4
 6050 009e 7B68     		ldr	r3, [r7, #4]
 6051 00a0 1868     		ldr	r0, [r3]
 6052 00a2 3B68     		ldr	r3, [r7]
 6053 00a4 5968     		ldr	r1, [r3, #4]
 6054 00a6 3B68     		ldr	r3, [r7]
 6055 00a8 1B68     		ldr	r3, [r3]
 6056 00aa 1A46     		mov	r2, r3
 6057 00ac FFF7FEFF 		bl	LL_ADC_REG_SetSequencerRanks
2905:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2906:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Parameters update conditioned to ADC state:                              */
2907:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Parameters that can be updated when ADC is disabled or enabled without   */
2908:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* conversion on going on regular group:                                    */
2909:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - Channel sampling time                                                 */
2910:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - Channel offset                                                        */
2911:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 6058              		.loc 2 2911 46 discriminator 4
 6059 00b0 7B68     		ldr	r3, [r7, #4]
 6060 00b2 1B68     		ldr	r3, [r3]
 6061 00b4 1846     		mov	r0, r3
 6062 00b6 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 6063 00ba B867     		str	r0, [r7, #120]
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 318


2912:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 6064              		.loc 2 2912 47 discriminator 4
 6065 00bc 7B68     		ldr	r3, [r7, #4]
 6066 00be 1B68     		ldr	r3, [r3]
 6067 00c0 1846     		mov	r0, r3
 6068 00c2 FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 6069 00c6 7867     		str	r0, [r7, #116]
2913:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 6070              		.loc 2 2913 8 discriminator 4
 6071 00c8 BB6F     		ldr	r3, [r7, #120]
 6072 00ca 002B     		cmp	r3, #0
 6073 00cc 40F0B380 		bne	.L343
2914:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         && (tmp_adc_is_conversion_on_going_injected == 0UL)
 6074              		.loc 2 2914 9
 6075 00d0 7B6F     		ldr	r3, [r7, #116]
 6076 00d2 002B     		cmp	r3, #0
 6077 00d4 40F0AF80 		bne	.L343
2915:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        )
2916:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2917:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set sampling time of the selected ADC channel */
2918:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 6078              		.loc 2 2918 7
 6079 00d8 7B68     		ldr	r3, [r7, #4]
 6080 00da 1868     		ldr	r0, [r3]
 6081 00dc 3B68     		ldr	r3, [r7]
 6082 00de 1968     		ldr	r1, [r3]
 6083 00e0 3B68     		ldr	r3, [r7]
 6084 00e2 9B68     		ldr	r3, [r3, #8]
 6085 00e4 1A46     		mov	r2, r3
 6086 00e6 FFF7FEFF 		bl	LL_ADC_SetChannelSamplingTime
2919:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2920:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Configure the offset: offset enable/disable, channel, offset value */
2921:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2922:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Shift the offset with respect to the selected ADC resolution. */
2923:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
2925:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (hadc->Instance == ADC3)
2926:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2927:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
2928:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2929:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
2930:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* ADC_VER_V5_V90 */
2931:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2932:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 6087              		.loc 2 2932 28
 6088 00ea 6A4B     		ldr	r3, .L418+4
 6089 00ec 1B68     		ldr	r3, [r3]
 6090 00ee 03F07043 		and	r3, r3, #-268435456
 6091 00f2 B3F1805F 		cmp	r3, #268435456
 6092 00f6 0BD1     		bne	.L344
 6093              		.loc 2 2932 28 is_stmt 0 discriminator 1
 6094 00f8 3B68     		ldr	r3, [r7]
 6095 00fa 5A69     		ldr	r2, [r3, #20]
 6096 00fc 7B68     		ldr	r3, [r7, #4]
 6097 00fe 1B68     		ldr	r3, [r3]
 6098 0100 DB68     		ldr	r3, [r3, #12]
 6099 0102 9B08     		lsrs	r3, r3, #2
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 319


 6100 0104 03F00703 		and	r3, r3, #7
 6101 0108 5B00     		lsls	r3, r3, #1
 6102 010a 02FA03F3 		lsl	r3, r2, r3
 6103 010e 1DE0     		b	.L345
 6104              	.L344:
 6105              		.loc 2 2932 28 discriminator 2
 6106 0110 7B68     		ldr	r3, [r7, #4]
 6107 0112 1B68     		ldr	r3, [r3]
 6108 0114 DB68     		ldr	r3, [r3, #12]
 6109 0116 03F01003 		and	r3, r3, #16
 6110 011a 002B     		cmp	r3, #0
 6111 011c 0BD1     		bne	.L346
 6112              		.loc 2 2932 28 discriminator 4
 6113 011e 3B68     		ldr	r3, [r7]
 6114 0120 5A69     		ldr	r2, [r3, #20]
 6115 0122 7B68     		ldr	r3, [r7, #4]
 6116 0124 1B68     		ldr	r3, [r3]
 6117 0126 DB68     		ldr	r3, [r3, #12]
 6118 0128 9B08     		lsrs	r3, r3, #2
 6119 012a 03F00703 		and	r3, r3, #7
 6120 012e 5B00     		lsls	r3, r3, #1
 6121 0130 02FA03F3 		lsl	r3, r2, r3
 6122 0134 0AE0     		b	.L345
 6123              	.L346:
 6124              		.loc 2 2932 28 discriminator 5
 6125 0136 3B68     		ldr	r3, [r7]
 6126 0138 5A69     		ldr	r2, [r3, #20]
 6127 013a 7B68     		ldr	r3, [r7, #4]
 6128 013c 1B68     		ldr	r3, [r3]
 6129 013e DB68     		ldr	r3, [r3, #12]
 6130 0140 9B08     		lsrs	r3, r3, #2
 6131 0142 03F00403 		and	r3, r3, #4
 6132 0146 5B00     		lsls	r3, r3, #1
 6133 0148 02FA03F3 		lsl	r3, r2, r3
 6134              	.L345:
 6135              		.loc 2 2932 26 is_stmt 1 discriminator 8
 6136 014c 3B67     		str	r3, [r7, #112]
2933:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2934:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       
2935:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 6137              		.loc 2 2935 18 discriminator 8
 6138 014e 3B68     		ldr	r3, [r7]
 6139 0150 1B69     		ldr	r3, [r3, #16]
 6140              		.loc 2 2935 10 discriminator 8
 6141 0152 042B     		cmp	r3, #4
 6142 0154 27D0     		beq	.L348
2936:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2937:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Set ADC selected offset number */
2938:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted)
 6143              		.loc 2 2938 9
 6144 0156 7B68     		ldr	r3, [r7, #4]
 6145 0158 1868     		ldr	r0, [r3]
 6146 015a 3B68     		ldr	r3, [r7]
 6147 015c 1969     		ldr	r1, [r3, #16]
 6148 015e 3B68     		ldr	r3, [r7]
 6149 0160 1A68     		ldr	r2, [r3]
 6150 0162 3B6F     		ldr	r3, [r7, #112]
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 320


 6151 0164 FFF7FEFF 		bl	LL_ADC_SetOffset
2939:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2940:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
2941:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (hadc->Instance == ADC3)
2942:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2943:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
2944:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
2945:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Set ADC selected offset sign & saturation */
2946:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
2947:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturat
2948:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2949:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         else
2950:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* ADC_VER_V5_V90 */
2951:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2952:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
2953:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Set ADC selected offset signed saturation */
2954:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetS
 6152              		.loc 2 2954 11
 6153 0168 7B68     		ldr	r3, [r7, #4]
 6154 016a 1868     		ldr	r0, [r3]
 6155 016c 3B68     		ldr	r3, [r7]
 6156 016e 1969     		ldr	r1, [r3, #16]
 6157              		.loc 2 2954 91
 6158 0170 3B68     		ldr	r3, [r7]
 6159 0172 5B7E     		ldrb	r3, [r3, #25]	@ zero_extendqisi2
 6160              		.loc 2 2954 11
 6161 0174 012B     		cmp	r3, #1
 6162 0176 02D1     		bne	.L349
 6163              		.loc 2 2954 11 is_stmt 0 discriminator 1
 6164 0178 4FF00043 		mov	r3, #-2147483648
 6165 017c 00E0     		b	.L350
 6166              	.L349:
 6167              		.loc 2 2954 11 discriminator 2
 6168 017e 0023     		movs	r3, #0
 6169              	.L350:
 6170              		.loc 2 2954 11 discriminator 4
 6171 0180 1A46     		mov	r2, r3
 6172 0182 FFF7FEFF 		bl	LL_ADC_SetOffsetSignedSaturation
2955:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2956:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
2957:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Set ADC selected offset right shift */
2958:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShif
 6173              		.loc 2 2958 11 is_stmt 1 discriminator 4
 6174 0186 7B68     		ldr	r3, [r7, #4]
 6175 0188 1868     		ldr	r0, [r3]
 6176 018a 3B68     		ldr	r3, [r7]
 6177 018c 1969     		ldr	r1, [r3, #16]
 6178              		.loc 2 2958 83 discriminator 4
 6179 018e 3B68     		ldr	r3, [r7]
 6180 0190 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 6181              		.loc 2 2958 11 discriminator 4
 6182 0192 012B     		cmp	r3, #1
 6183 0194 02D1     		bne	.L351
 6184              		.loc 2 2958 11 is_stmt 0 discriminator 1
 6185 0196 4FF40063 		mov	r3, #2048
 6186 019a 00E0     		b	.L352
 6187              	.L351:
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 321


 6188              		.loc 2 2958 11 discriminator 2
 6189 019c 0023     		movs	r3, #0
 6190              	.L352:
 6191              		.loc 2 2958 11 discriminator 4
 6192 019e 1A46     		mov	r2, r3
 6193 01a0 FFF7FEFF 		bl	LL_ADC_SetDataRightShift
 6194 01a4 47E0     		b	.L343
 6195              	.L348:
2959:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2960:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2961:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2962:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
2963:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2964:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
2965:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           If this is the case, offset OFRx is disabled since
2966:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
2967:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
2968:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (hadc->Instance == ADC3)
2969:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2970:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_
2971:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
2972:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
2973:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
2974:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_
2975:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
2976:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
2977:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
2978:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_
2979:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
2980:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
2981:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
2982:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_
2983:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
2984:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
2985:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
2986:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2987:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         else
2988:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* ADC_VER_V5_V90 */
2989:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2990:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 6196              		.loc 2 2990 21 is_stmt 1
 6197 01a6 7B68     		ldr	r3, [r7, #4]
 6198 01a8 1B68     		ldr	r3, [r3]
 6199              		.loc 2 2990 31
 6200 01aa 1B6E     		ldr	r3, [r3, #96]
 6201              		.loc 2 2990 39
 6202 01ac 03F0F842 		and	r2, r3, #2080374784
 6203              		.loc 2 2990 65
 6204 01b0 3B68     		ldr	r3, [r7]
 6205 01b2 1B68     		ldr	r3, [r3]
 6206 01b4 9B06     		lsls	r3, r3, #26
 6207              		.loc 2 2990 14
 6208 01b6 9A42     		cmp	r2, r3
 6209 01b8 07D1     		bne	.L353
2991:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
2992:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 6210              		.loc 2 2992 13
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 322


 6211 01ba 7B68     		ldr	r3, [r7, #4]
 6212 01bc 1B68     		ldr	r3, [r3]
 6213 01be 1A6E     		ldr	r2, [r3, #96]
 6214 01c0 7B68     		ldr	r3, [r7, #4]
 6215 01c2 1B68     		ldr	r3, [r3]
 6216 01c4 22F00042 		bic	r2, r2, #-2147483648
 6217 01c8 1A66     		str	r2, [r3, #96]
 6218              	.L353:
2993:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
2994:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 6219              		.loc 2 2994 21
 6220 01ca 7B68     		ldr	r3, [r7, #4]
 6221 01cc 1B68     		ldr	r3, [r3]
 6222              		.loc 2 2994 31
 6223 01ce 5B6E     		ldr	r3, [r3, #100]
 6224              		.loc 2 2994 39
 6225 01d0 03F0F842 		and	r2, r3, #2080374784
 6226              		.loc 2 2994 65
 6227 01d4 3B68     		ldr	r3, [r7]
 6228 01d6 1B68     		ldr	r3, [r3]
 6229 01d8 9B06     		lsls	r3, r3, #26
 6230              		.loc 2 2994 14
 6231 01da 9A42     		cmp	r2, r3
 6232 01dc 07D1     		bne	.L354
2995:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
2996:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 6233              		.loc 2 2996 13
 6234 01de 7B68     		ldr	r3, [r7, #4]
 6235 01e0 1B68     		ldr	r3, [r3]
 6236 01e2 5A6E     		ldr	r2, [r3, #100]
 6237 01e4 7B68     		ldr	r3, [r7, #4]
 6238 01e6 1B68     		ldr	r3, [r3]
 6239 01e8 22F00042 		bic	r2, r2, #-2147483648
 6240 01ec 5A66     		str	r2, [r3, #100]
 6241              	.L354:
2997:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
2998:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 6242              		.loc 2 2998 21
 6243 01ee 7B68     		ldr	r3, [r7, #4]
 6244 01f0 1B68     		ldr	r3, [r3]
 6245              		.loc 2 2998 31
 6246 01f2 9B6E     		ldr	r3, [r3, #104]
 6247              		.loc 2 2998 39
 6248 01f4 03F0F842 		and	r2, r3, #2080374784
 6249              		.loc 2 2998 65
 6250 01f8 3B68     		ldr	r3, [r7]
 6251 01fa 1B68     		ldr	r3, [r3]
 6252 01fc 9B06     		lsls	r3, r3, #26
 6253              		.loc 2 2998 14
 6254 01fe 9A42     		cmp	r2, r3
 6255 0200 07D1     		bne	.L355
2999:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
3000:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 6256              		.loc 2 3000 13
 6257 0202 7B68     		ldr	r3, [r7, #4]
 6258 0204 1B68     		ldr	r3, [r3]
 6259 0206 9A6E     		ldr	r2, [r3, #104]
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 323


 6260 0208 7B68     		ldr	r3, [r7, #4]
 6261 020a 1B68     		ldr	r3, [r3]
 6262 020c 22F00042 		bic	r2, r2, #-2147483648
 6263 0210 9A66     		str	r2, [r3, #104]
 6264              	.L355:
3001:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3002:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 6265              		.loc 2 3002 21
 6266 0212 7B68     		ldr	r3, [r7, #4]
 6267 0214 1B68     		ldr	r3, [r3]
 6268              		.loc 2 3002 31
 6269 0216 DB6E     		ldr	r3, [r3, #108]
 6270              		.loc 2 3002 39
 6271 0218 03F0F842 		and	r2, r3, #2080374784
 6272              		.loc 2 3002 65
 6273 021c 3B68     		ldr	r3, [r7]
 6274 021e 1B68     		ldr	r3, [r3]
 6275 0220 9B06     		lsls	r3, r3, #26
 6276              		.loc 2 3002 14
 6277 0222 9A42     		cmp	r2, r3
 6278 0224 07D1     		bne	.L343
3003:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
3004:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 6279              		.loc 2 3004 13
 6280 0226 7B68     		ldr	r3, [r7, #4]
 6281 0228 1B68     		ldr	r3, [r3]
 6282 022a DA6E     		ldr	r2, [r3, #108]
 6283 022c 7B68     		ldr	r3, [r7, #4]
 6284 022e 1B68     		ldr	r3, [r3]
 6285 0230 22F00042 		bic	r2, r2, #-2147483648
 6286 0234 DA66     		str	r2, [r3, #108]
 6287              	.L343:
3005:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3006:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3007:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         
3008:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      }
3009:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3010:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3011:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Parameters update conditioned to ADC state:                              */
3012:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Parameters that can be updated only when ADC is disabled:                */
3013:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - Single or differential mode                                           */
3014:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
3015:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 6288              		.loc 2 3015 9
 6289 0236 7B68     		ldr	r3, [r7, #4]
 6290 0238 1B68     		ldr	r3, [r3]
 6291 023a 1846     		mov	r0, r3
 6292 023c FFF7FEFF 		bl	LL_ADC_IsEnabled
 6293 0240 0346     		mov	r3, r0
 6294              		.loc 2 3015 8
 6295 0242 002B     		cmp	r3, #0
 6296 0244 40F00D82 		bne	.L356
3016:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3017:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set mode single-ended or differential input of the selected ADC channel */
3018:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 6297              		.loc 2 3018 7
 6298 0248 7B68     		ldr	r3, [r7, #4]
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 324


 6299 024a 1868     		ldr	r0, [r3]
 6300 024c 3B68     		ldr	r3, [r7]
 6301 024e 1968     		ldr	r1, [r3]
 6302 0250 3B68     		ldr	r3, [r7]
 6303 0252 DB68     		ldr	r3, [r3, #12]
 6304 0254 1A46     		mov	r2, r3
 6305 0256 FFF7FEFF 		bl	LL_ADC_SetChannelSingleDiff
3019:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3020:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Configuration of differential mode */
3021:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 6306              		.loc 2 3021 18
 6307 025a 3B68     		ldr	r3, [r7]
 6308 025c DB68     		ldr	r3, [r3, #12]
 6309              		.loc 2 3021 10
 6310 025e 0C4A     		ldr	r2, .L418
 6311 0260 9342     		cmp	r3, r2
 6312 0262 40F03381 		bne	.L357
3022:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3023:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Set sampling time of the selected ADC channel */
3024:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits r
3025:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         LL_ADC_SetChannelSamplingTime(hadc->Instance,
 6313              		.loc 2 3025 9
 6314 0266 7B68     		ldr	r3, [r7, #4]
 6315 0268 1868     		ldr	r0, [r3]
3026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_T
 6316              		.loc 2 3026 50
 6317 026a 3B68     		ldr	r3, [r7]
 6318 026c 1B68     		ldr	r3, [r3]
 6319 026e C3F31303 		ubfx	r3, r3, #0, #20
 6320 0272 002B     		cmp	r3, #0
 6321 0274 10D1     		bne	.L358
 6322              		.loc 2 3026 50 is_stmt 0 discriminator 1
 6323 0276 3B68     		ldr	r3, [r7]
 6324 0278 1B68     		ldr	r3, [r3]
 6325 027a 9B0E     		lsrs	r3, r3, #26
 6326 027c 0133     		adds	r3, r3, #1
 6327 027e 03F01F03 		and	r3, r3, #31
 6328 0282 092B     		cmp	r3, #9
 6329 0284 94BF     		ite	ls
 6330 0286 0123     		movls	r3, #1
 6331 0288 0023     		movhi	r3, #0
 6332 028a DBB2     		uxtb	r3, r3
 6333 028c 1EE0     		b	.L359
 6334              	.L419:
 6335 028e 00BF     		.align	2
 6336              	.L418:
 6337 0290 0000FF47 		.word	1207894016
 6338 0294 0010005C 		.word	1543507968
 6339              	.L358:
 6340              		.loc 2 3026 50 discriminator 2
 6341 0298 3B68     		ldr	r3, [r7]
 6342 029a 1B68     		ldr	r3, [r3]
 6343 029c BB65     		str	r3, [r7, #88]
 6344              	.LBB55:
 6345              	.LBB56:
1055:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 6346              		.loc 3 1055 4 is_stmt 1 discriminator 2
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 325


 6347 029e BB6D     		ldr	r3, [r7, #88]
 6348              		.syntax unified
 6349              	@ 1055 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6350 02a0 93FAA3F3 		rbit r3, r3
 6351              	@ 0 "" 2
 6352              		.thumb
 6353              		.syntax unified
 6354 02a4 7B65     		str	r3, [r7, #84]
1068:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 6355              		.loc 3 1068 10 discriminator 2
 6356 02a6 7B6D     		ldr	r3, [r7, #84]
 6357 02a8 FB65     		str	r3, [r7, #92]
 6358              	.LBE56:
 6359              	.LBE55:
 6360              	.LBB57:
 6361              	.LBB58:
1089:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 6362              		.loc 3 1089 6 discriminator 2
 6363 02aa FB6D     		ldr	r3, [r7, #92]
 6364 02ac 002B     		cmp	r3, #0
 6365 02ae 01D1     		bne	.L361
1091:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 6366              		.loc 3 1091 12
 6367 02b0 2023     		movs	r3, #32
 6368 02b2 03E0     		b	.L362
 6369              	.L361:
 6370              		.loc 3 1093 10
 6371 02b4 FB6D     		ldr	r3, [r7, #92]
 6372 02b6 B3FA83F3 		clz	r3, r3
 6373 02ba DBB2     		uxtb	r3, r3
 6374              	.L362:
 6375              	.LBE58:
 6376              	.LBE57:
 6377              		.loc 2 3026 50
 6378 02bc 0133     		adds	r3, r3, #1
 6379 02be 03F01F03 		and	r3, r3, #31
 6380 02c2 092B     		cmp	r3, #9
 6381 02c4 94BF     		ite	ls
 6382 02c6 0123     		movls	r3, #1
 6383 02c8 0023     		movhi	r3, #0
 6384 02ca DBB2     		uxtb	r3, r3
 6385              	.L359:
3025:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_T
 6386              		.loc 2 3025 9
 6387 02cc 002B     		cmp	r3, #0
 6388 02ce 79D0     		beq	.L363
 6389              		.loc 2 3026 50
 6390 02d0 3B68     		ldr	r3, [r7]
 6391 02d2 1B68     		ldr	r3, [r3]
 6392 02d4 C3F31303 		ubfx	r3, r3, #0, #20
 6393 02d8 002B     		cmp	r3, #0
 6394 02da 07D1     		bne	.L364
 6395              		.loc 2 3026 50 is_stmt 0 discriminator 3
 6396 02dc 3B68     		ldr	r3, [r7]
 6397 02de 1B68     		ldr	r3, [r3]
 6398 02e0 9B0E     		lsrs	r3, r3, #26
 6399 02e2 0133     		adds	r3, r3, #1
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 326


 6400 02e4 9B06     		lsls	r3, r3, #26
 6401 02e6 03F0F842 		and	r2, r3, #2080374784
 6402 02ea 15E0     		b	.L365
 6403              	.L364:
 6404              		.loc 2 3026 50 discriminator 4
 6405 02ec 3B68     		ldr	r3, [r7]
 6406 02ee 1B68     		ldr	r3, [r3]
 6407 02f0 FB64     		str	r3, [r7, #76]
 6408              	.LBB59:
 6409              	.LBB60:
1055:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 6410              		.loc 3 1055 4 is_stmt 1 discriminator 4
 6411 02f2 FB6C     		ldr	r3, [r7, #76]
 6412              		.syntax unified
 6413              	@ 1055 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6414 02f4 93FAA3F3 		rbit r3, r3
 6415              	@ 0 "" 2
 6416              		.thumb
 6417              		.syntax unified
 6418 02f8 BB64     		str	r3, [r7, #72]
1068:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 6419              		.loc 3 1068 10 discriminator 4
 6420 02fa BB6C     		ldr	r3, [r7, #72]
 6421 02fc 3B65     		str	r3, [r7, #80]
 6422              	.LBE60:
 6423              	.LBE59:
 6424              	.LBB61:
 6425              	.LBB62:
1089:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 6426              		.loc 3 1089 6 discriminator 4
 6427 02fe 3B6D     		ldr	r3, [r7, #80]
 6428 0300 002B     		cmp	r3, #0
 6429 0302 01D1     		bne	.L367
1091:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 6430              		.loc 3 1091 12
 6431 0304 2023     		movs	r3, #32
 6432 0306 03E0     		b	.L368
 6433              	.L367:
 6434              		.loc 3 1093 10
 6435 0308 3B6D     		ldr	r3, [r7, #80]
 6436 030a B3FA83F3 		clz	r3, r3
 6437 030e DBB2     		uxtb	r3, r3
 6438              	.L368:
 6439              	.LBE62:
 6440              	.LBE61:
 6441              		.loc 2 3026 50
 6442 0310 0133     		adds	r3, r3, #1
 6443 0312 9B06     		lsls	r3, r3, #26
 6444 0314 03F0F842 		and	r2, r3, #2080374784
 6445              	.L365:
 6446              		.loc 2 3026 50 is_stmt 0 discriminator 6
 6447 0318 3B68     		ldr	r3, [r7]
 6448 031a 1B68     		ldr	r3, [r3]
 6449 031c C3F31303 		ubfx	r3, r3, #0, #20
 6450 0320 002B     		cmp	r3, #0
 6451 0322 09D1     		bne	.L369
 6452              		.loc 2 3026 50 discriminator 7
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 327


 6453 0324 3B68     		ldr	r3, [r7]
 6454 0326 1B68     		ldr	r3, [r3]
 6455 0328 9B0E     		lsrs	r3, r3, #26
 6456 032a 0133     		adds	r3, r3, #1
 6457 032c 03F01F03 		and	r3, r3, #31
 6458 0330 0121     		movs	r1, #1
 6459 0332 01FA03F3 		lsl	r3, r1, r3
 6460 0336 17E0     		b	.L370
 6461              	.L369:
 6462              		.loc 2 3026 50 discriminator 8
 6463 0338 3B68     		ldr	r3, [r7]
 6464 033a 1B68     		ldr	r3, [r3]
 6465 033c 3B64     		str	r3, [r7, #64]
 6466              	.LBB63:
 6467              	.LBB64:
1055:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 6468              		.loc 3 1055 4 is_stmt 1 discriminator 8
 6469 033e 3B6C     		ldr	r3, [r7, #64]
 6470              		.syntax unified
 6471              	@ 1055 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6472 0340 93FAA3F3 		rbit r3, r3
 6473              	@ 0 "" 2
 6474              		.thumb
 6475              		.syntax unified
 6476 0344 FB63     		str	r3, [r7, #60]
1068:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 6477              		.loc 3 1068 10 discriminator 8
 6478 0346 FB6B     		ldr	r3, [r7, #60]
 6479 0348 7B64     		str	r3, [r7, #68]
 6480              	.LBE64:
 6481              	.LBE63:
 6482              	.LBB65:
 6483              	.LBB66:
1089:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 6484              		.loc 3 1089 6 discriminator 8
 6485 034a 7B6C     		ldr	r3, [r7, #68]
 6486 034c 002B     		cmp	r3, #0
 6487 034e 01D1     		bne	.L372
1091:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 6488              		.loc 3 1091 12
 6489 0350 2023     		movs	r3, #32
 6490 0352 03E0     		b	.L373
 6491              	.L372:
 6492              		.loc 3 1093 10
 6493 0354 7B6C     		ldr	r3, [r7, #68]
 6494 0356 B3FA83F3 		clz	r3, r3
 6495 035a DBB2     		uxtb	r3, r3
 6496              	.L373:
 6497              	.LBE66:
 6498              	.LBE65:
 6499              		.loc 2 3026 50
 6500 035c 0133     		adds	r3, r3, #1
 6501 035e 03F01F03 		and	r3, r3, #31
 6502 0362 0121     		movs	r1, #1
 6503 0364 01FA03F3 		lsl	r3, r1, r3
 6504              	.L370:
 6505              		.loc 2 3026 50 is_stmt 0 discriminator 10
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 328


 6506 0368 42EA0301 		orr	r1, r2, r3
 6507 036c 3B68     		ldr	r3, [r7]
 6508 036e 1B68     		ldr	r3, [r3]
 6509 0370 C3F31303 		ubfx	r3, r3, #0, #20
 6510 0374 002B     		cmp	r3, #0
 6511 0376 0AD1     		bne	.L374
 6512              		.loc 2 3026 50 discriminator 11
 6513 0378 3B68     		ldr	r3, [r7]
 6514 037a 1B68     		ldr	r3, [r3]
 6515 037c 9B0E     		lsrs	r3, r3, #26
 6516 037e 0133     		adds	r3, r3, #1
 6517 0380 03F01F02 		and	r2, r3, #31
 6518 0384 1346     		mov	r3, r2
 6519 0386 5B00     		lsls	r3, r3, #1
 6520 0388 1344     		add	r3, r3, r2
 6521 038a 1B05     		lsls	r3, r3, #20
 6522 038c 18E0     		b	.L375
 6523              	.L374:
 6524              		.loc 2 3026 50 discriminator 12
 6525 038e 3B68     		ldr	r3, [r7]
 6526 0390 1B68     		ldr	r3, [r3]
 6527 0392 7B63     		str	r3, [r7, #52]
 6528              	.LBB67:
 6529              	.LBB68:
1055:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 6530              		.loc 3 1055 4 is_stmt 1 discriminator 12
 6531 0394 7B6B     		ldr	r3, [r7, #52]
 6532              		.syntax unified
 6533              	@ 1055 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6534 0396 93FAA3F3 		rbit r3, r3
 6535              	@ 0 "" 2
 6536              		.thumb
 6537              		.syntax unified
 6538 039a 3B63     		str	r3, [r7, #48]
1068:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 6539              		.loc 3 1068 10 discriminator 12
 6540 039c 3B6B     		ldr	r3, [r7, #48]
 6541 039e BB63     		str	r3, [r7, #56]
 6542              	.LBE68:
 6543              	.LBE67:
 6544              	.LBB69:
 6545              	.LBB70:
1089:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 6546              		.loc 3 1089 6 discriminator 12
 6547 03a0 BB6B     		ldr	r3, [r7, #56]
 6548 03a2 002B     		cmp	r3, #0
 6549 03a4 01D1     		bne	.L377
1091:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 6550              		.loc 3 1091 12
 6551 03a6 2023     		movs	r3, #32
 6552 03a8 03E0     		b	.L378
 6553              	.L377:
 6554              		.loc 3 1093 10
 6555 03aa BB6B     		ldr	r3, [r7, #56]
 6556 03ac B3FA83F3 		clz	r3, r3
 6557 03b0 DBB2     		uxtb	r3, r3
 6558              	.L378:
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 329


 6559              	.LBE70:
 6560              	.LBE69:
 6561              		.loc 2 3026 50
 6562 03b2 0133     		adds	r3, r3, #1
 6563 03b4 03F01F02 		and	r2, r3, #31
 6564 03b8 1346     		mov	r3, r2
 6565 03ba 5B00     		lsls	r3, r3, #1
 6566 03bc 1344     		add	r3, r3, r2
 6567 03be 1B05     		lsls	r3, r3, #20
 6568              	.L375:
3025:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_T
 6569              		.loc 2 3025 9
 6570 03c0 0B43     		orrs	r3, r3, r1
 6571 03c2 7EE0     		b	.L379
 6572              	.L363:
 6573              		.loc 2 3026 50
 6574 03c4 3B68     		ldr	r3, [r7]
 6575 03c6 1B68     		ldr	r3, [r3]
 6576 03c8 C3F31303 		ubfx	r3, r3, #0, #20
 6577 03cc 002B     		cmp	r3, #0
 6578 03ce 07D1     		bne	.L380
 6579              		.loc 2 3026 50 is_stmt 0 discriminator 13
 6580 03d0 3B68     		ldr	r3, [r7]
 6581 03d2 1B68     		ldr	r3, [r3]
 6582 03d4 9B0E     		lsrs	r3, r3, #26
 6583 03d6 0133     		adds	r3, r3, #1
 6584 03d8 9B06     		lsls	r3, r3, #26
 6585 03da 03F0F842 		and	r2, r3, #2080374784
 6586 03de 15E0     		b	.L381
 6587              	.L380:
 6588              		.loc 2 3026 50 discriminator 14
 6589 03e0 3B68     		ldr	r3, [r7]
 6590 03e2 1B68     		ldr	r3, [r3]
 6591 03e4 BB62     		str	r3, [r7, #40]
 6592              	.LBB71:
 6593              	.LBB72:
1055:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 6594              		.loc 3 1055 4 is_stmt 1 discriminator 14
 6595 03e6 BB6A     		ldr	r3, [r7, #40]
 6596              		.syntax unified
 6597              	@ 1055 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6598 03e8 93FAA3F3 		rbit r3, r3
 6599              	@ 0 "" 2
 6600              		.thumb
 6601              		.syntax unified
 6602 03ec 7B62     		str	r3, [r7, #36]
1068:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 6603              		.loc 3 1068 10 discriminator 14
 6604 03ee 7B6A     		ldr	r3, [r7, #36]
 6605 03f0 FB62     		str	r3, [r7, #44]
 6606              	.LBE72:
 6607              	.LBE71:
 6608              	.LBB73:
 6609              	.LBB74:
1089:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 6610              		.loc 3 1089 6 discriminator 14
 6611 03f2 FB6A     		ldr	r3, [r7, #44]
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 330


 6612 03f4 002B     		cmp	r3, #0
 6613 03f6 01D1     		bne	.L383
1091:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 6614              		.loc 3 1091 12
 6615 03f8 2023     		movs	r3, #32
 6616 03fa 03E0     		b	.L384
 6617              	.L383:
 6618              		.loc 3 1093 10
 6619 03fc FB6A     		ldr	r3, [r7, #44]
 6620 03fe B3FA83F3 		clz	r3, r3
 6621 0402 DBB2     		uxtb	r3, r3
 6622              	.L384:
 6623              	.LBE74:
 6624              	.LBE73:
 6625              		.loc 2 3026 50
 6626 0404 0133     		adds	r3, r3, #1
 6627 0406 9B06     		lsls	r3, r3, #26
 6628 0408 03F0F842 		and	r2, r3, #2080374784
 6629              	.L381:
 6630              		.loc 2 3026 50 is_stmt 0 discriminator 16
 6631 040c 3B68     		ldr	r3, [r7]
 6632 040e 1B68     		ldr	r3, [r3]
 6633 0410 C3F31303 		ubfx	r3, r3, #0, #20
 6634 0414 002B     		cmp	r3, #0
 6635 0416 09D1     		bne	.L385
 6636              		.loc 2 3026 50 discriminator 17
 6637 0418 3B68     		ldr	r3, [r7]
 6638 041a 1B68     		ldr	r3, [r3]
 6639 041c 9B0E     		lsrs	r3, r3, #26
 6640 041e 0133     		adds	r3, r3, #1
 6641 0420 03F01F03 		and	r3, r3, #31
 6642 0424 0121     		movs	r1, #1
 6643 0426 01FA03F3 		lsl	r3, r1, r3
 6644 042a 17E0     		b	.L386
 6645              	.L385:
 6646              		.loc 2 3026 50 discriminator 18
 6647 042c 3B68     		ldr	r3, [r7]
 6648 042e 1B68     		ldr	r3, [r3]
 6649 0430 FB61     		str	r3, [r7, #28]
 6650              	.LBB75:
 6651              	.LBB76:
1055:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 6652              		.loc 3 1055 4 is_stmt 1 discriminator 18
 6653 0432 FB69     		ldr	r3, [r7, #28]
 6654              		.syntax unified
 6655              	@ 1055 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6656 0434 93FAA3F3 		rbit r3, r3
 6657              	@ 0 "" 2
 6658              		.thumb
 6659              		.syntax unified
 6660 0438 BB61     		str	r3, [r7, #24]
1068:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 6661              		.loc 3 1068 10 discriminator 18
 6662 043a BB69     		ldr	r3, [r7, #24]
 6663 043c 3B62     		str	r3, [r7, #32]
 6664              	.LBE76:
 6665              	.LBE75:
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 331


 6666              	.LBB77:
 6667              	.LBB78:
1089:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 6668              		.loc 3 1089 6 discriminator 18
 6669 043e 3B6A     		ldr	r3, [r7, #32]
 6670 0440 002B     		cmp	r3, #0
 6671 0442 01D1     		bne	.L388
1091:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 6672              		.loc 3 1091 12
 6673 0444 2023     		movs	r3, #32
 6674 0446 03E0     		b	.L389
 6675              	.L388:
 6676              		.loc 3 1093 10
 6677 0448 3B6A     		ldr	r3, [r7, #32]
 6678 044a B3FA83F3 		clz	r3, r3
 6679 044e DBB2     		uxtb	r3, r3
 6680              	.L389:
 6681              	.LBE78:
 6682              	.LBE77:
 6683              		.loc 2 3026 50
 6684 0450 0133     		adds	r3, r3, #1
 6685 0452 03F01F03 		and	r3, r3, #31
 6686 0456 0121     		movs	r1, #1
 6687 0458 01FA03F3 		lsl	r3, r1, r3
 6688              	.L386:
 6689              		.loc 2 3026 50 is_stmt 0 discriminator 20
 6690 045c 42EA0301 		orr	r1, r2, r3
 6691 0460 3B68     		ldr	r3, [r7]
 6692 0462 1B68     		ldr	r3, [r3]
 6693 0464 C3F31303 		ubfx	r3, r3, #0, #20
 6694 0468 002B     		cmp	r3, #0
 6695 046a 0DD1     		bne	.L390
 6696              		.loc 2 3026 50 discriminator 21
 6697 046c 3B68     		ldr	r3, [r7]
 6698 046e 1B68     		ldr	r3, [r3]
 6699 0470 9B0E     		lsrs	r3, r3, #26
 6700 0472 0133     		adds	r3, r3, #1
 6701 0474 03F01F02 		and	r2, r3, #31
 6702 0478 1346     		mov	r3, r2
 6703 047a 5B00     		lsls	r3, r3, #1
 6704 047c 1344     		add	r3, r3, r2
 6705 047e 1E3B     		subs	r3, r3, #30
 6706 0480 1B05     		lsls	r3, r3, #20
 6707 0482 43F00073 		orr	r3, r3, #33554432
 6708 0486 1BE0     		b	.L391
 6709              	.L390:
 6710              		.loc 2 3026 50 discriminator 22
 6711 0488 3B68     		ldr	r3, [r7]
 6712 048a 1B68     		ldr	r3, [r3]
 6713 048c 3B61     		str	r3, [r7, #16]
 6714              	.LBB79:
 6715              	.LBB80:
1055:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 6716              		.loc 3 1055 4 is_stmt 1 discriminator 22
 6717 048e 3B69     		ldr	r3, [r7, #16]
 6718              		.syntax unified
 6719              	@ 1055 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 332


 6720 0490 93FAA3F3 		rbit r3, r3
 6721              	@ 0 "" 2
 6722              		.thumb
 6723              		.syntax unified
 6724 0494 FB60     		str	r3, [r7, #12]
1068:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 6725              		.loc 3 1068 10 discriminator 22
 6726 0496 FB68     		ldr	r3, [r7, #12]
 6727 0498 7B61     		str	r3, [r7, #20]
 6728              	.LBE80:
 6729              	.LBE79:
 6730              	.LBB81:
 6731              	.LBB82:
1089:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 6732              		.loc 3 1089 6 discriminator 22
 6733 049a 7B69     		ldr	r3, [r7, #20]
 6734 049c 002B     		cmp	r3, #0
 6735 049e 01D1     		bne	.L393
1091:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 6736              		.loc 3 1091 12
 6737 04a0 2023     		movs	r3, #32
 6738 04a2 03E0     		b	.L394
 6739              	.L393:
 6740              		.loc 3 1093 10
 6741 04a4 7B69     		ldr	r3, [r7, #20]
 6742 04a6 B3FA83F3 		clz	r3, r3
 6743 04aa DBB2     		uxtb	r3, r3
 6744              	.L394:
 6745              	.LBE82:
 6746              	.LBE81:
 6747              		.loc 2 3026 50
 6748 04ac 0133     		adds	r3, r3, #1
 6749 04ae 03F01F02 		and	r2, r3, #31
 6750 04b2 1346     		mov	r3, r2
 6751 04b4 5B00     		lsls	r3, r3, #1
 6752 04b6 1344     		add	r3, r3, r2
 6753 04b8 1E3B     		subs	r3, r3, #30
 6754 04ba 1B05     		lsls	r3, r3, #20
 6755 04bc 43F00073 		orr	r3, r3, #33554432
 6756              	.L391:
3025:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_T
 6757              		.loc 2 3025 9 discriminator 2
 6758 04c0 0B43     		orrs	r3, r3, r1
 6759              	.L379:
3025:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_T
 6760              		.loc 2 3025 9 is_stmt 0 discriminator 1
 6761 04c2 3A68     		ldr	r2, [r7]
 6762 04c4 9268     		ldr	r2, [r2, #8]
 6763 04c6 1946     		mov	r1, r3
 6764 04c8 FFF7FEFF 		bl	LL_ADC_SetChannelSamplingTime
 6765              	.L357:
3027:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       sConfig->SamplingTime);
3028:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3029:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3030:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
3031:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* If internal channel selected, enable dedicated internal buffers and    */
3032:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* paths.                                                                 */
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 333


3033:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Note: these internal measurement paths can be disabled using           */
3034:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* HAL_ADC_DeInit().                                                      */
3035:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3036:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 6766              		.loc 2 3036 11 is_stmt 1
 6767 04cc 3B68     		ldr	r3, [r7]
 6768 04ce 1B68     		ldr	r3, [r3]
 6769              		.loc 2 3036 10
 6770 04d0 002B     		cmp	r3, #0
 6771 04d2 80F2C680 		bge	.L356
3037:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3038:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Configuration of common ADC parameters                                 */
3039:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3040:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc-
 6772              		.loc 2 3040 70
 6773 04d6 7B68     		ldr	r3, [r7, #4]
 6774 04d8 1B68     		ldr	r3, [r3]
 6775              		.loc 2 3040 39
 6776 04da 674A     		ldr	r2, .L420
 6777 04dc 9342     		cmp	r3, r2
 6778 04de 04D0     		beq	.L395
 6779              		.loc 2 3040 70 discriminator 2
 6780 04e0 7B68     		ldr	r3, [r7, #4]
 6781 04e2 1B68     		ldr	r3, [r3]
 6782 04e4 654A     		ldr	r2, .L420+4
 6783 04e6 9342     		cmp	r3, r2
 6784 04e8 01D1     		bne	.L396
 6785              	.L395:
 6786              		.loc 2 3040 39 discriminator 3
 6787 04ea 654B     		ldr	r3, .L420+8
 6788 04ec 00E0     		b	.L397
 6789              	.L396:
 6790              		.loc 2 3040 39 is_stmt 0 discriminator 4
 6791 04ee 654B     		ldr	r3, .L420+12
 6792              	.L397:
 6793              		.loc 2 3040 39 discriminator 6
 6794 04f0 1846     		mov	r0, r3
 6795 04f2 FFF7FEFF 		bl	LL_ADC_GetCommonPathInternalCh
 6796 04f6 F866     		str	r0, [r7, #108]
3041:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3042:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Software is allowed to change common parameters only when all ADCs   */
3043:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* of the common group are disabled.                                    */
3044:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0U
 6797              		.loc 2 3044 13 is_stmt 1 discriminator 6
 6798 04f8 7B68     		ldr	r3, [r7, #4]
 6799 04fa 1B68     		ldr	r3, [r3]
 6800              		.loc 2 3044 95 discriminator 6
 6801 04fc 5E4A     		ldr	r2, .L420
 6802 04fe 9342     		cmp	r3, r2
 6803 0500 04D0     		beq	.L398
 6804              		.loc 2 3044 13 discriminator 2
 6805 0502 7B68     		ldr	r3, [r7, #4]
 6806 0504 1B68     		ldr	r3, [r3]
 6807 0506 5D4A     		ldr	r2, .L420+4
 6808 0508 9342     		cmp	r3, r2
 6809 050a 0ED1     		bne	.L399
 6810              	.L398:
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 334


 6811              		.loc 2 3044 13 is_stmt 0 discriminator 3
 6812 050c 5A48     		ldr	r0, .L420
 6813 050e FFF7FEFF 		bl	LL_ADC_IsEnabled
 6814 0512 0446     		mov	r4, r0
 6815 0514 5948     		ldr	r0, .L420+4
 6816 0516 FFF7FEFF 		bl	LL_ADC_IsEnabled
 6817 051a 0346     		mov	r3, r0
 6818 051c 2343     		orrs	r3, r3, r4
 6819              		.loc 2 3044 95 is_stmt 1 discriminator 3
 6820 051e 002B     		cmp	r3, #0
 6821 0520 0CBF     		ite	eq
 6822 0522 0123     		moveq	r3, #1
 6823 0524 0023     		movne	r3, #0
 6824 0526 DBB2     		uxtb	r3, r3
 6825 0528 08E0     		b	.L400
 6826              	.L399:
 6827              		.loc 2 3044 13 discriminator 4
 6828 052a 5748     		ldr	r0, .L420+16
 6829 052c FFF7FEFF 		bl	LL_ADC_IsEnabled
 6830 0530 0346     		mov	r3, r0
 6831              		.loc 2 3044 95 discriminator 4
 6832 0532 002B     		cmp	r3, #0
 6833 0534 0CBF     		ite	eq
 6834 0536 0123     		moveq	r3, #1
 6835 0538 0023     		movne	r3, #0
 6836 053a DBB2     		uxtb	r3, r3
 6837              	.L400:
 6838              		.loc 2 3044 12 discriminator 6
 6839 053c 002B     		cmp	r3, #0
 6840 053e 7DD0     		beq	.L401
3045:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3046:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* If the requested internal measurement path has already been enabled, */
3047:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* bypass the configuration processing.                                 */
3048:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_AD
 6841              		.loc 2 3048 23
 6842 0540 3B68     		ldr	r3, [r7]
 6843 0542 1B68     		ldr	r3, [r3]
 6844              		.loc 2 3048 14
 6845 0544 514A     		ldr	r2, .L420+20
 6846 0546 9342     		cmp	r3, r2
 6847 0548 30D1     		bne	.L402
 6848              		.loc 2 3048 93 discriminator 1
 6849 054a FB6E     		ldr	r3, [r7, #108]
 6850 054c 03F40003 		and	r3, r3, #8388608
 6851              		.loc 2 3048 60 discriminator 1
 6852 0550 002B     		cmp	r3, #0
 6853 0552 2BD1     		bne	.L402
3049:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
3050:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 6854              		.loc 2 3050 17
 6855 0554 7B68     		ldr	r3, [r7, #4]
 6856 0556 1B68     		ldr	r3, [r3]
 6857              		.loc 2 3050 16
 6858 0558 4B4A     		ldr	r2, .L420+16
 6859 055a 9342     		cmp	r3, r2
 6860 055c 40F08180 		bne	.L356
3051:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             {
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 335


3052:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_
 6861              		.loc 2 3052 46
 6862 0560 7B68     		ldr	r3, [r7, #4]
 6863 0562 1B68     		ldr	r3, [r3]
 6864              		.loc 2 3052 15
 6865 0564 444A     		ldr	r2, .L420
 6866 0566 9342     		cmp	r3, r2
 6867 0568 04D0     		beq	.L404
 6868              		.loc 2 3052 46 discriminator 2
 6869 056a 7B68     		ldr	r3, [r7, #4]
 6870 056c 1B68     		ldr	r3, [r3]
 6871 056e 434A     		ldr	r2, .L420+4
 6872 0570 9342     		cmp	r3, r2
 6873 0572 01D1     		bne	.L405
 6874              	.L404:
 6875              		.loc 2 3052 15 discriminator 3
 6876 0574 424A     		ldr	r2, .L420+8
 6877 0576 00E0     		b	.L406
 6878              	.L405:
 6879              		.loc 2 3052 15 is_stmt 0 discriminator 4
 6880 0578 424A     		ldr	r2, .L420+12
 6881              	.L406:
 6882              		.loc 2 3052 15 discriminator 6
 6883 057a FB6E     		ldr	r3, [r7, #108]
 6884 057c 43F40003 		orr	r3, r3, #8388608
 6885 0580 1946     		mov	r1, r3
 6886 0582 1046     		mov	r0, r2
 6887 0584 FFF7FEFF 		bl	LL_ADC_SetCommonPathInternalCh
3053:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3054:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               /* Delay for temperature sensor stabilization time */
3055:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               /* Wait loop initialization and execution */
3056:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               /* Note: Variable divided by 2 to compensate partially              */
3057:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               /*       CPU processing cycles, scaling in us split to not          */
3058:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               /*       exceed 32 bits register capacity and handle low frequency. */
3059:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (10
 6888              		.loc 2 3059 95 is_stmt 1 discriminator 6
 6889 0588 414B     		ldr	r3, .L420+24
 6890 058a 1B68     		ldr	r3, [r3]
 6891 058c 9B09     		lsrs	r3, r3, #6
 6892 058e 414A     		ldr	r2, .L420+28
 6893 0590 A2FB0323 		umull	r2, r3, r2, r3
 6894 0594 9B09     		lsrs	r3, r3, #6
 6895              		.loc 2 3059 115 discriminator 6
 6896 0596 0133     		adds	r3, r3, #1
 6897              		.loc 2 3059 75 discriminator 6
 6898 0598 5B00     		lsls	r3, r3, #1
 6899              		.loc 2 3059 31 discriminator 6
 6900 059a BB60     		str	r3, [r7, #8]
3060:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               while (wait_loop_index != 0UL)
 6901              		.loc 2 3060 21 discriminator 6
 6902 059c 02E0     		b	.L407
 6903              	.L408:
3061:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               {
3062:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 wait_loop_index--;
 6904              		.loc 2 3062 32
 6905 059e BB68     		ldr	r3, [r7, #8]
 6906 05a0 013B     		subs	r3, r3, #1
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 336


 6907 05a2 BB60     		str	r3, [r7, #8]
 6908              	.L407:
3060:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               while (wait_loop_index != 0UL)
 6909              		.loc 2 3060 38
 6910 05a4 BB68     		ldr	r3, [r7, #8]
3060:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               while (wait_loop_index != 0UL)
 6911              		.loc 2 3060 21
 6912 05a6 002B     		cmp	r3, #0
 6913 05a8 F9D1     		bne	.L408
3050:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             {
 6914              		.loc 2 3050 16
 6915 05aa 5AE0     		b	.L356
 6916              	.L402:
3063:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               }
3064:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
3065:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3066:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC
 6917              		.loc 2 3066 28
 6918 05ac 3B68     		ldr	r3, [r7]
 6919 05ae 1B68     		ldr	r3, [r3]
 6920              		.loc 2 3066 19
 6921 05b0 394A     		ldr	r2, .L420+32
 6922 05b2 9342     		cmp	r3, r2
 6923 05b4 1ED1     		bne	.L410
 6924              		.loc 2 3066 92 discriminator 1
 6925 05b6 FB6E     		ldr	r3, [r7, #108]
 6926 05b8 03F08073 		and	r3, r3, #16777216
 6927              		.loc 2 3066 59 discriminator 1
 6928 05bc 002B     		cmp	r3, #0
 6929 05be 19D1     		bne	.L410
3067:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
3068:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 6930              		.loc 2 3068 17
 6931 05c0 7B68     		ldr	r3, [r7, #4]
 6932 05c2 1B68     		ldr	r3, [r3]
 6933              		.loc 2 3068 16
 6934 05c4 304A     		ldr	r2, .L420+16
 6935 05c6 9342     		cmp	r3, r2
 6936 05c8 4BD1     		bne	.L356
3069:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             {
3070:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_
 6937              		.loc 2 3070 46
 6938 05ca 7B68     		ldr	r3, [r7, #4]
 6939 05cc 1B68     		ldr	r3, [r3]
 6940              		.loc 2 3070 15
 6941 05ce 2A4A     		ldr	r2, .L420
 6942 05d0 9342     		cmp	r3, r2
 6943 05d2 04D0     		beq	.L412
 6944              		.loc 2 3070 46 discriminator 2
 6945 05d4 7B68     		ldr	r3, [r7, #4]
 6946 05d6 1B68     		ldr	r3, [r3]
 6947 05d8 284A     		ldr	r2, .L420+4
 6948 05da 9342     		cmp	r3, r2
 6949 05dc 01D1     		bne	.L413
 6950              	.L412:
 6951              		.loc 2 3070 15 discriminator 3
 6952 05de 284A     		ldr	r2, .L420+8
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 337


 6953 05e0 00E0     		b	.L414
 6954              	.L413:
 6955              		.loc 2 3070 15 is_stmt 0 discriminator 4
 6956 05e2 284A     		ldr	r2, .L420+12
 6957              	.L414:
 6958              		.loc 2 3070 15 discriminator 6
 6959 05e4 FB6E     		ldr	r3, [r7, #108]
 6960 05e6 43F08073 		orr	r3, r3, #16777216
 6961 05ea 1946     		mov	r1, r3
 6962 05ec 1046     		mov	r0, r2
 6963 05ee FFF7FEFF 		bl	LL_ADC_SetCommonPathInternalCh
3068:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             {
 6964              		.loc 2 3068 16 is_stmt 1 discriminator 6
 6965 05f2 36E0     		b	.L356
 6966              	.L410:
3071:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
3072:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3073:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_
 6967              		.loc 2 3073 28
 6968 05f4 3B68     		ldr	r3, [r7]
 6969 05f6 1B68     		ldr	r3, [r3]
 6970              		.loc 2 3073 19
 6971 05f8 284A     		ldr	r2, .L420+36
 6972 05fa 9342     		cmp	r3, r2
 6973 05fc 31D1     		bne	.L356
 6974              		.loc 2 3073 95 discriminator 1
 6975 05fe FB6E     		ldr	r3, [r7, #108]
 6976 0600 03F48003 		and	r3, r3, #4194304
 6977              		.loc 2 3073 62 discriminator 1
 6978 0604 002B     		cmp	r3, #0
 6979 0606 2CD1     		bne	.L356
3074:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
3075:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             if (ADC_VREFINT_INSTANCE(hadc))
 6980              		.loc 2 3075 17
 6981 0608 7B68     		ldr	r3, [r7, #4]
 6982 060a 1B68     		ldr	r3, [r3]
 6983              		.loc 2 3075 16
 6984 060c 1E4A     		ldr	r2, .L420+16
 6985 060e 9342     		cmp	r3, r2
 6986 0610 27D1     		bne	.L356
3076:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             {
3077:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_
 6987              		.loc 2 3077 46
 6988 0612 7B68     		ldr	r3, [r7, #4]
 6989 0614 1B68     		ldr	r3, [r3]
 6990              		.loc 2 3077 15
 6991 0616 184A     		ldr	r2, .L420
 6992 0618 9342     		cmp	r3, r2
 6993 061a 04D0     		beq	.L415
 6994              		.loc 2 3077 46 discriminator 2
 6995 061c 7B68     		ldr	r3, [r7, #4]
 6996 061e 1B68     		ldr	r3, [r3]
 6997 0620 164A     		ldr	r2, .L420+4
 6998 0622 9342     		cmp	r3, r2
 6999 0624 01D1     		bne	.L416
 7000              	.L415:
 7001              		.loc 2 3077 15 discriminator 3
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 338


 7002 0626 164A     		ldr	r2, .L420+8
 7003 0628 00E0     		b	.L417
 7004              	.L416:
 7005              		.loc 2 3077 15 is_stmt 0 discriminator 4
 7006 062a 164A     		ldr	r2, .L420+12
 7007              	.L417:
 7008              		.loc 2 3077 15 discriminator 6
 7009 062c FB6E     		ldr	r3, [r7, #108]
 7010 062e 43F48003 		orr	r3, r3, #4194304
 7011 0632 1946     		mov	r1, r3
 7012 0634 1046     		mov	r0, r2
 7013 0636 FFF7FEFF 		bl	LL_ADC_SetCommonPathInternalCh
 7014 063a 12E0     		b	.L356
 7015              	.L401:
3078:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
3079:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3080:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           else
3081:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
3082:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* nothing to do */
3083:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3084:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3085:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* If the requested internal measurement path has already been          */
3086:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* enabled and other ADC of the common group are enabled, internal      */
3087:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* measurement paths cannot be enabled.                                 */
3088:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         else
3089:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3090:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Update ADC state machine to error */
3091:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 7016              		.loc 2 3091 11 is_stmt 1
 7017 063c 7B68     		ldr	r3, [r7, #4]
 7018 063e 5B6D     		ldr	r3, [r3, #84]
 7019 0640 43F02002 		orr	r2, r3, #32
 7020 0644 7B68     		ldr	r3, [r7, #4]
 7021 0646 5A65     		str	r2, [r3, #84]
3092:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3093:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           tmp_hal_status = HAL_ERROR;
 7022              		.loc 2 3093 26
 7023 0648 0123     		movs	r3, #1
 7024 064a 87F87F30 		strb	r3, [r7, #127]
 7025 064e 08E0     		b	.L356
 7026              	.L337:
3094:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3095:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3096:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3097:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3098:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3099:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* If a conversion is on going on regular group, no update on regular       */
3100:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* channel could be done on neither of the channel configuration structure  */
3101:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* parameters.                                                              */
3102:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
3103:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3104:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Update ADC state machine to error */
3105:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 7027              		.loc 2 3105 5
 7028 0650 7B68     		ldr	r3, [r7, #4]
 7029 0652 5B6D     		ldr	r3, [r3, #84]
 7030 0654 43F02002 		orr	r2, r3, #32
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 339


 7031 0658 7B68     		ldr	r3, [r7, #4]
 7032 065a 5A65     		str	r2, [r3, #84]
3106:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3107:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 7033              		.loc 2 3107 20
 7034 065c 0123     		movs	r3, #1
 7035 065e 87F87F30 		strb	r3, [r7, #127]
 7036              	.L356:
3108:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3109:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3110:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Process unlocked */
3111:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 7037              		.loc 2 3111 3
 7038 0662 7B68     		ldr	r3, [r7, #4]
 7039 0664 0022     		movs	r2, #0
 7040 0666 83F85020 		strb	r2, [r3, #80]
3112:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3113:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return function status */
3114:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return tmp_hal_status;
 7041              		.loc 2 3114 10
 7042 066a 97F87F30 		ldrb	r3, [r7, #127]	@ zero_extendqisi2
 7043              	.L336:
3115:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 7044              		.loc 2 3115 1
 7045 066e 1846     		mov	r0, r3
 7046 0670 8437     		adds	r7, r7, #132
 7047              	.LCFI322:
 7048              		.cfi_def_cfa_offset 12
 7049 0672 BD46     		mov	sp, r7
 7050              	.LCFI323:
 7051              		.cfi_def_cfa_register 13
 7052              		@ sp needed
 7053 0674 90BD     		pop	{r4, r7, pc}
 7054              	.L421:
 7055 0676 00BF     		.align	2
 7056              	.L420:
 7057 0678 00200240 		.word	1073881088
 7058 067c 00210240 		.word	1073881344
 7059 0680 00230240 		.word	1073881856
 7060 0684 00630258 		.word	1476551424
 7061 0688 00600258 		.word	1476550656
 7062 068c 000084CB 		.word	-880541696
 7063 0690 00000000 		.word	SystemCoreClock
 7064 0694 632D3E05 		.word	87960931
 7065 0698 000052C7 		.word	-950927360
 7066 069c 0000B8CF 		.word	-810024960
 7067              		.cfi_endproc
 7068              	.LFE351:
 7070              		.section	.text.HAL_ADC_AnalogWDGConfig,"ax",%progbits
 7071              		.align	1
 7072              		.global	HAL_ADC_AnalogWDGConfig
 7073              		.syntax unified
 7074              		.thumb
 7075              		.thumb_func
 7077              	HAL_ADC_AnalogWDGConfig:
 7078              	.LFB352:
3116:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 340


3117:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3118:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Configure the analog watchdog.
3119:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
3120:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         This function initializes the selected analog watchdog, successive
3121:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         calls to this function can be used to reconfigure some parameters
3122:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         of structure "ADC_AnalogWDGConfTypeDef" on the fly, without resetting
3123:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         the ADC.
3124:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
3125:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         For parameters constraints, see comments of structure
3126:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         "ADC_AnalogWDGConfTypeDef".
3127:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   On this STM32 series, analog watchdog thresholds cannot be modified
3128:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         while ADC conversion is on going.
3129:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
3130:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
3131:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status
3132:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3133:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *Analog
3134:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 7079              		.loc 2 3134 1
 7080              		.cfi_startproc
 7081              		@ args = 0, pretend = 0, frame = 80
 7082              		@ frame_needed = 1, uses_anonymous_args = 0
 7083 0000 80B5     		push	{r7, lr}
 7084              	.LCFI324:
 7085              		.cfi_def_cfa_offset 8
 7086              		.cfi_offset 7, -8
 7087              		.cfi_offset 14, -4
 7088 0002 94B0     		sub	sp, sp, #80
 7089              	.LCFI325:
 7090              		.cfi_def_cfa_offset 88
 7091 0004 00AF     		add	r7, sp, #0
 7092              	.LCFI326:
 7093              		.cfi_def_cfa_register 7
 7094 0006 7860     		str	r0, [r7, #4]
 7095 0008 3960     		str	r1, [r7]
3135:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 7096              		.loc 2 3135 21
 7097 000a 0023     		movs	r3, #0
 7098 000c 87F84F30 		strb	r3, [r7, #79]
3136:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmpAWDHighThresholdShifted;
3137:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmpAWDLowThresholdShifted;
3138:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
3139:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_injected;
3140:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3141:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
3142:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
3143:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
3144:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
3145:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
3146:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3147:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 7099              		.loc 2 3147 23
 7100 0010 3B68     		ldr	r3, [r7]
 7101 0012 5B68     		ldr	r3, [r3, #4]
 7102              		.loc 2 3147 6
 7103 0014 B3F5400F 		cmp	r3, #12582912
 7104 0018 03D0     		beq	.L423
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 341


3148:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 7105              		.loc 2 3148 23 discriminator 1
 7106 001a 3B68     		ldr	r3, [r7]
 7107 001c 5B68     		ldr	r3, [r3, #4]
3147:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 7108              		.loc 2 3147 76 discriminator 1
 7109 001e B3F1A07F 		cmp	r3, #20971520
 7110              	.L423:
3149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REGINJEC))
3150:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3151:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
3152:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3153:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3154:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
3155:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3156:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (hadc->Instance == ADC3)
3157:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3158:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Verify thresholds range */
3159:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Init.OversamplingMode == ENABLE)
3160:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3161:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Case of oversampling enabled: thresholds are compared to oversampling
3162:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          intermediate computation (after ratio, before shift application) */
3163:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC3_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold / (hadc->
3164:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC3_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold / (hadc->I
3165:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3166:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
3167:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3168:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Verify if thresholds are within the selected ADC resolution */
3169:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC3_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
3170:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC3_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
3171:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3172:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3173:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
3174:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* ADC_VER_V5_V90 */
3175:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3176:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Verify thresholds range */
3177:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Init.OversamplingMode == ENABLE)
3178:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3179:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Case of oversampling enabled: thresholds are compared to oversampling
3180:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          intermediate computation (after ratio, before shift application) */
3181:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold / (hadc->I
3182:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold / (hadc->In
3183:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3184:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
3185:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3186:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Verify if thresholds are within the selected ADC resolution */
3187:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
3188:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
3189:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3190:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3191:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3192:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Process locked */
3193:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_LOCK(hadc);
 7111              		.loc 2 3193 3
 7112 0022 7B68     		ldr	r3, [r7, #4]
 7113 0024 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 7114 0028 012B     		cmp	r3, #1
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 342


 7115 002a 01D1     		bne	.L424
 7116              		.loc 2 3193 3 is_stmt 0 discriminator 1
 7117 002c 0223     		movs	r3, #2
 7118 002e 04E3     		b	.L425
 7119              	.L424:
 7120              		.loc 2 3193 3 discriminator 2
 7121 0030 7B68     		ldr	r3, [r7, #4]
 7122 0032 0122     		movs	r2, #1
 7123 0034 83F85020 		strb	r2, [r3, #80]
3194:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3195:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Parameters update conditioned to ADC state:                              */
3196:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
3197:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* conversion on going on ADC groups regular and injected:                  */
3198:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /*  - Analog watchdog channels                                              */
3199:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /*  - Analog watchdog thresholds                                            */
3200:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 7124              		.loc 2 3200 44 is_stmt 1 discriminator 2
 7125 0038 7B68     		ldr	r3, [r7, #4]
 7126 003a 1B68     		ldr	r3, [r3]
 7127 003c 1846     		mov	r0, r3
 7128 003e FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 7129 0042 B864     		str	r0, [r7, #72]
3201:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 7130              		.loc 2 3201 45 discriminator 2
 7131 0044 7B68     		ldr	r3, [r7, #4]
 7132 0046 1B68     		ldr	r3, [r3]
 7133 0048 1846     		mov	r0, r3
 7134 004a FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 7135 004e 7864     		str	r0, [r7, #68]
3202:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 7136              		.loc 2 3202 6 discriminator 2
 7137 0050 BB6C     		ldr	r3, [r7, #72]
 7138 0052 002B     		cmp	r3, #0
 7139 0054 40F0E282 		bne	.L426
3203:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       && (tmp_adc_is_conversion_on_going_injected == 0UL)
 7140              		.loc 2 3203 7
 7141 0058 7B6C     		ldr	r3, [r7, #68]
 7142 005a 002B     		cmp	r3, #0
 7143 005c 40F0DE82 		bne	.L426
3204:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      )
3205:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Analog watchdog configuration */
3207:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 7144              		.loc 2 3207 24
 7145 0060 3B68     		ldr	r3, [r7]
 7146 0062 1B68     		ldr	r3, [r3]
 7147              		.loc 2 3207 8
 7148 0064 9B4A     		ldr	r2, .L487
 7149 0066 9342     		cmp	r3, r2
 7150 0068 40F0FA80 		bne	.L427
3208:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3209:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Configuration of analog watchdog:                                    */
3210:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /*  - Set the analog watchdog enable mode: one or overall group of      */
3211:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /*    channels, on groups regular and-or injected.                      */
3212:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       switch (AnalogWDGConfig->WatchdogMode)
 7151              		.loc 2 3212 30
 7152 006c 3B68     		ldr	r3, [r7]
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 343


 7153 006e 5B68     		ldr	r3, [r3, #4]
 7154              		.loc 2 3212 7
 7155 0070 B3F1E07F 		cmp	r3, #29360128
 7156 0074 34D0     		beq	.L428
 7157 0076 B3F1E07F 		cmp	r3, #29360128
 7158 007a 56D8     		bhi	.L429
 7159 007c B3F1C07F 		cmp	r3, #25165824
 7160 0080 4BD0     		beq	.L430
 7161 0082 B3F1C07F 		cmp	r3, #25165824
 7162 0086 50D8     		bhi	.L429
 7163 0088 B3F1A07F 		cmp	r3, #20971520
 7164 008c 1BD0     		beq	.L431
 7165 008e B3F1A07F 		cmp	r3, #20971520
 7166 0092 4AD8     		bhi	.L429
 7167 0094 B3F1807F 		cmp	r3, #16777216
 7168 0098 37D0     		beq	.L432
 7169 009a B3F1807F 		cmp	r3, #16777216
 7170 009e 44D8     		bhi	.L429
 7171 00a0 B3F5000F 		cmp	r3, #8388608
 7172 00a4 29D0     		beq	.L433
 7173 00a6 B3F5400F 		cmp	r3, #12582912
 7174 00aa 3ED1     		bne	.L429
3213:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3214:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_SINGLE_REG:
3215:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GR
 7175              		.loc 2 3215 11
 7176 00ac 7B68     		ldr	r3, [r7, #4]
 7177 00ae 1868     		ldr	r0, [r3]
 7178              		.loc 2 3215 72
 7179 00b0 3B68     		ldr	r3, [r7]
 7180 00b2 9B68     		ldr	r3, [r3, #8]
 7181 00b4 23F07C73 		bic	r3, r3, #66060288
 7182              		.loc 2 3215 11
 7183 00b8 43F44003 		orr	r3, r3, #12582912
 7184 00bc 1A46     		mov	r2, r3
 7185 00be 8549     		ldr	r1, .L487
 7186 00c0 FFF7FEFF 		bl	LL_ADC_SetAnalogWDMonitChannels
3216:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                           LL_ADC_GROUP_REGULAR));
3217:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
 7187              		.loc 2 3217 11
 7188 00c4 39E0     		b	.L434
 7189              	.L431:
3218:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3219:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
3220:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GR
 7190              		.loc 2 3220 11
 7191 00c6 7B68     		ldr	r3, [r7, #4]
 7192 00c8 1868     		ldr	r0, [r3]
 7193              		.loc 2 3220 72
 7194 00ca 3B68     		ldr	r3, [r7]
 7195 00cc 9B68     		ldr	r3, [r3, #8]
 7196 00ce 23F07C73 		bic	r3, r3, #66060288
 7197              		.loc 2 3220 11
 7198 00d2 43F0A073 		orr	r3, r3, #20971520
 7199 00d6 1A46     		mov	r2, r3
 7200 00d8 7E49     		ldr	r1, .L487
 7201 00da FFF7FEFF 		bl	LL_ADC_SetAnalogWDMonitChannels
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 344


3221:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                           LL_ADC_GROUP_INJECTED));
3222:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
 7202              		.loc 2 3222 11
 7203 00de 2CE0     		b	.L434
 7204              	.L428:
3223:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3224:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
3225:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GR
 7205              		.loc 2 3225 11
 7206 00e0 7B68     		ldr	r3, [r7, #4]
 7207 00e2 1868     		ldr	r0, [r3]
 7208              		.loc 2 3225 72
 7209 00e4 3B68     		ldr	r3, [r7]
 7210 00e6 9B68     		ldr	r3, [r3, #8]
 7211 00e8 23F07C73 		bic	r3, r3, #66060288
 7212              		.loc 2 3225 11
 7213 00ec 43F0E073 		orr	r3, r3, #29360128
 7214 00f0 1A46     		mov	r2, r3
 7215 00f2 7849     		ldr	r1, .L487
 7216 00f4 FFF7FEFF 		bl	LL_ADC_SetAnalogWDMonitChannels
3226:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                           LL_ADC_GROUP_REGULAR_INJECTED));
3227:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
 7217              		.loc 2 3227 11
 7218 00f8 1FE0     		b	.L434
 7219              	.L433:
3228:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3229:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_ALL_REG:
3230:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG)
 7220              		.loc 2 3230 11
 7221 00fa 7B68     		ldr	r3, [r7, #4]
 7222 00fc 1B68     		ldr	r3, [r3]
 7223 00fe 764A     		ldr	r2, .L487+4
 7224 0100 7449     		ldr	r1, .L487
 7225 0102 1846     		mov	r0, r3
 7226 0104 FFF7FEFF 		bl	LL_ADC_SetAnalogWDMonitChannels
3231:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
 7227              		.loc 2 3231 11
 7228 0108 17E0     		b	.L434
 7229              	.L432:
3232:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3233:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_ALL_INJEC:
3234:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ)
 7230              		.loc 2 3234 11
 7231 010a 7B68     		ldr	r3, [r7, #4]
 7232 010c 1B68     		ldr	r3, [r3]
 7233 010e 734A     		ldr	r2, .L487+8
 7234 0110 7049     		ldr	r1, .L487
 7235 0112 1846     		mov	r0, r3
 7236 0114 FFF7FEFF 		bl	LL_ADC_SetAnalogWDMonitChannels
3235:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
 7237              		.loc 2 3235 11
 7238 0118 0FE0     		b	.L434
 7239              	.L430:
3236:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3237:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
3238:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_
 7240              		.loc 2 3238 11
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 345


 7241 011a 7B68     		ldr	r3, [r7, #4]
 7242 011c 1B68     		ldr	r3, [r3]
 7243 011e 704A     		ldr	r2, .L487+12
 7244 0120 6C49     		ldr	r1, .L487
 7245 0122 1846     		mov	r0, r3
 7246 0124 FFF7FEFF 		bl	LL_ADC_SetAnalogWDMonitChannels
3239:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
 7247              		.loc 2 3239 11
 7248 0128 07E0     		b	.L434
 7249              	.L429:
3240:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3241:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         default: /* ADC_ANALOGWATCHDOG_NONE */
3242:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 7250              		.loc 2 3242 11
 7251 012a 7B68     		ldr	r3, [r7, #4]
 7252 012c 1B68     		ldr	r3, [r3]
 7253 012e 0022     		movs	r2, #0
 7254 0130 6849     		ldr	r1, .L487
 7255 0132 1846     		mov	r0, r3
 7256 0134 FFF7FEFF 		bl	LL_ADC_SetAnalogWDMonitChannels
3243:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
 7257              		.loc 2 3243 11
 7258 0138 00BF     		nop
 7259              	.L434:
3244:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3245:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3246:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Shift the offset in function of the selected ADC resolution:         */
3247:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
3248:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* are set to 0                                                         */
3249:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighTh
 7260              		.loc 2 3249 36
 7261 013a 6A4B     		ldr	r3, .L487+16
 7262 013c 1B68     		ldr	r3, [r3]
 7263 013e 03F07043 		and	r3, r3, #-268435456
 7264 0142 B3F1805F 		cmp	r3, #268435456
 7265 0146 0BD1     		bne	.L435
 7266              		.loc 2 3249 36 is_stmt 0 discriminator 1
 7267 0148 3B68     		ldr	r3, [r7]
 7268 014a 1A69     		ldr	r2, [r3, #16]
 7269 014c 7B68     		ldr	r3, [r7, #4]
 7270 014e 1B68     		ldr	r3, [r3]
 7271 0150 DB68     		ldr	r3, [r3, #12]
 7272 0152 9B08     		lsrs	r3, r3, #2
 7273 0154 03F00703 		and	r3, r3, #7
 7274 0158 5B00     		lsls	r3, r3, #1
 7275 015a 02FA03F3 		lsl	r3, r2, r3
 7276 015e 1DE0     		b	.L436
 7277              	.L435:
 7278              		.loc 2 3249 36 discriminator 2
 7279 0160 7B68     		ldr	r3, [r7, #4]
 7280 0162 1B68     		ldr	r3, [r3]
 7281 0164 DB68     		ldr	r3, [r3, #12]
 7282 0166 03F01003 		and	r3, r3, #16
 7283 016a 002B     		cmp	r3, #0
 7284 016c 0BD1     		bne	.L437
 7285              		.loc 2 3249 36 discriminator 4
 7286 016e 3B68     		ldr	r3, [r7]
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 346


 7287 0170 1A69     		ldr	r2, [r3, #16]
 7288 0172 7B68     		ldr	r3, [r7, #4]
 7289 0174 1B68     		ldr	r3, [r3]
 7290 0176 DB68     		ldr	r3, [r3, #12]
 7291 0178 9B08     		lsrs	r3, r3, #2
 7292 017a 03F00703 		and	r3, r3, #7
 7293 017e 5B00     		lsls	r3, r3, #1
 7294 0180 02FA03F3 		lsl	r3, r2, r3
 7295 0184 0AE0     		b	.L436
 7296              	.L437:
 7297              		.loc 2 3249 36 discriminator 5
 7298 0186 3B68     		ldr	r3, [r7]
 7299 0188 1A69     		ldr	r2, [r3, #16]
 7300 018a 7B68     		ldr	r3, [r7, #4]
 7301 018c 1B68     		ldr	r3, [r3]
 7302 018e DB68     		ldr	r3, [r3, #12]
 7303 0190 9B08     		lsrs	r3, r3, #2
 7304 0192 03F00403 		and	r3, r3, #4
 7305 0196 5B00     		lsls	r3, r3, #1
 7306 0198 02FA03F3 		lsl	r3, r2, r3
 7307              	.L436:
 7308              		.loc 2 3249 34 is_stmt 1 discriminator 8
 7309 019c 3B64     		str	r3, [r7, #64]
3250:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThr
 7310              		.loc 2 3250 36 discriminator 8
 7311 019e 514B     		ldr	r3, .L487+16
 7312 01a0 1B68     		ldr	r3, [r3]
 7313 01a2 03F07043 		and	r3, r3, #-268435456
 7314 01a6 B3F1805F 		cmp	r3, #268435456
 7315 01aa 0BD1     		bne	.L439
 7316              		.loc 2 3250 36 is_stmt 0 discriminator 1
 7317 01ac 3B68     		ldr	r3, [r7]
 7318 01ae 5A69     		ldr	r2, [r3, #20]
 7319 01b0 7B68     		ldr	r3, [r7, #4]
 7320 01b2 1B68     		ldr	r3, [r3]
 7321 01b4 DB68     		ldr	r3, [r3, #12]
 7322 01b6 9B08     		lsrs	r3, r3, #2
 7323 01b8 03F00703 		and	r3, r3, #7
 7324 01bc 5B00     		lsls	r3, r3, #1
 7325 01be 02FA03F3 		lsl	r3, r2, r3
 7326 01c2 1DE0     		b	.L440
 7327              	.L439:
 7328              		.loc 2 3250 36 discriminator 2
 7329 01c4 7B68     		ldr	r3, [r7, #4]
 7330 01c6 1B68     		ldr	r3, [r3]
 7331 01c8 DB68     		ldr	r3, [r3, #12]
 7332 01ca 03F01003 		and	r3, r3, #16
 7333 01ce 002B     		cmp	r3, #0
 7334 01d0 0BD1     		bne	.L441
 7335              		.loc 2 3250 36 discriminator 4
 7336 01d2 3B68     		ldr	r3, [r7]
 7337 01d4 5A69     		ldr	r2, [r3, #20]
 7338 01d6 7B68     		ldr	r3, [r7, #4]
 7339 01d8 1B68     		ldr	r3, [r3]
 7340 01da DB68     		ldr	r3, [r3, #12]
 7341 01dc 9B08     		lsrs	r3, r3, #2
 7342 01de 03F00703 		and	r3, r3, #7
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 347


 7343 01e2 5B00     		lsls	r3, r3, #1
 7344 01e4 02FA03F3 		lsl	r3, r2, r3
 7345 01e8 0AE0     		b	.L440
 7346              	.L441:
 7347              		.loc 2 3250 36 discriminator 5
 7348 01ea 3B68     		ldr	r3, [r7]
 7349 01ec 5A69     		ldr	r2, [r3, #20]
 7350 01ee 7B68     		ldr	r3, [r7, #4]
 7351 01f0 1B68     		ldr	r3, [r3]
 7352 01f2 DB68     		ldr	r3, [r3, #12]
 7353 01f4 9B08     		lsrs	r3, r3, #2
 7354 01f6 03F00403 		and	r3, r3, #4
 7355 01fa 5B00     		lsls	r3, r3, #1
 7356 01fc 02FA03F3 		lsl	r3, r2, r3
 7357              	.L440:
 7358              		.loc 2 3250 34 is_stmt 1 discriminator 8
 7359 0200 FB63     		str	r3, [r7, #60]
3251:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3252:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set the high and low thresholds */
3253:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
3254:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (hadc->Instance == ADC3)
3255:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3256:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->LTR1_TR1,
3257:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    ADC3_TR1_AWDFILT,
3258:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    AnalogWDGConfig->FilteringConfig);
3259:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC3_TR1_LT1, tmpAWDLowThresholdShifted);
3260:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC3_TR1_HT1, (tmpAWDHighThresholdShifted << ADC3_TR1
3261:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3262:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
3263:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3264:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3265:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
3266:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->HTR1_TR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
3267:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3268:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
3269:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 7360              		.loc 2 3269 7 discriminator 8
 7361 0202 7B68     		ldr	r3, [r7, #4]
 7362 0204 1B68     		ldr	r3, [r3]
 7363 0206 1B6A     		ldr	r3, [r3, #32]
 7364 0208 03F07C41 		and	r1, r3, #-67108864
 7365 020c 7B68     		ldr	r3, [r7, #4]
 7366 020e 1B68     		ldr	r3, [r3]
 7367 0210 FA6B     		ldr	r2, [r7, #60]
 7368 0212 0A43     		orrs	r2, r2, r1
 7369 0214 1A62     		str	r2, [r3, #32]
3270:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 7370              		.loc 2 3270 7 discriminator 8
 7371 0216 7B68     		ldr	r3, [r7, #4]
 7372 0218 1B68     		ldr	r3, [r3]
 7373 021a 5B6A     		ldr	r3, [r3, #36]
 7374 021c 03F07C41 		and	r1, r3, #-67108864
 7375 0220 7B68     		ldr	r3, [r7, #4]
 7376 0222 1B68     		ldr	r3, [r3]
 7377 0224 3A6C     		ldr	r2, [r7, #64]
 7378 0226 0A43     		orrs	r2, r2, r1
 7379 0228 5A62     		str	r2, [r3, #36]
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 348


3271:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif
3272:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3273:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Update state, clear previous result related to AWD1 */
3274:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 7380              		.loc 2 3274 7 discriminator 8
 7381 022a 7B68     		ldr	r3, [r7, #4]
 7382 022c 5B6D     		ldr	r3, [r3, #84]
 7383 022e 23F48032 		bic	r2, r3, #65536
 7384 0232 7B68     		ldr	r3, [r7, #4]
 7385 0234 5A65     		str	r2, [r3, #84]
3275:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3276:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Clear flag ADC analog watchdog */
3277:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
3278:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
3279:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* (in case left enabled by previous ADC operations).                 */
3280:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       LL_ADC_ClearFlag_AWD1(hadc->Instance);
 7386              		.loc 2 3280 7 discriminator 8
 7387 0236 7B68     		ldr	r3, [r7, #4]
 7388 0238 1B68     		ldr	r3, [r3]
 7389 023a 1846     		mov	r0, r3
 7390 023c FFF7FEFF 		bl	LL_ADC_ClearFlag_AWD1
3281:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3282:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Configure ADC analog watchdog interrupt */
3283:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (AnalogWDGConfig->ITMode == ENABLE)
 7391              		.loc 2 3283 26 discriminator 8
 7392 0240 3B68     		ldr	r3, [r7]
 7393 0242 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 7394              		.loc 2 3283 10 discriminator 8
 7395 0244 012B     		cmp	r3, #1
 7396 0246 05D1     		bne	.L443
3284:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3285:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         LL_ADC_EnableIT_AWD1(hadc->Instance);
 7397              		.loc 2 3285 9
 7398 0248 7B68     		ldr	r3, [r7, #4]
 7399 024a 1B68     		ldr	r3, [r3]
 7400 024c 1846     		mov	r0, r3
 7401 024e FFF7FEFF 		bl	LL_ADC_EnableIT_AWD1
3207:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 7402              		.loc 2 3207 8
 7403 0252 ECE1     		b	.L486
 7404              	.L443:
3286:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3287:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
3288:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3289:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         LL_ADC_DisableIT_AWD1(hadc->Instance);
 7405              		.loc 2 3289 9
 7406 0254 7B68     		ldr	r3, [r7, #4]
 7407 0256 1B68     		ldr	r3, [r3]
 7408 0258 1846     		mov	r0, r3
 7409 025a FFF7FEFF 		bl	LL_ADC_DisableIT_AWD1
3207:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 7410              		.loc 2 3207 8
 7411 025e E6E1     		b	.L486
 7412              	.L427:
3290:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3291:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3292:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 349


3293:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
3294:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3295:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       switch (AnalogWDGConfig->WatchdogMode)
 7413              		.loc 2 3295 30
 7414 0260 3B68     		ldr	r3, [r7]
 7415 0262 5B68     		ldr	r3, [r3, #4]
 7416              		.loc 2 3295 7
 7417 0264 B3F1E07F 		cmp	r3, #29360128
 7418 0268 20D0     		beq	.L445
 7419 026a B3F1E07F 		cmp	r3, #29360128
 7420 026e 00F2F380 		bhi	.L446
 7421 0272 B3F1C07F 		cmp	r3, #25165824
 7422 0276 00F08A80 		beq	.L447
 7423 027a B3F1C07F 		cmp	r3, #25165824
 7424 027e 00F2EB80 		bhi	.L446
 7425 0282 B3F1A07F 		cmp	r3, #20971520
 7426 0286 11D0     		beq	.L445
 7427 0288 B3F1A07F 		cmp	r3, #20971520
 7428 028c 00F2E480 		bhi	.L446
 7429 0290 B3F1807F 		cmp	r3, #16777216
 7430 0294 7BD0     		beq	.L447
 7431 0296 B3F1807F 		cmp	r3, #16777216
 7432 029a 00F2DD80 		bhi	.L446
 7433 029e B3F5000F 		cmp	r3, #8388608
 7434 02a2 74D0     		beq	.L447
 7435 02a4 B3F5400F 		cmp	r3, #12582912
 7436 02a8 40F0D680 		bne	.L446
 7437              	.L445:
3296:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3297:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_SINGLE_REG:
3298:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
3299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
3300:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Update AWD by bitfield to keep the possibility to monitor        */
3301:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* several channels by successive calls of this function.           */
3302:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 7438              		.loc 2 3302 30
 7439 02ac 3B68     		ldr	r3, [r7]
 7440 02ae 1B68     		ldr	r3, [r3]
 7441              		.loc 2 3302 14
 7442 02b0 0D4A     		ldr	r2, .L487+20
 7443 02b2 9342     		cmp	r3, r2
 7444 02b4 3BD1     		bne	.L448
3303:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
3304:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig
 7445              		.loc 2 3304 13
 7446 02b6 3B68     		ldr	r3, [r7]
 7447 02b8 9B68     		ldr	r3, [r3, #8]
 7448 02ba C3F31303 		ubfx	r3, r3, #0, #20
 7449 02be 002B     		cmp	r3, #0
 7450 02c0 14D1     		bne	.L449
 7451              		.loc 2 3304 13 is_stmt 0 discriminator 1
 7452 02c2 3B68     		ldr	r3, [r7]
 7453 02c4 9B68     		ldr	r3, [r3, #8]
 7454 02c6 9B0E     		lsrs	r3, r3, #26
 7455 02c8 03F01F03 		and	r3, r3, #31
 7456 02cc 0122     		movs	r2, #1
 7457 02ce 02FA03F3 		lsl	r3, r2, r3
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 350


 7458 02d2 22E0     		b	.L450
 7459              	.L488:
 7460              		.align	2
 7461              	.L487:
 7462 02d4 0000C07D 		.word	2109734912
 7463 02d8 FFFF8F00 		.word	9437183
 7464 02dc FFFF0F01 		.word	17825791
 7465 02e0 FFFF8F01 		.word	26214399
 7466 02e4 0010005C 		.word	1543507968
 7467 02e8 FFFF1F00 		.word	2097151
 7468              	.L449:
 7469              		.loc 2 3304 13 discriminator 2
 7470 02ec 3B68     		ldr	r3, [r7]
 7471 02ee 9B68     		ldr	r3, [r3, #8]
 7472 02f0 7B63     		str	r3, [r7, #52]
 7473              	.LBB83:
 7474              	.LBB84:
1055:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 7475              		.loc 3 1055 4 is_stmt 1 discriminator 2
 7476 02f2 7B6B     		ldr	r3, [r7, #52]
 7477              		.syntax unified
 7478              	@ 1055 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7479 02f4 93FAA3F3 		rbit r3, r3
 7480              	@ 0 "" 2
 7481              		.thumb
 7482              		.syntax unified
 7483 02f8 3B63     		str	r3, [r7, #48]
1068:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7484              		.loc 3 1068 10 discriminator 2
 7485 02fa 3B6B     		ldr	r3, [r7, #48]
 7486 02fc BB63     		str	r3, [r7, #56]
 7487              	.LBE84:
 7488              	.LBE83:
 7489              	.LBB85:
 7490              	.LBB86:
1089:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 7491              		.loc 3 1089 6 discriminator 2
 7492 02fe BB6B     		ldr	r3, [r7, #56]
 7493 0300 002B     		cmp	r3, #0
 7494 0302 01D1     		bne	.L452
1091:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 7495              		.loc 3 1091 12
 7496 0304 2023     		movs	r3, #32
 7497 0306 03E0     		b	.L453
 7498              	.L452:
 7499              		.loc 3 1093 10
 7500 0308 BB6B     		ldr	r3, [r7, #56]
 7501 030a B3FA83F3 		clz	r3, r3
 7502 030e DBB2     		uxtb	r3, r3
 7503              	.L453:
 7504              	.LBE86:
 7505              	.LBE85:
 7506              		.loc 2 3304 13
 7507 0310 03F01F03 		and	r3, r3, #31
 7508 0314 0122     		movs	r2, #1
 7509 0316 02FA03F3 		lsl	r3, r2, r3
 7510              	.L450:
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 351


 7511              		.loc 2 3304 13 is_stmt 0 discriminator 4
 7512 031a 7A68     		ldr	r2, [r7, #4]
 7513 031c 1268     		ldr	r2, [r2]
 7514 031e D2F8A010 		ldr	r1, [r2, #160]
 7515 0322 7A68     		ldr	r2, [r7, #4]
 7516 0324 1268     		ldr	r2, [r2]
 7517 0326 0B43     		orrs	r3, r3, r1
 7518 0328 C2F8A030 		str	r3, [r2, #160]
3305:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3306:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           else
3307:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
3308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig
3309:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3310:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
 7519              		.loc 2 3310 11 is_stmt 1 discriminator 4
 7520 032c 9DE0     		b	.L460
 7521              	.L448:
3308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
 7522              		.loc 2 3308 13
 7523 032e 3B68     		ldr	r3, [r7]
 7524 0330 9B68     		ldr	r3, [r3, #8]
 7525 0332 C3F31303 		ubfx	r3, r3, #0, #20
 7526 0336 002B     		cmp	r3, #0
 7527 0338 08D1     		bne	.L455
3308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
 7528              		.loc 2 3308 13 is_stmt 0 discriminator 1
 7529 033a 3B68     		ldr	r3, [r7]
 7530 033c 9B68     		ldr	r3, [r3, #8]
 7531 033e 9B0E     		lsrs	r3, r3, #26
 7532 0340 03F01F03 		and	r3, r3, #31
 7533 0344 0122     		movs	r2, #1
 7534 0346 02FA03F3 		lsl	r3, r2, r3
 7535 034a 16E0     		b	.L456
 7536              	.L455:
3308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
 7537              		.loc 2 3308 13 discriminator 2
 7538 034c 3B68     		ldr	r3, [r7]
 7539 034e 9B68     		ldr	r3, [r3, #8]
 7540 0350 BB62     		str	r3, [r7, #40]
 7541              	.LBB87:
 7542              	.LBB88:
1055:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 7543              		.loc 3 1055 4 is_stmt 1 discriminator 2
 7544 0352 BB6A     		ldr	r3, [r7, #40]
 7545              		.syntax unified
 7546              	@ 1055 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7547 0354 93FAA3F3 		rbit r3, r3
 7548              	@ 0 "" 2
 7549              		.thumb
 7550              		.syntax unified
 7551 0358 7B62     		str	r3, [r7, #36]
1068:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7552              		.loc 3 1068 10 discriminator 2
 7553 035a 7B6A     		ldr	r3, [r7, #36]
 7554 035c FB62     		str	r3, [r7, #44]
 7555              	.LBE88:
 7556              	.LBE87:
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 352


 7557              	.LBB89:
 7558              	.LBB90:
1089:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 7559              		.loc 3 1089 6 discriminator 2
 7560 035e FB6A     		ldr	r3, [r7, #44]
 7561 0360 002B     		cmp	r3, #0
 7562 0362 01D1     		bne	.L458
1091:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 7563              		.loc 3 1091 12
 7564 0364 2023     		movs	r3, #32
 7565 0366 03E0     		b	.L459
 7566              	.L458:
 7567              		.loc 3 1093 10
 7568 0368 FB6A     		ldr	r3, [r7, #44]
 7569 036a B3FA83F3 		clz	r3, r3
 7570 036e DBB2     		uxtb	r3, r3
 7571              	.L459:
 7572              	.LBE90:
 7573              	.LBE89:
3308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
 7574              		.loc 2 3308 13
 7575 0370 03F01F03 		and	r3, r3, #31
 7576 0374 0122     		movs	r2, #1
 7577 0376 02FA03F3 		lsl	r3, r2, r3
 7578              	.L456:
3308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
 7579              		.loc 2 3308 13 is_stmt 0 discriminator 4
 7580 037a 7A68     		ldr	r2, [r7, #4]
 7581 037c 1268     		ldr	r2, [r2]
 7582 037e D2F8A410 		ldr	r1, [r2, #164]
 7583 0382 7A68     		ldr	r2, [r7, #4]
 7584 0384 1268     		ldr	r2, [r2]
 7585 0386 0B43     		orrs	r3, r3, r1
 7586 0388 C2F8A430 		str	r3, [r2, #164]
 7587              		.loc 2 3310 11 is_stmt 1 discriminator 4
 7588 038c 6DE0     		b	.L460
 7589              	.L447:
3311:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3312:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_ALL_REG:
3313:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_ALL_INJEC:
3314:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
3315:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3316:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
3317:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (hadc->Instance == ADC3)
3318:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
3319:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3320:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC
3321:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3322:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3323:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           else
3324:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
3325:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif  /*ADC_VER_V5_V90*/
3326:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* Update AWD by bitfield to keep the possibility to monitor        */
3327:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* several channels by successive calls of this function.           */
3328:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 7590              		.loc 2 3328 32
 7591 038e 3B68     		ldr	r3, [r7]
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 353


 7592 0390 1B68     		ldr	r3, [r3]
 7593              		.loc 2 3328 16
 7594 0392 A04A     		ldr	r2, .L489
 7595 0394 9342     		cmp	r3, r2
 7596 0396 2FD1     		bne	.L461
3329:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             {
3330:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConf
 7597              		.loc 2 3330 15
 7598 0398 3B68     		ldr	r3, [r7]
 7599 039a 9B68     		ldr	r3, [r3, #8]
 7600 039c C3F31303 		ubfx	r3, r3, #0, #20
 7601 03a0 002B     		cmp	r3, #0
 7602 03a2 08D1     		bne	.L462
 7603              		.loc 2 3330 15 is_stmt 0 discriminator 1
 7604 03a4 3B68     		ldr	r3, [r7]
 7605 03a6 9B68     		ldr	r3, [r3, #8]
 7606 03a8 9B0E     		lsrs	r3, r3, #26
 7607 03aa 03F01F03 		and	r3, r3, #31
 7608 03ae 0122     		movs	r2, #1
 7609 03b0 02FA03F3 		lsl	r3, r2, r3
 7610 03b4 16E0     		b	.L463
 7611              	.L462:
 7612              		.loc 2 3330 15 discriminator 2
 7613 03b6 3B68     		ldr	r3, [r7]
 7614 03b8 9B68     		ldr	r3, [r3, #8]
 7615 03ba FB61     		str	r3, [r7, #28]
 7616              	.LBB91:
 7617              	.LBB92:
1055:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 7618              		.loc 3 1055 4 is_stmt 1 discriminator 2
 7619 03bc FB69     		ldr	r3, [r7, #28]
 7620              		.syntax unified
 7621              	@ 1055 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7622 03be 93FAA3F3 		rbit r3, r3
 7623              	@ 0 "" 2
 7624              		.thumb
 7625              		.syntax unified
 7626 03c2 BB61     		str	r3, [r7, #24]
1068:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7627              		.loc 3 1068 10 discriminator 2
 7628 03c4 BB69     		ldr	r3, [r7, #24]
 7629 03c6 3B62     		str	r3, [r7, #32]
 7630              	.LBE92:
 7631              	.LBE91:
 7632              	.LBB93:
 7633              	.LBB94:
1089:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 7634              		.loc 3 1089 6 discriminator 2
 7635 03c8 3B6A     		ldr	r3, [r7, #32]
 7636 03ca 002B     		cmp	r3, #0
 7637 03cc 01D1     		bne	.L465
1091:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 7638              		.loc 3 1091 12
 7639 03ce 2023     		movs	r3, #32
 7640 03d0 03E0     		b	.L466
 7641              	.L465:
 7642              		.loc 3 1093 10
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 354


 7643 03d2 3B6A     		ldr	r3, [r7, #32]
 7644 03d4 B3FA83F3 		clz	r3, r3
 7645 03d8 DBB2     		uxtb	r3, r3
 7646              	.L466:
 7647              	.LBE94:
 7648              	.LBE93:
 7649              		.loc 2 3330 15
 7650 03da 03F01F03 		and	r3, r3, #31
 7651 03de 0122     		movs	r2, #1
 7652 03e0 02FA03F3 		lsl	r3, r2, r3
 7653              	.L463:
 7654              		.loc 2 3330 15 is_stmt 0 discriminator 4
 7655 03e4 7A68     		ldr	r2, [r7, #4]
 7656 03e6 1268     		ldr	r2, [r2]
 7657 03e8 D2F8A010 		ldr	r1, [r2, #160]
 7658 03ec 7A68     		ldr	r2, [r7, #4]
 7659 03ee 1268     		ldr	r2, [r2]
 7660 03f0 0B43     		orrs	r3, r3, r1
 7661 03f2 C2F8A030 		str	r3, [r2, #160]
3331:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
3332:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             else
3333:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             {
3334:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConf
3335:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
3336:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
3337:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3338:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif  /*ADC_VER_V5_V90*/
3339:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
 7662              		.loc 2 3339 11 is_stmt 1 discriminator 4
 7663 03f6 38E0     		b	.L460
 7664              	.L461:
3334:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
 7665              		.loc 2 3334 15
 7666 03f8 3B68     		ldr	r3, [r7]
 7667 03fa 9B68     		ldr	r3, [r3, #8]
 7668 03fc C3F31303 		ubfx	r3, r3, #0, #20
 7669 0400 002B     		cmp	r3, #0
 7670 0402 08D1     		bne	.L468
3334:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
 7671              		.loc 2 3334 15 is_stmt 0 discriminator 1
 7672 0404 3B68     		ldr	r3, [r7]
 7673 0406 9B68     		ldr	r3, [r3, #8]
 7674 0408 9B0E     		lsrs	r3, r3, #26
 7675 040a 03F01F03 		and	r3, r3, #31
 7676 040e 0122     		movs	r2, #1
 7677 0410 02FA03F3 		lsl	r3, r2, r3
 7678 0414 16E0     		b	.L469
 7679              	.L468:
3334:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
 7680              		.loc 2 3334 15 discriminator 2
 7681 0416 3B68     		ldr	r3, [r7]
 7682 0418 9B68     		ldr	r3, [r3, #8]
 7683 041a 3B61     		str	r3, [r7, #16]
 7684              	.LBB95:
 7685              	.LBB96:
1055:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 7686              		.loc 3 1055 4 is_stmt 1 discriminator 2
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 355


 7687 041c 3B69     		ldr	r3, [r7, #16]
 7688              		.syntax unified
 7689              	@ 1055 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7690 041e 93FAA3F3 		rbit r3, r3
 7691              	@ 0 "" 2
 7692              		.thumb
 7693              		.syntax unified
 7694 0422 FB60     		str	r3, [r7, #12]
1068:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7695              		.loc 3 1068 10 discriminator 2
 7696 0424 FB68     		ldr	r3, [r7, #12]
 7697 0426 7B61     		str	r3, [r7, #20]
 7698              	.LBE96:
 7699              	.LBE95:
 7700              	.LBB97:
 7701              	.LBB98:
1089:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 7702              		.loc 3 1089 6 discriminator 2
 7703 0428 7B69     		ldr	r3, [r7, #20]
 7704 042a 002B     		cmp	r3, #0
 7705 042c 01D1     		bne	.L471
1091:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 7706              		.loc 3 1091 12
 7707 042e 2023     		movs	r3, #32
 7708 0430 03E0     		b	.L472
 7709              	.L471:
 7710              		.loc 3 1093 10
 7711 0432 7B69     		ldr	r3, [r7, #20]
 7712 0434 B3FA83F3 		clz	r3, r3
 7713 0438 DBB2     		uxtb	r3, r3
 7714              	.L472:
 7715              	.LBE98:
 7716              	.LBE97:
3334:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
 7717              		.loc 2 3334 15
 7718 043a 03F01F03 		and	r3, r3, #31
 7719 043e 0122     		movs	r2, #1
 7720 0440 02FA03F3 		lsl	r3, r2, r3
 7721              	.L469:
3334:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
 7722              		.loc 2 3334 15 is_stmt 0 discriminator 4
 7723 0444 7A68     		ldr	r2, [r7, #4]
 7724 0446 1268     		ldr	r2, [r2]
 7725 0448 D2F8A410 		ldr	r1, [r2, #164]
 7726 044c 7A68     		ldr	r2, [r7, #4]
 7727 044e 1268     		ldr	r2, [r2]
 7728 0450 0B43     		orrs	r3, r3, r1
 7729 0452 C2F8A430 		str	r3, [r2, #164]
 7730              		.loc 2 3339 11 is_stmt 1 discriminator 4
 7731 0456 08E0     		b	.L460
 7732              	.L446:
3340:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3341:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         default: /* ADC_ANALOGWATCHDOG_NONE */
3342:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_A
 7733              		.loc 2 3342 11
 7734 0458 7B68     		ldr	r3, [r7, #4]
 7735 045a 1868     		ldr	r0, [r3]
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 356


 7736 045c 3B68     		ldr	r3, [r7]
 7737 045e 1B68     		ldr	r3, [r3]
 7738 0460 0022     		movs	r2, #0
 7739 0462 1946     		mov	r1, r3
 7740 0464 FFF7FEFF 		bl	LL_ADC_SetAnalogWDMonitChannels
3343:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
 7741              		.loc 2 3343 11
 7742 0468 00BF     		nop
 7743              	.L460:
3344:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3345:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3346:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Shift the thresholds in function of the selected ADC resolution      */
3347:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* have to be left-aligned on bit 15, the LSB (right bits) are set to 0 */
3348:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighT
 7744              		.loc 2 3348 36
 7745 046a 6B4B     		ldr	r3, .L489+4
 7746 046c 1B68     		ldr	r3, [r3]
 7747 046e 03F07043 		and	r3, r3, #-268435456
 7748 0472 B3F1805F 		cmp	r3, #268435456
 7749 0476 0BD1     		bne	.L473
 7750              		.loc 2 3348 36 is_stmt 0 discriminator 1
 7751 0478 3B68     		ldr	r3, [r7]
 7752 047a 1A69     		ldr	r2, [r3, #16]
 7753 047c 7B68     		ldr	r3, [r7, #4]
 7754 047e 1B68     		ldr	r3, [r3]
 7755 0480 DB68     		ldr	r3, [r3, #12]
 7756 0482 9B08     		lsrs	r3, r3, #2
 7757 0484 03F00703 		and	r3, r3, #7
 7758 0488 5B00     		lsls	r3, r3, #1
 7759 048a 02FA03F3 		lsl	r3, r2, r3
 7760 048e 1DE0     		b	.L474
 7761              	.L473:
 7762              		.loc 2 3348 36 discriminator 2
 7763 0490 7B68     		ldr	r3, [r7, #4]
 7764 0492 1B68     		ldr	r3, [r3]
 7765 0494 DB68     		ldr	r3, [r3, #12]
 7766 0496 03F01003 		and	r3, r3, #16
 7767 049a 002B     		cmp	r3, #0
 7768 049c 0BD1     		bne	.L475
 7769              		.loc 2 3348 36 discriminator 4
 7770 049e 3B68     		ldr	r3, [r7]
 7771 04a0 1A69     		ldr	r2, [r3, #16]
 7772 04a2 7B68     		ldr	r3, [r7, #4]
 7773 04a4 1B68     		ldr	r3, [r3]
 7774 04a6 DB68     		ldr	r3, [r3, #12]
 7775 04a8 9B08     		lsrs	r3, r3, #2
 7776 04aa 03F00703 		and	r3, r3, #7
 7777 04ae 5B00     		lsls	r3, r3, #1
 7778 04b0 02FA03F3 		lsl	r3, r2, r3
 7779 04b4 0AE0     		b	.L474
 7780              	.L475:
 7781              		.loc 2 3348 36 discriminator 5
 7782 04b6 3B68     		ldr	r3, [r7]
 7783 04b8 1A69     		ldr	r2, [r3, #16]
 7784 04ba 7B68     		ldr	r3, [r7, #4]
 7785 04bc 1B68     		ldr	r3, [r3]
 7786 04be DB68     		ldr	r3, [r3, #12]
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 357


 7787 04c0 9B08     		lsrs	r3, r3, #2
 7788 04c2 03F00403 		and	r3, r3, #4
 7789 04c6 5B00     		lsls	r3, r3, #1
 7790 04c8 02FA03F3 		lsl	r3, r2, r3
 7791              	.L474:
 7792              		.loc 2 3348 34 is_stmt 1 discriminator 8
 7793 04cc 3B64     		str	r3, [r7, #64]
3349:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowTh
 7794              		.loc 2 3349 36 discriminator 8
 7795 04ce 524B     		ldr	r3, .L489+4
 7796 04d0 1B68     		ldr	r3, [r3]
 7797 04d2 03F07043 		and	r3, r3, #-268435456
 7798 04d6 B3F1805F 		cmp	r3, #268435456
 7799 04da 0BD1     		bne	.L477
 7800              		.loc 2 3349 36 is_stmt 0 discriminator 1
 7801 04dc 3B68     		ldr	r3, [r7]
 7802 04de 5A69     		ldr	r2, [r3, #20]
 7803 04e0 7B68     		ldr	r3, [r7, #4]
 7804 04e2 1B68     		ldr	r3, [r3]
 7805 04e4 DB68     		ldr	r3, [r3, #12]
 7806 04e6 9B08     		lsrs	r3, r3, #2
 7807 04e8 03F00703 		and	r3, r3, #7
 7808 04ec 5B00     		lsls	r3, r3, #1
 7809 04ee 02FA03F3 		lsl	r3, r2, r3
 7810 04f2 1DE0     		b	.L478
 7811              	.L477:
 7812              		.loc 2 3349 36 discriminator 2
 7813 04f4 7B68     		ldr	r3, [r7, #4]
 7814 04f6 1B68     		ldr	r3, [r3]
 7815 04f8 DB68     		ldr	r3, [r3, #12]
 7816 04fa 03F01003 		and	r3, r3, #16
 7817 04fe 002B     		cmp	r3, #0
 7818 0500 0BD1     		bne	.L479
 7819              		.loc 2 3349 36 discriminator 4
 7820 0502 3B68     		ldr	r3, [r7]
 7821 0504 5A69     		ldr	r2, [r3, #20]
 7822 0506 7B68     		ldr	r3, [r7, #4]
 7823 0508 1B68     		ldr	r3, [r3]
 7824 050a DB68     		ldr	r3, [r3, #12]
 7825 050c 9B08     		lsrs	r3, r3, #2
 7826 050e 03F00703 		and	r3, r3, #7
 7827 0512 5B00     		lsls	r3, r3, #1
 7828 0514 02FA03F3 		lsl	r3, r2, r3
 7829 0518 0AE0     		b	.L478
 7830              	.L479:
 7831              		.loc 2 3349 36 discriminator 5
 7832 051a 3B68     		ldr	r3, [r7]
 7833 051c 5A69     		ldr	r2, [r3, #20]
 7834 051e 7B68     		ldr	r3, [r7, #4]
 7835 0520 1B68     		ldr	r3, [r3]
 7836 0522 DB68     		ldr	r3, [r3, #12]
 7837 0524 9B08     		lsrs	r3, r3, #2
 7838 0526 03F00403 		and	r3, r3, #4
 7839 052a 5B00     		lsls	r3, r3, #1
 7840 052c 02FA03F3 		lsl	r3, r2, r3
 7841              	.L478:
 7842              		.loc 2 3349 34 is_stmt 1 discriminator 8
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 358


 7843 0530 FB63     		str	r3, [r7, #60]
3350:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3351:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
3352:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (hadc->Instance == ADC3)
3353:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3354:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3355:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Analog watchdog thresholds configuration */
3356:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (AnalogWDGConfig->WatchdogNumber != ADC_ANALOGWATCHDOG_1)
3357:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3358:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Shift the offset with respect to the selected ADC resolution:        */
3359:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
3360:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* are set to 0.                                                        */
3361:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->H
3362:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->L
3363:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3364:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3365:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Set ADC analog watchdog thresholds value of both thresholds high and low */
3366:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHigh
3367:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3368:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3369:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3370:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
3371:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3372:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3373:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
3374:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3375:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Set ADC analog watchdog thresholds value of both thresholds high and low */
3376:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           MODIFY_REG(hadc->Instance->LTR2_DIFSEL,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
3377:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           MODIFY_REG(hadc->Instance->HTR2_CALFACT,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
3378:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3379:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         else
3380:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3381:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Set ADC analog watchdog thresholds value of both thresholds high and low */
3382:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           MODIFY_REG(hadc->Instance->LTR3_RES10,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
3383:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           MODIFY_REG(hadc->Instance->HTR3_RES11,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
3384:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3385:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3386:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
3387:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 7844              		.loc 2 3387 26 discriminator 8
 7845 0532 3B68     		ldr	r3, [r7]
 7846 0534 1B68     		ldr	r3, [r3]
 7847              		.loc 2 3387 10 discriminator 8
 7848 0536 374A     		ldr	r2, .L489
 7849 0538 9342     		cmp	r3, r2
 7850 053a 18D1     		bne	.L481
3388:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3389:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Set ADC analog watchdog thresholds value of both thresholds high and low */
3390:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->LTR2,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 7851              		.loc 2 3390 9
 7852 053c 7B68     		ldr	r3, [r7, #4]
 7853 053e 1B68     		ldr	r3, [r3]
 7854 0540 D3F8B030 		ldr	r3, [r3, #176]
 7855 0544 03F07C41 		and	r1, r3, #-67108864
 7856 0548 7B68     		ldr	r3, [r7, #4]
 7857 054a 1B68     		ldr	r3, [r3]
 7858 054c FA6B     		ldr	r2, [r7, #60]
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 359


 7859 054e 0A43     		orrs	r2, r2, r1
 7860 0550 C3F8B020 		str	r2, [r3, #176]
3391:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->HTR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 7861              		.loc 2 3391 9
 7862 0554 7B68     		ldr	r3, [r7, #4]
 7863 0556 1B68     		ldr	r3, [r3]
 7864 0558 D3F8B430 		ldr	r3, [r3, #180]
 7865 055c 03F07C41 		and	r1, r3, #-67108864
 7866 0560 7B68     		ldr	r3, [r7, #4]
 7867 0562 1B68     		ldr	r3, [r3]
 7868 0564 3A6C     		ldr	r2, [r7, #64]
 7869 0566 0A43     		orrs	r2, r2, r1
 7870 0568 C3F8B420 		str	r2, [r3, #180]
 7871 056c 17E0     		b	.L482
 7872              	.L481:
3392:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3393:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
3394:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3395:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Set ADC analog watchdog thresholds value of both thresholds high and low */
3396:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 7873              		.loc 2 3396 9
 7874 056e 7B68     		ldr	r3, [r7, #4]
 7875 0570 1B68     		ldr	r3, [r3]
 7876 0572 D3F8B830 		ldr	r3, [r3, #184]
 7877 0576 03F07C41 		and	r1, r3, #-67108864
 7878 057a 7B68     		ldr	r3, [r7, #4]
 7879 057c 1B68     		ldr	r3, [r3]
 7880 057e FA6B     		ldr	r2, [r7, #60]
 7881 0580 0A43     		orrs	r2, r2, r1
 7882 0582 C3F8B820 		str	r2, [r3, #184]
3397:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 7883              		.loc 2 3397 9
 7884 0586 7B68     		ldr	r3, [r7, #4]
 7885 0588 1B68     		ldr	r3, [r3]
 7886 058a D3F8BC30 		ldr	r3, [r3, #188]
 7887 058e 03F07C41 		and	r1, r3, #-67108864
 7888 0592 7B68     		ldr	r3, [r7, #4]
 7889 0594 1B68     		ldr	r3, [r3]
 7890 0596 3A6C     		ldr	r2, [r7, #64]
 7891 0598 0A43     		orrs	r2, r2, r1
 7892 059a C3F8BC20 		str	r2, [r3, #188]
 7893              	.L482:
3398:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3399:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3400:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif
3401:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 7894              		.loc 2 3401 26
 7895 059e 3B68     		ldr	r3, [r7]
 7896 05a0 1B68     		ldr	r3, [r3]
 7897              		.loc 2 3401 10
 7898 05a2 1C4A     		ldr	r2, .L489
 7899 05a4 9342     		cmp	r3, r2
 7900 05a6 1AD1     		bne	.L483
3402:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3403:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Update state, clear previous result related to AWD2 */
3404:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 7901              		.loc 2 3404 9
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 360


 7902 05a8 7B68     		ldr	r3, [r7, #4]
 7903 05aa 5B6D     		ldr	r3, [r3, #84]
 7904 05ac 23F40032 		bic	r2, r3, #131072
 7905 05b0 7B68     		ldr	r3, [r7, #4]
 7906 05b2 5A65     		str	r2, [r3, #84]
3405:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3406:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Clear flag ADC analog watchdog */
3407:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
3408:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
3409:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* (in case left enabled by previous ADC operations).                 */
3410:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         LL_ADC_ClearFlag_AWD2(hadc->Instance);
 7907              		.loc 2 3410 9
 7908 05b4 7B68     		ldr	r3, [r7, #4]
 7909 05b6 1B68     		ldr	r3, [r3]
 7910 05b8 1846     		mov	r0, r3
 7911 05ba FFF7FEFF 		bl	LL_ADC_ClearFlag_AWD2
3411:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3412:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Configure ADC analog watchdog interrupt */
3413:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (AnalogWDGConfig->ITMode == ENABLE)
 7912              		.loc 2 3413 28
 7913 05be 3B68     		ldr	r3, [r7]
 7914 05c0 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 7915              		.loc 2 3413 12
 7916 05c2 012B     		cmp	r3, #1
 7917 05c4 05D1     		bne	.L484
3414:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3415:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_EnableIT_AWD2(hadc->Instance);
 7918              		.loc 2 3415 11
 7919 05c6 7B68     		ldr	r3, [r7, #4]
 7920 05c8 1B68     		ldr	r3, [r3]
 7921 05ca 1846     		mov	r0, r3
 7922 05cc FFF7FEFF 		bl	LL_ADC_EnableIT_AWD2
3207:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 7923              		.loc 2 3207 8
 7924 05d0 2DE0     		b	.L486
 7925              	.L484:
3416:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3417:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         else
3418:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3419:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_DisableIT_AWD2(hadc->Instance);
 7926              		.loc 2 3419 11
 7927 05d2 7B68     		ldr	r3, [r7, #4]
 7928 05d4 1B68     		ldr	r3, [r3]
 7929 05d6 1846     		mov	r0, r3
 7930 05d8 FFF7FEFF 		bl	LL_ADC_DisableIT_AWD2
3207:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 7931              		.loc 2 3207 8
 7932 05dc 27E0     		b	.L486
 7933              	.L483:
3420:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3421:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3422:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
3423:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
3424:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3425:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Update state, clear previous result related to AWD3 */
3426:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 7934              		.loc 2 3426 9
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 361


 7935 05de 7B68     		ldr	r3, [r7, #4]
 7936 05e0 5B6D     		ldr	r3, [r3, #84]
 7937 05e2 23F48022 		bic	r2, r3, #262144
 7938 05e6 7B68     		ldr	r3, [r7, #4]
 7939 05e8 5A65     		str	r2, [r3, #84]
3427:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3428:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Clear flag ADC analog watchdog */
3429:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
3430:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
3431:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* (in case left enabled by previous ADC operations).                 */
3432:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         LL_ADC_ClearFlag_AWD3(hadc->Instance);
 7940              		.loc 2 3432 9
 7941 05ea 7B68     		ldr	r3, [r7, #4]
 7942 05ec 1B68     		ldr	r3, [r3]
 7943 05ee 1846     		mov	r0, r3
 7944 05f0 FFF7FEFF 		bl	LL_ADC_ClearFlag_AWD3
3433:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3434:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Configure ADC analog watchdog interrupt */
3435:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (AnalogWDGConfig->ITMode == ENABLE)
 7945              		.loc 2 3435 28
 7946 05f4 3B68     		ldr	r3, [r7]
 7947 05f6 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 7948              		.loc 2 3435 12
 7949 05f8 012B     		cmp	r3, #1
 7950 05fa 05D1     		bne	.L485
3436:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3437:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_EnableIT_AWD3(hadc->Instance);
 7951              		.loc 2 3437 11
 7952 05fc 7B68     		ldr	r3, [r7, #4]
 7953 05fe 1B68     		ldr	r3, [r3]
 7954 0600 1846     		mov	r0, r3
 7955 0602 FFF7FEFF 		bl	LL_ADC_EnableIT_AWD3
3207:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 7956              		.loc 2 3207 8
 7957 0606 12E0     		b	.L486
 7958              	.L485:
3438:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3439:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         else
3440:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3441:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_DisableIT_AWD3(hadc->Instance);
 7959              		.loc 2 3441 11
 7960 0608 7B68     		ldr	r3, [r7, #4]
 7961 060a 1B68     		ldr	r3, [r3]
 7962 060c 1846     		mov	r0, r3
 7963 060e FFF7FEFF 		bl	LL_ADC_DisableIT_AWD3
3207:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 7964              		.loc 2 3207 8
 7965 0612 0CE0     		b	.L486
 7966              	.L490:
 7967              		.align	2
 7968              	.L489:
 7969 0614 FFFF1F00 		.word	2097151
 7970 0618 0010005C 		.word	1543507968
 7971              	.L426:
3442:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3443:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3444:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 362


3445:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3446:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3447:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* If a conversion is on going on ADC group regular or injected, no update  */
3448:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* could be done on neither of the AWD configuration structure parameters.  */
3449:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
3450:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3451:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Update ADC state machine to error */
3452:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 7972              		.loc 2 3452 5
 7973 061c 7B68     		ldr	r3, [r7, #4]
 7974 061e 5B6D     		ldr	r3, [r3, #84]
 7975 0620 43F02002 		orr	r2, r3, #32
 7976 0624 7B68     		ldr	r3, [r7, #4]
 7977 0626 5A65     		str	r2, [r3, #84]
3453:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3454:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 7978              		.loc 2 3454 20
 7979 0628 0123     		movs	r3, #1
 7980 062a 87F84F30 		strb	r3, [r7, #79]
 7981              	.L486:
3455:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3456:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Process unlocked */
3457:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 7982              		.loc 2 3457 3
 7983 062e 7B68     		ldr	r3, [r7, #4]
 7984 0630 0022     		movs	r2, #0
 7985 0632 83F85020 		strb	r2, [r3, #80]
3458:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3459:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return function status */
3460:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return tmp_hal_status;
 7986              		.loc 2 3460 10
 7987 0636 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 7988              	.L425:
3461:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 7989              		.loc 2 3461 1
 7990 063a 1846     		mov	r0, r3
 7991 063c 5037     		adds	r7, r7, #80
 7992              	.LCFI327:
 7993              		.cfi_def_cfa_offset 8
 7994 063e BD46     		mov	sp, r7
 7995              	.LCFI328:
 7996              		.cfi_def_cfa_register 13
 7997              		@ sp needed
 7998 0640 80BD     		pop	{r7, pc}
 7999              		.cfi_endproc
 8000              	.LFE352:
 8002 0642 00BF     		.section	.text.HAL_ADC_GetState,"ax",%progbits
 8003              		.align	1
 8004              		.global	HAL_ADC_GetState
 8005              		.syntax unified
 8006              		.thumb
 8007              		.thumb_func
 8009              	HAL_ADC_GetState:
 8010              	.LFB353:
3462:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3463:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3464:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 363


3465:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @}
3466:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3467:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3468:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group4 Peripheral State functions
3469:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *  @brief    ADC Peripheral State functions
3470:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *
3471:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** @verbatim
3472:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****  ===============================================================================
3473:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ##### Peripheral state and errors functions #####
3474:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****  ===============================================================================
3475:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     [..]
3476:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     This subsection provides functions to get in run-time the status of the
3477:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     peripheral.
3478:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Check the ADC state
3479:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Check the ADC error code
3480:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3481:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** @endverbatim
3482:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @{
3483:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3484:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3485:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3486:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Return the ADC handle state.
3487:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   ADC state machine is managed by bitfields, ADC status must be
3488:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         compared with states bits.
3489:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         For example:
3490:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_REG_BUSY) != 0UL) "
3491:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
3492:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
3493:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval ADC handle state (bitfield on 32 bits)
3494:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3495:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
3496:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 8011              		.loc 2 3496 1
 8012              		.cfi_startproc
 8013              		@ args = 0, pretend = 0, frame = 8
 8014              		@ frame_needed = 1, uses_anonymous_args = 0
 8015              		@ link register save eliminated.
 8016 0000 80B4     		push	{r7}
 8017              	.LCFI329:
 8018              		.cfi_def_cfa_offset 4
 8019              		.cfi_offset 7, -4
 8020 0002 83B0     		sub	sp, sp, #12
 8021              	.LCFI330:
 8022              		.cfi_def_cfa_offset 16
 8023 0004 00AF     		add	r7, sp, #0
 8024              	.LCFI331:
 8025              		.cfi_def_cfa_register 7
 8026 0006 7860     		str	r0, [r7, #4]
3497:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
3498:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
3499:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3500:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return ADC handle state */
3501:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return hadc->State;
 8027              		.loc 2 3501 14
 8028 0008 7B68     		ldr	r3, [r7, #4]
 8029 000a 5B6D     		ldr	r3, [r3, #84]
3502:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 364


 8030              		.loc 2 3502 1
 8031 000c 1846     		mov	r0, r3
 8032 000e 0C37     		adds	r7, r7, #12
 8033              	.LCFI332:
 8034              		.cfi_def_cfa_offset 4
 8035 0010 BD46     		mov	sp, r7
 8036              	.LCFI333:
 8037              		.cfi_def_cfa_register 13
 8038              		@ sp needed
 8039 0012 5DF8047B 		ldr	r7, [sp], #4
 8040              	.LCFI334:
 8041              		.cfi_restore 7
 8042              		.cfi_def_cfa_offset 0
 8043 0016 7047     		bx	lr
 8044              		.cfi_endproc
 8045              	.LFE353:
 8047              		.section	.text.HAL_ADC_GetError,"ax",%progbits
 8048              		.align	1
 8049              		.global	HAL_ADC_GetError
 8050              		.syntax unified
 8051              		.thumb
 8052              		.thumb_func
 8054              	HAL_ADC_GetError:
 8055              	.LFB354:
3503:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3504:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3505:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Return the ADC error code.
3506:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
3507:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval ADC error code (bitfield on 32 bits)
3508:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3509:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
3510:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 8056              		.loc 2 3510 1
 8057              		.cfi_startproc
 8058              		@ args = 0, pretend = 0, frame = 8
 8059              		@ frame_needed = 1, uses_anonymous_args = 0
 8060              		@ link register save eliminated.
 8061 0000 80B4     		push	{r7}
 8062              	.LCFI335:
 8063              		.cfi_def_cfa_offset 4
 8064              		.cfi_offset 7, -4
 8065 0002 83B0     		sub	sp, sp, #12
 8066              	.LCFI336:
 8067              		.cfi_def_cfa_offset 16
 8068 0004 00AF     		add	r7, sp, #0
 8069              	.LCFI337:
 8070              		.cfi_def_cfa_register 7
 8071 0006 7860     		str	r0, [r7, #4]
3511:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
3512:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
3513:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3514:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return hadc->ErrorCode;
 8072              		.loc 2 3514 14
 8073 0008 7B68     		ldr	r3, [r7, #4]
 8074 000a 9B6D     		ldr	r3, [r3, #88]
3515:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 8075              		.loc 2 3515 1
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 365


 8076 000c 1846     		mov	r0, r3
 8077 000e 0C37     		adds	r7, r7, #12
 8078              	.LCFI338:
 8079              		.cfi_def_cfa_offset 4
 8080 0010 BD46     		mov	sp, r7
 8081              	.LCFI339:
 8082              		.cfi_def_cfa_register 13
 8083              		@ sp needed
 8084 0012 5DF8047B 		ldr	r7, [sp], #4
 8085              	.LCFI340:
 8086              		.cfi_restore 7
 8087              		.cfi_def_cfa_offset 0
 8088 0016 7047     		bx	lr
 8089              		.cfi_endproc
 8090              	.LFE354:
 8092              		.section	.text.ADC_ConversionStop,"ax",%progbits
 8093              		.align	1
 8094              		.global	ADC_ConversionStop
 8095              		.syntax unified
 8096              		.thumb
 8097              		.thumb_func
 8099              	ADC_ConversionStop:
 8100              	.LFB355:
3516:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3517:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3518:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @}
3519:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3520:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3521:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3522:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @}
3523:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3524:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3525:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
3526:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @{
3527:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3528:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3529:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3530:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Stop ADC conversion.
3531:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
3532:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param ConversionGroup ADC group regular and/or injected.
3533:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          This parameter can be one of the following values:
3534:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *            @arg @ref ADC_REGULAR_GROUP           ADC regular conversion type.
3535:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
3536:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
3537:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status.
3538:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3539:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
3540:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 8101              		.loc 2 3540 1
 8102              		.cfi_startproc
 8103              		@ args = 0, pretend = 0, frame = 32
 8104              		@ frame_needed = 1, uses_anonymous_args = 0
 8105 0000 80B5     		push	{r7, lr}
 8106              	.LCFI341:
 8107              		.cfi_def_cfa_offset 8
 8108              		.cfi_offset 7, -8
 8109              		.cfi_offset 14, -4
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 366


 8110 0002 88B0     		sub	sp, sp, #32
 8111              	.LCFI342:
 8112              		.cfi_def_cfa_offset 40
 8113 0004 00AF     		add	r7, sp, #0
 8114              	.LCFI343:
 8115              		.cfi_def_cfa_register 7
 8116 0006 7860     		str	r0, [r7, #4]
 8117 0008 3960     		str	r1, [r7]
3541:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tickstart;
3542:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8118              		.loc 2 3542 12
 8119 000a 0023     		movs	r3, #0
 8120 000c FB61     		str	r3, [r7, #28]
3543:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t conversion_group_reassigned = ConversionGroup;
 8121              		.loc 2 3543 12
 8122 000e 3B68     		ldr	r3, [r7]
 8123 0010 BB61     		str	r3, [r7, #24]
3544:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_ADC_CR_ADSTART_JADSTART;
3545:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
3546:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_injected;
3547:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3548:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
3549:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
3550:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
3551:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3552:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Verification if ADC is not already stopped (on regular and injected      */
3553:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* groups) to bypass this function if not needed.                           */
3554:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8124              		.loc 2 3554 44
 8125 0012 7B68     		ldr	r3, [r7, #4]
 8126 0014 1B68     		ldr	r3, [r3]
 8127 0016 1846     		mov	r0, r3
 8128 0018 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 8129 001c 3861     		str	r0, [r7, #16]
3555:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8130              		.loc 2 3555 45
 8131 001e 7B68     		ldr	r3, [r7, #4]
 8132 0020 1B68     		ldr	r3, [r3]
 8133 0022 1846     		mov	r0, r3
 8134 0024 FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 8135 0028 F860     		str	r0, [r7, #12]
3556:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8136              		.loc 2 3556 6
 8137 002a 3B69     		ldr	r3, [r7, #16]
 8138 002c 002B     		cmp	r3, #0
 8139 002e 03D1     		bne	.L496
3557:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8140              		.loc 2 3557 7
 8141 0030 FB68     		ldr	r3, [r7, #12]
 8142 0032 002B     		cmp	r3, #0
 8143 0034 00F09880 		beq	.L497
 8144              	.L496:
3558:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      )
3559:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3560:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Particular case of continuous auto-injection mode combined with        */
3561:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* auto-delay mode.                                                       */
3562:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 367


3563:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* injected group stop ADC_CR_JADSTP).                                    */
3564:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
3565:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* (see reference manual).                                                */
3566:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8145              		.loc 2 3566 15
 8146 0038 7B68     		ldr	r3, [r7, #4]
 8147 003a 1B68     		ldr	r3, [r3]
 8148              		.loc 2 3566 25
 8149 003c DB68     		ldr	r3, [r3, #12]
 8150              		.loc 2 3566 32
 8151 003e 03F00073 		and	r3, r3, #33554432
 8152              		.loc 2 3566 8
 8153 0042 002B     		cmp	r3, #0
 8154 0044 2AD0     		beq	.L498
3567:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         && (hadc->Init.ContinuousConvMode == ENABLE)
 8155              		.loc 2 3567 23
 8156 0046 7B68     		ldr	r3, [r7, #4]
 8157 0048 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
 8158              		.loc 2 3567 9
 8159 004a 012B     		cmp	r3, #1
 8160 004c 26D1     		bne	.L498
3568:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         && (hadc->Init.LowPowerAutoWait == ENABLE)
 8161              		.loc 2 3568 23
 8162 004e 7B68     		ldr	r3, [r7, #4]
 8163 0050 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 8164              		.loc 2 3568 9
 8165 0052 012B     		cmp	r3, #1
 8166 0054 22D1     		bne	.L498
3569:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        )
3570:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3571:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Use stop of regular group */
3572:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       conversion_group_reassigned = ADC_REGULAR_GROUP;
 8167              		.loc 2 3572 35
 8168 0056 0123     		movs	r3, #1
 8169 0058 BB61     		str	r3, [r7, #24]
3573:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3574:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
3575:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8170              		.loc 2 3575 13
 8171 005a 14E0     		b	.L499
 8172              	.L502:
3576:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3577:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8173              		.loc 2 3577 12
 8174 005c FB69     		ldr	r3, [r7, #28]
 8175 005e 454A     		ldr	r2, .L510
 8176 0060 9342     		cmp	r3, r2
 8177 0062 0DD9     		bls	.L500
3578:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3579:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Update ADC state machine to error */
3580:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8178              		.loc 2 3580 11
 8179 0064 7B68     		ldr	r3, [r7, #4]
 8180 0066 5B6D     		ldr	r3, [r3, #84]
 8181 0068 43F01002 		orr	r2, r3, #16
 8182 006c 7B68     		ldr	r3, [r7, #4]
 8183 006e 5A65     		str	r2, [r3, #84]
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 368


3581:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3582:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Set ADC error code to ADC peripheral internal error */
3583:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8184              		.loc 2 3583 11
 8185 0070 7B68     		ldr	r3, [r7, #4]
 8186 0072 9B6D     		ldr	r3, [r3, #88]
 8187 0074 43F00102 		orr	r2, r3, #1
 8188 0078 7B68     		ldr	r3, [r7, #4]
 8189 007a 9A65     		str	r2, [r3, #88]
3584:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3585:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           return HAL_ERROR;
 8190              		.loc 2 3585 18
 8191 007c 0123     		movs	r3, #1
 8192 007e 74E0     		b	.L501
 8193              	.L500:
3586:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3587:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         Conversion_Timeout_CPU_cycles ++;
 8194              		.loc 2 3587 39
 8195 0080 FB69     		ldr	r3, [r7, #28]
 8196 0082 0133     		adds	r3, r3, #1
 8197 0084 FB61     		str	r3, [r7, #28]
 8198              	.L499:
3575:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 8199              		.loc 2 3575 14
 8200 0086 7B68     		ldr	r3, [r7, #4]
 8201 0088 1B68     		ldr	r3, [r3]
 8202 008a 1B68     		ldr	r3, [r3]
 8203 008c 03F04003 		and	r3, r3, #64
3575:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 8204              		.loc 2 3575 13
 8205 0090 402B     		cmp	r3, #64
 8206 0092 E3D1     		bne	.L502
3588:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3589:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3590:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Clear JEOS */
3591:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8207              		.loc 2 3591 7
 8208 0094 7B68     		ldr	r3, [r7, #4]
 8209 0096 1B68     		ldr	r3, [r3]
 8210 0098 4022     		movs	r2, #64
 8211 009a 1A60     		str	r2, [r3]
 8212              	.L498:
3592:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3593:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3594:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Stop potential conversion on going on ADC group regular */
3595:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8213              		.loc 2 3595 8
 8214 009c BB69     		ldr	r3, [r7, #24]
 8215 009e 022B     		cmp	r3, #2
 8216 00a0 14D0     		beq	.L503
3596:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3597:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
3598:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8217              		.loc 2 3598 11
 8218 00a2 7B68     		ldr	r3, [r7, #4]
 8219 00a4 1B68     		ldr	r3, [r3]
 8220 00a6 1846     		mov	r0, r3
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 369


 8221 00a8 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 8222 00ac 0346     		mov	r3, r0
 8223              		.loc 2 3598 10
 8224 00ae 002B     		cmp	r3, #0
 8225 00b0 0CD0     		beq	.L503
3599:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3600:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8226              		.loc 2 3600 13
 8227 00b2 7B68     		ldr	r3, [r7, #4]
 8228 00b4 1B68     		ldr	r3, [r3]
 8229 00b6 1846     		mov	r0, r3
 8230 00b8 FFF7FEFF 		bl	LL_ADC_IsDisableOngoing
 8231 00bc 0346     		mov	r3, r0
 8232              		.loc 2 3600 12
 8233 00be 002B     		cmp	r3, #0
 8234 00c0 04D1     		bne	.L503
3601:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3602:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Stop ADC group regular conversion */
3603:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_REG_StopConversion(hadc->Instance);
 8235              		.loc 2 3603 11
 8236 00c2 7B68     		ldr	r3, [r7, #4]
 8237 00c4 1B68     		ldr	r3, [r3]
 8238 00c6 1846     		mov	r0, r3
 8239 00c8 FFF7FEFF 		bl	LL_ADC_REG_StopConversion
 8240              	.L503:
3604:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3605:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3606:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3607:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3608:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Stop potential conversion on going on ADC group injected */
3609:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8241              		.loc 2 3609 8
 8242 00cc BB69     		ldr	r3, [r7, #24]
 8243 00ce 012B     		cmp	r3, #1
 8244 00d0 14D0     		beq	.L504
3610:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3611:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
3612:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8245              		.loc 2 3612 11
 8246 00d2 7B68     		ldr	r3, [r7, #4]
 8247 00d4 1B68     		ldr	r3, [r3]
 8248 00d6 1846     		mov	r0, r3
 8249 00d8 FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 8250 00dc 0346     		mov	r3, r0
 8251              		.loc 2 3612 10
 8252 00de 002B     		cmp	r3, #0
 8253 00e0 0CD0     		beq	.L504
3613:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3614:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8254              		.loc 2 3614 13
 8255 00e2 7B68     		ldr	r3, [r7, #4]
 8256 00e4 1B68     		ldr	r3, [r3]
 8257 00e6 1846     		mov	r0, r3
 8258 00e8 FFF7FEFF 		bl	LL_ADC_IsDisableOngoing
 8259 00ec 0346     		mov	r3, r0
 8260              		.loc 2 3614 12
 8261 00ee 002B     		cmp	r3, #0
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 370


 8262 00f0 04D1     		bne	.L504
3615:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3616:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Stop ADC group injected conversion */
3617:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_INJ_StopConversion(hadc->Instance);
 8263              		.loc 2 3617 11
 8264 00f2 7B68     		ldr	r3, [r7, #4]
 8265 00f4 1B68     		ldr	r3, [r3]
 8266 00f6 1846     		mov	r0, r3
 8267 00f8 FFF7FEFF 		bl	LL_ADC_INJ_StopConversion
 8268              	.L504:
3618:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3619:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3620:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3621:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3622:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Selection of start and stop bits with respect to the regular or injected group */
3623:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     switch (conversion_group_reassigned)
 8269              		.loc 2 3623 5
 8270 00fc BB69     		ldr	r3, [r7, #24]
 8271 00fe 022B     		cmp	r3, #2
 8272 0100 05D0     		beq	.L505
 8273 0102 BB69     		ldr	r3, [r7, #24]
 8274 0104 032B     		cmp	r3, #3
 8275 0106 05D1     		bne	.L506
3624:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3625:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_REGULAR_INJECTED_GROUP:
3626:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8276              		.loc 2 3626 37
 8277 0108 0C23     		movs	r3, #12
 8278 010a 7B61     		str	r3, [r7, #20]
3627:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
 8279              		.loc 2 3627 9
 8280 010c 05E0     		b	.L507
 8281              	.L505:
3628:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_INJECTED_GROUP:
3629:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8282              		.loc 2 3629 37
 8283 010e 0823     		movs	r3, #8
 8284 0110 7B61     		str	r3, [r7, #20]
3630:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
 8285              		.loc 2 3630 9
 8286 0112 02E0     		b	.L507
 8287              	.L506:
3631:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Case ADC_REGULAR_GROUP only*/
3632:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       default:
3633:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8288              		.loc 2 3633 37
 8289 0114 0423     		movs	r3, #4
 8290 0116 7B61     		str	r3, [r7, #20]
3634:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
 8291              		.loc 2 3634 9
 8292 0118 00BF     		nop
 8293              	.L507:
3635:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3636:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3637:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Wait for conversion effectively stopped */
3638:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tickstart = HAL_GetTick();
 8294              		.loc 2 3638 17
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 371


 8295 011a FFF7FEFF 		bl	HAL_GetTick
 8296 011e B860     		str	r0, [r7, #8]
3639:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3640:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8297              		.loc 2 3640 11
 8298 0120 1BE0     		b	.L508
 8299              	.L509:
3641:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3642:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8300              		.loc 2 3642 12
 8301 0122 FFF7FEFF 		bl	HAL_GetTick
 8302 0126 0246     		mov	r2, r0
 8303              		.loc 2 3642 26
 8304 0128 BB68     		ldr	r3, [r7, #8]
 8305 012a D31A     		subs	r3, r2, r3
 8306              		.loc 2 3642 10
 8307 012c 052B     		cmp	r3, #5
 8308 012e 14D9     		bls	.L508
3643:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3644:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* New check to avoid false timeout detection in case of preemption */
3645:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8309              		.loc 2 3645 17
 8310 0130 7B68     		ldr	r3, [r7, #4]
 8311 0132 1B68     		ldr	r3, [r3]
 8312              		.loc 2 3645 27
 8313 0134 9A68     		ldr	r2, [r3, #8]
 8314              		.loc 2 3645 32
 8315 0136 7B69     		ldr	r3, [r7, #20]
 8316 0138 1340     		ands	r3, r3, r2
 8317              		.loc 2 3645 11
 8318 013a 002B     		cmp	r3, #0
 8319 013c 0DD0     		beq	.L508
3646:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3647:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Update ADC state machine to error */
3648:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8320              		.loc 2 3648 11
 8321 013e 7B68     		ldr	r3, [r7, #4]
 8322 0140 5B6D     		ldr	r3, [r3, #84]
 8323 0142 43F01002 		orr	r2, r3, #16
 8324 0146 7B68     		ldr	r3, [r7, #4]
 8325 0148 5A65     		str	r2, [r3, #84]
3649:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3650:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Set ADC error code to ADC peripheral internal error */
3651:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8326              		.loc 2 3651 11
 8327 014a 7B68     		ldr	r3, [r7, #4]
 8328 014c 9B6D     		ldr	r3, [r3, #88]
 8329 014e 43F00102 		orr	r2, r3, #1
 8330 0152 7B68     		ldr	r3, [r7, #4]
 8331 0154 9A65     		str	r2, [r3, #88]
3652:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3653:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           return HAL_ERROR;
 8332              		.loc 2 3653 18
 8333 0156 0123     		movs	r3, #1
 8334 0158 07E0     		b	.L501
 8335              	.L508:
3640:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 372


 8336              		.loc 2 3640 17
 8337 015a 7B68     		ldr	r3, [r7, #4]
 8338 015c 1B68     		ldr	r3, [r3]
3640:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 8339              		.loc 2 3640 27
 8340 015e 9A68     		ldr	r2, [r3, #8]
3640:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 8341              		.loc 2 3640 32
 8342 0160 7B69     		ldr	r3, [r7, #20]
 8343 0162 1340     		ands	r3, r3, r2
3640:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 8344              		.loc 2 3640 11
 8345 0164 002B     		cmp	r3, #0
 8346 0166 DCD1     		bne	.L509
 8347              	.L497:
3654:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3655:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3656:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3657:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3658:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3659:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3660:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return HAL status */
3661:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return HAL_OK;
 8348              		.loc 2 3661 10
 8349 0168 0023     		movs	r3, #0
 8350              	.L501:
3662:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 8351              		.loc 2 3662 1
 8352 016a 1846     		mov	r0, r3
 8353 016c 2037     		adds	r7, r7, #32
 8354              	.LCFI344:
 8355              		.cfi_def_cfa_offset 8
 8356 016e BD46     		mov	sp, r7
 8357              	.LCFI345:
 8358              		.cfi_def_cfa_register 13
 8359              		@ sp needed
 8360 0170 80BD     		pop	{r7, pc}
 8361              	.L511:
 8362 0172 00BF     		.align	2
 8363              	.L510:
 8364 0174 FFDB0C00 		.word	842751
 8365              		.cfi_endproc
 8366              	.LFE355:
 8368              		.section	.text.ADC_Enable,"ax",%progbits
 8369              		.align	1
 8370              		.global	ADC_Enable
 8371              		.syntax unified
 8372              		.thumb
 8373              		.thumb_func
 8375              	ADC_Enable:
 8376              	.LFB356:
3663:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3664:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3665:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3666:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3667:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Enable the selected ADC.
3668:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC must be disabled
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 373


3669:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
3670:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
3671:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status.
3672:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3673:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
3674:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 8377              		.loc 2 3674 1
 8378              		.cfi_startproc
 8379              		@ args = 0, pretend = 0, frame = 16
 8380              		@ frame_needed = 1, uses_anonymous_args = 0
 8381 0000 80B5     		push	{r7, lr}
 8382              	.LCFI346:
 8383              		.cfi_def_cfa_offset 8
 8384              		.cfi_offset 7, -8
 8385              		.cfi_offset 14, -4
 8386 0002 84B0     		sub	sp, sp, #16
 8387              	.LCFI347:
 8388              		.cfi_def_cfa_offset 24
 8389 0004 00AF     		add	r7, sp, #0
 8390              	.LCFI348:
 8391              		.cfi_def_cfa_register 7
 8392 0006 7860     		str	r0, [r7, #4]
3675:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tickstart;
3676:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3677:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
3678:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* enabling phase not yet completed: flag ADC ready not yet set).           */
3679:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
3680:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* causes: ADC clock not running, ...).                                     */
3681:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8393              		.loc 2 3681 7
 8394 0008 7B68     		ldr	r3, [r7, #4]
 8395 000a 1B68     		ldr	r3, [r3]
 8396 000c 1846     		mov	r0, r3
 8397 000e FFF7FEFF 		bl	LL_ADC_IsEnabled
 8398 0012 0346     		mov	r3, r0
 8399              		.loc 2 3681 6
 8400 0014 002B     		cmp	r3, #0
 8401 0016 6ED1     		bne	.L513
 8402              	.LBB99:
3682:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3683:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Check if conditions to enable the ADC are fulfilled */
3684:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_
 8403              		.loc 2 3684 14
 8404 0018 7B68     		ldr	r3, [r7, #4]
 8405 001a 1B68     		ldr	r3, [r3]
 8406              		.loc 2 3684 24
 8407 001c 9A68     		ldr	r2, [r3, #8]
 8408              		.loc 2 3684 29
 8409 001e 384B     		ldr	r3, .L525
 8410 0020 1340     		ands	r3, r3, r2
 8411              		.loc 2 3684 8
 8412 0022 002B     		cmp	r3, #0
 8413 0024 0DD0     		beq	.L514
3685:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3686:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Update ADC state machine to error */
3687:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8414              		.loc 2 3687 7
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 374


 8415 0026 7B68     		ldr	r3, [r7, #4]
 8416 0028 5B6D     		ldr	r3, [r3, #84]
 8417 002a 43F01002 		orr	r2, r3, #16
 8418 002e 7B68     		ldr	r3, [r7, #4]
 8419 0030 5A65     		str	r2, [r3, #84]
3688:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3689:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC error code to ADC peripheral internal error */
3690:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8420              		.loc 2 3690 7
 8421 0032 7B68     		ldr	r3, [r7, #4]
 8422 0034 9B6D     		ldr	r3, [r3, #88]
 8423 0036 43F00102 		orr	r2, r3, #1
 8424 003a 7B68     		ldr	r3, [r7, #4]
 8425 003c 9A65     		str	r2, [r3, #88]
3691:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3692:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       return HAL_ERROR;
 8426              		.loc 2 3692 14
 8427 003e 0123     		movs	r3, #1
 8428 0040 5AE0     		b	.L515
 8429              	.L514:
3693:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3694:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3695:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Enable the ADC peripheral */
3696:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     LL_ADC_Enable(hadc->Instance);
 8430              		.loc 2 3696 5
 8431 0042 7B68     		ldr	r3, [r7, #4]
 8432 0044 1B68     		ldr	r3, [r3]
 8433 0046 1846     		mov	r0, r3
 8434 0048 FFF7FEFF 		bl	LL_ADC_Enable
3697:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3698:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Wait for ADC effectively enabled */
3699:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tickstart = HAL_GetTick();
 8435              		.loc 2 3699 17
 8436 004c FFF7FEFF 		bl	HAL_GetTick
 8437 0050 F860     		str	r0, [r7, #12]
3700:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3701:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Poll for ADC ready flag raised except case of multimode enabled
3702:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        and ADC slave selected. */
3703:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8438              		.loc 2 3703 57
 8439 0052 7B68     		ldr	r3, [r7, #4]
 8440 0054 1B68     		ldr	r3, [r3]
 8441              		.loc 2 3703 37
 8442 0056 2B4A     		ldr	r2, .L525+4
 8443 0058 9342     		cmp	r3, r2
 8444 005a 04D0     		beq	.L516
 8445              		.loc 2 3703 57 discriminator 2
 8446 005c 7B68     		ldr	r3, [r7, #4]
 8447 005e 1B68     		ldr	r3, [r3]
 8448 0060 294A     		ldr	r2, .L525+8
 8449 0062 9342     		cmp	r3, r2
 8450 0064 01D1     		bne	.L517
 8451              	.L516:
 8452              		.loc 2 3703 37 discriminator 3
 8453 0066 294B     		ldr	r3, .L525+12
 8454 0068 00E0     		b	.L518
 8455              	.L517:
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 375


 8456              		.loc 2 3703 37 is_stmt 0 discriminator 4
 8457 006a 294B     		ldr	r3, .L525+16
 8458              	.L518:
 8459              		.loc 2 3703 37 discriminator 6
 8460 006c 1846     		mov	r0, r3
 8461 006e FFF7FEFF 		bl	LL_ADC_GetMultimode
 8462 0072 B860     		str	r0, [r7, #8]
3704:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8463              		.loc 2 3704 10 is_stmt 1 discriminator 6
 8464 0074 7B68     		ldr	r3, [r7, #4]
 8465 0076 1B68     		ldr	r3, [r3]
 8466 0078 234A     		ldr	r2, .L525+8
 8467 007a 9342     		cmp	r3, r2
 8468 007c 02D0     		beq	.L519
 8469              		.loc 2 3704 10 is_stmt 0 discriminator 1
 8470 007e 7B68     		ldr	r3, [r7, #4]
 8471 0080 1B68     		ldr	r3, [r3]
 8472 0082 00E0     		b	.L520
 8473              	.L519:
 8474              		.loc 2 3704 10 discriminator 2
 8475 0084 1F4B     		ldr	r3, .L525+4
 8476              	.L520:
 8477              		.loc 2 3704 64 is_stmt 1 discriminator 4
 8478 0086 7A68     		ldr	r2, [r7, #4]
 8479 0088 1268     		ldr	r2, [r2]
 8480              		.loc 2 3704 8 discriminator 4
 8481 008a 9342     		cmp	r3, r2
 8482 008c 2CD0     		beq	.L522
3705:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8483              		.loc 2 3705 9
 8484 008e BB68     		ldr	r3, [r7, #8]
 8485 0090 002B     		cmp	r3, #0
 8486 0092 30D1     		bne	.L513
3706:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        )
3707:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3708:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8487              		.loc 2 3708 13
 8488 0094 28E0     		b	.L522
 8489              	.L524:
3709:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3710:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*  If ADEN bit is set less than 4 ADC clock cycles after the ADCAL bit
3711:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             has been cleared (after a calibration), ADEN bit is reset by the
3712:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             calibration logic.
3713:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             The workaround is to continue setting ADEN until ADRDY is becomes 1.
3714:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
3715:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             4 ADC clock cycle duration */
3716:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Note: Test of ADC enabled required due to hardware constraint to     */
3717:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*       not enable ADC if already enabled.                             */
3718:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8490              		.loc 2 3718 13
 8491 0096 7B68     		ldr	r3, [r7, #4]
 8492 0098 1B68     		ldr	r3, [r3]
 8493 009a 1846     		mov	r0, r3
 8494 009c FFF7FEFF 		bl	LL_ADC_IsEnabled
 8495 00a0 0346     		mov	r3, r0
 8496              		.loc 2 3718 12
 8497 00a2 002B     		cmp	r3, #0
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 376


 8498 00a4 04D1     		bne	.L523
3719:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3720:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_Enable(hadc->Instance);
 8499              		.loc 2 3720 11
 8500 00a6 7B68     		ldr	r3, [r7, #4]
 8501 00a8 1B68     		ldr	r3, [r3]
 8502 00aa 1846     		mov	r0, r3
 8503 00ac FFF7FEFF 		bl	LL_ADC_Enable
 8504              	.L523:
3721:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3722:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3723:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8505              		.loc 2 3723 14
 8506 00b0 FFF7FEFF 		bl	HAL_GetTick
 8507 00b4 0246     		mov	r2, r0
 8508              		.loc 2 3723 28
 8509 00b6 FB68     		ldr	r3, [r7, #12]
 8510 00b8 D31A     		subs	r3, r2, r3
 8511              		.loc 2 3723 12
 8512 00ba 022B     		cmp	r3, #2
 8513 00bc 14D9     		bls	.L522
3724:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3725:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* New check to avoid false timeout detection in case of preemption */
3726:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8514              		.loc 2 3726 15
 8515 00be 7B68     		ldr	r3, [r7, #4]
 8516 00c0 1B68     		ldr	r3, [r3]
 8517 00c2 1B68     		ldr	r3, [r3]
 8518 00c4 03F00103 		and	r3, r3, #1
 8519              		.loc 2 3726 14
 8520 00c8 012B     		cmp	r3, #1
 8521 00ca 0DD0     		beq	.L522
3727:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
3728:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* Update ADC state machine to error */
3729:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8522              		.loc 2 3729 13
 8523 00cc 7B68     		ldr	r3, [r7, #4]
 8524 00ce 5B6D     		ldr	r3, [r3, #84]
 8525 00d0 43F01002 		orr	r2, r3, #16
 8526 00d4 7B68     		ldr	r3, [r7, #4]
 8527 00d6 5A65     		str	r2, [r3, #84]
3730:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3731:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* Set ADC error code to ADC peripheral internal error */
3732:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8528              		.loc 2 3732 13
 8529 00d8 7B68     		ldr	r3, [r7, #4]
 8530 00da 9B6D     		ldr	r3, [r3, #88]
 8531 00dc 43F00102 		orr	r2, r3, #1
 8532 00e0 7B68     		ldr	r3, [r7, #4]
 8533 00e2 9A65     		str	r2, [r3, #88]
3733:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3734:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             return HAL_ERROR;
 8534              		.loc 2 3734 20
 8535 00e4 0123     		movs	r3, #1
 8536 00e6 07E0     		b	.L515
 8537              	.L522:
3708:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 377


 8538              		.loc 2 3708 14
 8539 00e8 7B68     		ldr	r3, [r7, #4]
 8540 00ea 1B68     		ldr	r3, [r3]
 8541 00ec 1B68     		ldr	r3, [r3]
 8542 00ee 03F00103 		and	r3, r3, #1
3708:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 8543              		.loc 2 3708 13
 8544 00f2 012B     		cmp	r3, #1
 8545 00f4 CFD1     		bne	.L524
 8546              	.L513:
 8547              	.LBE99:
3735:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3736:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3737:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3738:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3739:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3740:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3741:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return HAL status */
3742:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return HAL_OK;
 8548              		.loc 2 3742 10
 8549 00f6 0023     		movs	r3, #0
 8550              	.L515:
3743:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 8551              		.loc 2 3743 1
 8552 00f8 1846     		mov	r0, r3
 8553 00fa 1037     		adds	r7, r7, #16
 8554              	.LCFI349:
 8555              		.cfi_def_cfa_offset 8
 8556 00fc BD46     		mov	sp, r7
 8557              	.LCFI350:
 8558              		.cfi_def_cfa_register 13
 8559              		@ sp needed
 8560 00fe 80BD     		pop	{r7, pc}
 8561              	.L526:
 8562              		.align	2
 8563              	.L525:
 8564 0100 3F000080 		.word	-2147483585
 8565 0104 00200240 		.word	1073881088
 8566 0108 00210240 		.word	1073881344
 8567 010c 00230240 		.word	1073881856
 8568 0110 00630258 		.word	1476551424
 8569              		.cfi_endproc
 8570              	.LFE356:
 8572              		.section	.text.ADC_Disable,"ax",%progbits
 8573              		.align	1
 8574              		.global	ADC_Disable
 8575              		.syntax unified
 8576              		.thumb
 8577              		.thumb_func
 8579              	ADC_Disable:
 8580              	.LFB357:
3744:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3745:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3746:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Disable the selected ADC.
3747:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
3748:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         stopped.
3749:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 378


3750:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status.
3751:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3752:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
3753:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 8581              		.loc 2 3753 1
 8582              		.cfi_startproc
 8583              		@ args = 0, pretend = 0, frame = 16
 8584              		@ frame_needed = 1, uses_anonymous_args = 0
 8585 0000 80B5     		push	{r7, lr}
 8586              	.LCFI351:
 8587              		.cfi_def_cfa_offset 8
 8588              		.cfi_offset 7, -8
 8589              		.cfi_offset 14, -4
 8590 0002 84B0     		sub	sp, sp, #16
 8591              	.LCFI352:
 8592              		.cfi_def_cfa_offset 24
 8593 0004 00AF     		add	r7, sp, #0
 8594              	.LCFI353:
 8595              		.cfi_def_cfa_register 7
 8596 0006 7860     		str	r0, [r7, #4]
3754:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tickstart;
3755:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8597              		.loc 2 3755 48
 8598 0008 7B68     		ldr	r3, [r7, #4]
 8599 000a 1B68     		ldr	r3, [r3]
 8600 000c 1846     		mov	r0, r3
 8601 000e FFF7FEFF 		bl	LL_ADC_IsDisableOngoing
 8602 0012 F860     		str	r0, [r7, #12]
3756:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3757:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Verification if ADC is not already disabled:                             */
3758:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
3759:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /*       disabled.                                                          */
3760:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8603              		.loc 2 3760 8
 8604 0014 7B68     		ldr	r3, [r7, #4]
 8605 0016 1B68     		ldr	r3, [r3]
 8606 0018 1846     		mov	r0, r3
 8607 001a FFF7FEFF 		bl	LL_ADC_IsEnabled
 8608 001e 0346     		mov	r3, r0
 8609              		.loc 2 3760 6
 8610 0020 002B     		cmp	r3, #0
 8611 0022 47D0     		beq	.L528
3761:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       && (tmp_adc_is_disable_on_going == 0UL)
 8612              		.loc 2 3761 7
 8613 0024 FB68     		ldr	r3, [r7, #12]
 8614 0026 002B     		cmp	r3, #0
 8615 0028 44D1     		bne	.L528
3762:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      )
3763:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3764:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Check if conditions to disable the ADC are fulfilled */
3765:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8616              		.loc 2 3765 14
 8617 002a 7B68     		ldr	r3, [r7, #4]
 8618 002c 1B68     		ldr	r3, [r3]
 8619              		.loc 2 3765 24
 8620 002e 9B68     		ldr	r3, [r3, #8]
 8621              		.loc 2 3765 29
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 379


 8622 0030 03F00D03 		and	r3, r3, #13
 8623              		.loc 2 3765 8
 8624 0034 012B     		cmp	r3, #1
 8625 0036 0CD1     		bne	.L529
3766:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3767:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Disable the ADC peripheral */
3768:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       LL_ADC_Disable(hadc->Instance);
 8626              		.loc 2 3768 7
 8627 0038 7B68     		ldr	r3, [r7, #4]
 8628 003a 1B68     		ldr	r3, [r3]
 8629 003c 1846     		mov	r0, r3
 8630 003e FFF7FEFF 		bl	LL_ADC_Disable
3769:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8631              		.loc 2 3769 7
 8632 0042 7B68     		ldr	r3, [r7, #4]
 8633 0044 1B68     		ldr	r3, [r3]
 8634 0046 0322     		movs	r2, #3
 8635 0048 1A60     		str	r2, [r3]
3770:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3771:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
3772:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3773:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Update ADC state machine to error */
3774:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
3775:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3776:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC error code to ADC peripheral internal error */
3777:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
3778:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3779:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       return HAL_ERROR;
3780:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3781:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3782:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Wait for ADC effectively disabled */
3783:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Get tick count */
3784:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tickstart = HAL_GetTick();
 8636              		.loc 2 3784 17
 8637 004a FFF7FEFF 		bl	HAL_GetTick
 8638 004e B860     		str	r0, [r7, #8]
3785:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3786:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8639              		.loc 2 3786 11
 8640 0050 29E0     		b	.L532
 8641              	.L529:
3774:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 8642              		.loc 2 3774 7
 8643 0052 7B68     		ldr	r3, [r7, #4]
 8644 0054 5B6D     		ldr	r3, [r3, #84]
 8645 0056 43F01002 		orr	r2, r3, #16
 8646 005a 7B68     		ldr	r3, [r7, #4]
 8647 005c 5A65     		str	r2, [r3, #84]
3777:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 8648              		.loc 2 3777 7
 8649 005e 7B68     		ldr	r3, [r7, #4]
 8650 0060 9B6D     		ldr	r3, [r3, #88]
 8651 0062 43F00102 		orr	r2, r3, #1
 8652 0066 7B68     		ldr	r3, [r7, #4]
 8653 0068 9A65     		str	r2, [r3, #88]
3779:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 8654              		.loc 2 3779 14
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 380


 8655 006a 0123     		movs	r3, #1
 8656 006c 23E0     		b	.L531
 8657              	.L533:
3787:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3788:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8658              		.loc 2 3788 12
 8659 006e FFF7FEFF 		bl	HAL_GetTick
 8660 0072 0246     		mov	r2, r0
 8661              		.loc 2 3788 26
 8662 0074 BB68     		ldr	r3, [r7, #8]
 8663 0076 D31A     		subs	r3, r2, r3
 8664              		.loc 2 3788 10
 8665 0078 022B     		cmp	r3, #2
 8666 007a 14D9     		bls	.L532
3789:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3790:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* New check to avoid false timeout detection in case of preemption */
3791:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8667              		.loc 2 3791 18
 8668 007c 7B68     		ldr	r3, [r7, #4]
 8669 007e 1B68     		ldr	r3, [r3]
 8670              		.loc 2 3791 28
 8671 0080 9B68     		ldr	r3, [r3, #8]
 8672              		.loc 2 3791 33
 8673 0082 03F00103 		and	r3, r3, #1
 8674              		.loc 2 3791 12
 8675 0086 002B     		cmp	r3, #0
 8676 0088 0DD0     		beq	.L532
3792:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3793:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Update ADC state machine to error */
3794:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8677              		.loc 2 3794 11
 8678 008a 7B68     		ldr	r3, [r7, #4]
 8679 008c 5B6D     		ldr	r3, [r3, #84]
 8680 008e 43F01002 		orr	r2, r3, #16
 8681 0092 7B68     		ldr	r3, [r7, #4]
 8682 0094 5A65     		str	r2, [r3, #84]
3795:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3796:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Set ADC error code to ADC peripheral internal error */
3797:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8683              		.loc 2 3797 11
 8684 0096 7B68     		ldr	r3, [r7, #4]
 8685 0098 9B6D     		ldr	r3, [r3, #88]
 8686 009a 43F00102 		orr	r2, r3, #1
 8687 009e 7B68     		ldr	r3, [r7, #4]
 8688 00a0 9A65     		str	r2, [r3, #88]
3798:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3799:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           return HAL_ERROR;
 8689              		.loc 2 3799 18
 8690 00a2 0123     		movs	r3, #1
 8691 00a4 07E0     		b	.L531
 8692              	.L532:
3786:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 8693              		.loc 2 3786 17
 8694 00a6 7B68     		ldr	r3, [r7, #4]
 8695 00a8 1B68     		ldr	r3, [r3]
3786:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 8696              		.loc 2 3786 27
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 381


 8697 00aa 9B68     		ldr	r3, [r3, #8]
3786:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 8698              		.loc 2 3786 32
 8699 00ac 03F00103 		and	r3, r3, #1
3786:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 8700              		.loc 2 3786 11
 8701 00b0 002B     		cmp	r3, #0
 8702 00b2 DCD1     		bne	.L533
 8703              	.L528:
3800:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3801:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3802:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3803:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3804:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3805:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return HAL status */
3806:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return HAL_OK;
 8704              		.loc 2 3806 10
 8705 00b4 0023     		movs	r3, #0
 8706              	.L531:
3807:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 8707              		.loc 2 3807 1
 8708 00b6 1846     		mov	r0, r3
 8709 00b8 1037     		adds	r7, r7, #16
 8710              	.LCFI354:
 8711              		.cfi_def_cfa_offset 8
 8712 00ba BD46     		mov	sp, r7
 8713              	.LCFI355:
 8714              		.cfi_def_cfa_register 13
 8715              		@ sp needed
 8716 00bc 80BD     		pop	{r7, pc}
 8717              		.cfi_endproc
 8718              	.LFE357:
 8720              		.section	.text.ADC_DMAConvCplt,"ax",%progbits
 8721              		.align	1
 8722              		.global	ADC_DMAConvCplt
 8723              		.syntax unified
 8724              		.thumb
 8725              		.thumb_func
 8727              	ADC_DMAConvCplt:
 8728              	.LFB358:
3808:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3809:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3810:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  DMA transfer complete callback.
3811:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hdma pointer to DMA handle.
3812:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval None
3813:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3814:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
3815:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 8729              		.loc 2 3815 1
 8730              		.cfi_startproc
 8731              		@ args = 0, pretend = 0, frame = 16
 8732              		@ frame_needed = 1, uses_anonymous_args = 0
 8733 0000 80B5     		push	{r7, lr}
 8734              	.LCFI356:
 8735              		.cfi_def_cfa_offset 8
 8736              		.cfi_offset 7, -8
 8737              		.cfi_offset 14, -4
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 382


 8738 0002 84B0     		sub	sp, sp, #16
 8739              	.LCFI357:
 8740              		.cfi_def_cfa_offset 24
 8741 0004 00AF     		add	r7, sp, #0
 8742              	.LCFI358:
 8743              		.cfi_def_cfa_register 7
 8744 0006 7860     		str	r0, [r7, #4]
3816:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
3817:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8745              		.loc 2 3817 22
 8746 0008 7B68     		ldr	r3, [r7, #4]
 8747 000a 9B6B     		ldr	r3, [r3, #56]
 8748 000c FB60     		str	r3, [r7, #12]
3818:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3819:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Update state machine on conversion status if not in error state */
3820:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8749              		.loc 2 3820 12
 8750 000e FB68     		ldr	r3, [r7, #12]
 8751 0010 5B6D     		ldr	r3, [r3, #84]
 8752              		.loc 2 3820 20
 8753 0012 03F05003 		and	r3, r3, #80
 8754              		.loc 2 3820 6
 8755 0016 002B     		cmp	r3, #0
 8756 0018 4BD1     		bne	.L535
3821:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3822:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Set ADC state */
3823:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8757              		.loc 2 3823 5
 8758 001a FB68     		ldr	r3, [r7, #12]
 8759 001c 5B6D     		ldr	r3, [r3, #84]
 8760 001e 43F40072 		orr	r2, r3, #512
 8761 0022 FB68     		ldr	r3, [r7, #12]
 8762 0024 5A65     		str	r2, [r3, #84]
3824:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3825:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
3826:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going         */
3827:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* to disable interruption.                                               */
3828:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Is it the end of the regular sequence ? */
3829:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8763              		.loc 2 3829 14
 8764 0026 FB68     		ldr	r3, [r7, #12]
 8765 0028 1B68     		ldr	r3, [r3]
 8766              		.loc 2 3829 24
 8767 002a 1B68     		ldr	r3, [r3]
 8768              		.loc 2 3829 30
 8769 002c 03F00803 		and	r3, r3, #8
 8770              		.loc 2 3829 8
 8771 0030 002B     		cmp	r3, #0
 8772 0032 21D0     		beq	.L536
3830:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3831:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Are conversions software-triggered ? */
3832:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8773              		.loc 2 3832 11
 8774 0034 FB68     		ldr	r3, [r7, #12]
 8775 0036 1B68     		ldr	r3, [r3]
 8776 0038 1846     		mov	r0, r3
 8777 003a FFF7FEFF 		bl	LL_ADC_REG_IsTriggerSourceSWStart
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 383


 8778 003e 0346     		mov	r3, r0
 8779              		.loc 2 3832 10
 8780 0040 002B     		cmp	r3, #0
 8781 0042 32D0     		beq	.L537
3833:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3834:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Is CONT bit set ? */
3835:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8782              		.loc 2 3835 13
 8783 0044 FB68     		ldr	r3, [r7, #12]
 8784 0046 1B68     		ldr	r3, [r3]
 8785 0048 DB68     		ldr	r3, [r3, #12]
 8786 004a 03F40053 		and	r3, r3, #8192
 8787              		.loc 2 3835 12
 8788 004e 002B     		cmp	r3, #0
 8789 0050 2BD1     		bne	.L537
3836:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3837:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* CONT bit is not set, no more conversions expected */
3838:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8790              		.loc 2 3838 11
 8791 0052 FB68     		ldr	r3, [r7, #12]
 8792 0054 5B6D     		ldr	r3, [r3, #84]
 8793 0056 23F48072 		bic	r2, r3, #256
 8794 005a FB68     		ldr	r3, [r7, #12]
 8795 005c 5A65     		str	r2, [r3, #84]
3839:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8796              		.loc 2 3839 20
 8797 005e FB68     		ldr	r3, [r7, #12]
 8798 0060 5B6D     		ldr	r3, [r3, #84]
 8799              		.loc 2 3839 28
 8800 0062 03F48053 		and	r3, r3, #4096
 8801              		.loc 2 3839 14
 8802 0066 002B     		cmp	r3, #0
 8803 0068 1FD1     		bne	.L537
3840:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
3841:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8804              		.loc 2 3841 13
 8805 006a FB68     		ldr	r3, [r7, #12]
 8806 006c 5B6D     		ldr	r3, [r3, #84]
 8807 006e 43F00102 		orr	r2, r3, #1
 8808 0072 FB68     		ldr	r3, [r7, #12]
 8809 0074 5A65     		str	r2, [r3, #84]
 8810 0076 18E0     		b	.L537
 8811              	.L536:
3842:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3843:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3844:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3845:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3846:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
3847:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3848:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* DMA End of Transfer interrupt was triggered but conversions sequence
3849:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          is not over. If DMACFG is set to 0, conversions are stopped. */
3850:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8812              		.loc 2 3850 11
 8813 0078 FB68     		ldr	r3, [r7, #12]
 8814 007a 1B68     		ldr	r3, [r3]
 8815 007c DB68     		ldr	r3, [r3, #12]
 8816 007e 03F00303 		and	r3, r3, #3
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 384


 8817              		.loc 2 3850 10
 8818 0082 002B     		cmp	r3, #0
 8819 0084 11D1     		bne	.L537
3851:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3852:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* DMACFG bit is not set, conversions are stopped. */
3853:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8820              		.loc 2 3853 9
 8821 0086 FB68     		ldr	r3, [r7, #12]
 8822 0088 5B6D     		ldr	r3, [r3, #84]
 8823 008a 23F48072 		bic	r2, r3, #256
 8824 008e FB68     		ldr	r3, [r7, #12]
 8825 0090 5A65     		str	r2, [r3, #84]
3854:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8826              		.loc 2 3854 18
 8827 0092 FB68     		ldr	r3, [r7, #12]
 8828 0094 5B6D     		ldr	r3, [r3, #84]
 8829              		.loc 2 3854 26
 8830 0096 03F48053 		and	r3, r3, #4096
 8831              		.loc 2 3854 12
 8832 009a 002B     		cmp	r3, #0
 8833 009c 05D1     		bne	.L537
3855:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3856:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8834              		.loc 2 3856 11
 8835 009e FB68     		ldr	r3, [r7, #12]
 8836 00a0 5B6D     		ldr	r3, [r3, #84]
 8837 00a2 43F00102 		orr	r2, r3, #1
 8838 00a6 FB68     		ldr	r3, [r7, #12]
 8839 00a8 5A65     		str	r2, [r3, #84]
 8840              	.L537:
3857:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3858:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3859:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3860:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3861:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Conversion complete callback */
3862:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
3863:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->ConvCpltCallback(hadc);
3864:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
3865:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
 8841              		.loc 2 3865 5
 8842 00aa F868     		ldr	r0, [r7, #12]
 8843 00ac FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
3866:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
3867:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3868:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else /* DMA and-or internal error occurred */
3869:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3870:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
3871:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3872:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Call HAL ADC Error Callback function */
3873:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
3874:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       hadc->ErrorCallback(hadc);
3875:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
3876:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       HAL_ADC_ErrorCallback(hadc);
3877:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
3878:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3879:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
3880:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 385


3881:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Call ADC DMA error callback */
3882:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       hadc->DMA_Handle->XferErrorCallback(hdma);
3883:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3884:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3885:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 8844              		.loc 2 3885 1
 8845 00b0 0EE0     		b	.L540
 8846              	.L535:
3870:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 8847              		.loc 2 3870 14
 8848 00b2 FB68     		ldr	r3, [r7, #12]
 8849 00b4 5B6D     		ldr	r3, [r3, #84]
3870:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 8850              		.loc 2 3870 22
 8851 00b6 03F01003 		and	r3, r3, #16
3870:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 8852              		.loc 2 3870 8
 8853 00ba 002B     		cmp	r3, #0
 8854 00bc 03D0     		beq	.L539
3876:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 8855              		.loc 2 3876 7
 8856 00be F868     		ldr	r0, [r7, #12]
 8857 00c0 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 8858              		.loc 2 3885 1
 8859 00c4 04E0     		b	.L540
 8860              	.L539:
3882:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 8861              		.loc 2 3882 11
 8862 00c6 FB68     		ldr	r3, [r7, #12]
 8863 00c8 DB6C     		ldr	r3, [r3, #76]
3882:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 8864              		.loc 2 3882 23
 8865 00ca DB6C     		ldr	r3, [r3, #76]
3882:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 8866              		.loc 2 3882 7
 8867 00cc 7868     		ldr	r0, [r7, #4]
 8868 00ce 9847     		blx	r3
 8869              	.LVL0:
 8870              	.L540:
 8871              		.loc 2 3885 1
 8872 00d0 00BF     		nop
 8873 00d2 1037     		adds	r7, r7, #16
 8874              	.LCFI359:
 8875              		.cfi_def_cfa_offset 8
 8876 00d4 BD46     		mov	sp, r7
 8877              	.LCFI360:
 8878              		.cfi_def_cfa_register 13
 8879              		@ sp needed
 8880 00d6 80BD     		pop	{r7, pc}
 8881              		.cfi_endproc
 8882              	.LFE358:
 8884              		.section	.text.ADC_DMAHalfConvCplt,"ax",%progbits
 8885              		.align	1
 8886              		.global	ADC_DMAHalfConvCplt
 8887              		.syntax unified
 8888              		.thumb
 8889              		.thumb_func
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 386


 8891              	ADC_DMAHalfConvCplt:
 8892              	.LFB359:
3886:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3887:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3888:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  DMA half transfer complete callback.
3889:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hdma pointer to DMA handle.
3890:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval None
3891:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3892:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
3893:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 8893              		.loc 2 3893 1
 8894              		.cfi_startproc
 8895              		@ args = 0, pretend = 0, frame = 16
 8896              		@ frame_needed = 1, uses_anonymous_args = 0
 8897 0000 80B5     		push	{r7, lr}
 8898              	.LCFI361:
 8899              		.cfi_def_cfa_offset 8
 8900              		.cfi_offset 7, -8
 8901              		.cfi_offset 14, -4
 8902 0002 84B0     		sub	sp, sp, #16
 8903              	.LCFI362:
 8904              		.cfi_def_cfa_offset 24
 8905 0004 00AF     		add	r7, sp, #0
 8906              	.LCFI363:
 8907              		.cfi_def_cfa_register 7
 8908 0006 7860     		str	r0, [r7, #4]
3894:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
3895:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8909              		.loc 2 3895 22
 8910 0008 7B68     		ldr	r3, [r7, #4]
 8911 000a 9B6B     		ldr	r3, [r3, #56]
 8912 000c FB60     		str	r3, [r7, #12]
3896:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3897:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Half conversion callback */
3898:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
3899:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   hadc->ConvHalfCpltCallback(hadc);
3900:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
3901:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_ADC_ConvHalfCpltCallback(hadc);
 8913              		.loc 2 3901 3
 8914 000e F868     		ldr	r0, [r7, #12]
 8915 0010 FFF7FEFF 		bl	HAL_ADC_ConvHalfCpltCallback
3902:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
3903:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 8916              		.loc 2 3903 1
 8917 0014 00BF     		nop
 8918 0016 1037     		adds	r7, r7, #16
 8919              	.LCFI364:
 8920              		.cfi_def_cfa_offset 8
 8921 0018 BD46     		mov	sp, r7
 8922              	.LCFI365:
 8923              		.cfi_def_cfa_register 13
 8924              		@ sp needed
 8925 001a 80BD     		pop	{r7, pc}
 8926              		.cfi_endproc
 8927              	.LFE359:
 8929              		.section	.text.ADC_DMAError,"ax",%progbits
 8930              		.align	1
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 387


 8931              		.global	ADC_DMAError
 8932              		.syntax unified
 8933              		.thumb
 8934              		.thumb_func
 8936              	ADC_DMAError:
 8937              	.LFB360:
3904:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3905:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3906:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  DMA error callback.
3907:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hdma pointer to DMA handle.
3908:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval None
3909:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3910:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** void ADC_DMAError(DMA_HandleTypeDef *hdma)
3911:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 8938              		.loc 2 3911 1
 8939              		.cfi_startproc
 8940              		@ args = 0, pretend = 0, frame = 16
 8941              		@ frame_needed = 1, uses_anonymous_args = 0
 8942 0000 80B5     		push	{r7, lr}
 8943              	.LCFI366:
 8944              		.cfi_def_cfa_offset 8
 8945              		.cfi_offset 7, -8
 8946              		.cfi_offset 14, -4
 8947 0002 84B0     		sub	sp, sp, #16
 8948              	.LCFI367:
 8949              		.cfi_def_cfa_offset 24
 8950 0004 00AF     		add	r7, sp, #0
 8951              	.LCFI368:
 8952              		.cfi_def_cfa_register 7
 8953 0006 7860     		str	r0, [r7, #4]
3912:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
3913:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8954              		.loc 2 3913 22
 8955 0008 7B68     		ldr	r3, [r7, #4]
 8956 000a 9B6B     		ldr	r3, [r3, #56]
 8957 000c FB60     		str	r3, [r7, #12]
3914:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3915:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Set ADC state */
3916:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8958              		.loc 2 3916 3
 8959 000e FB68     		ldr	r3, [r7, #12]
 8960 0010 5B6D     		ldr	r3, [r3, #84]
 8961 0012 43F04002 		orr	r2, r3, #64
 8962 0016 FB68     		ldr	r3, [r7, #12]
 8963 0018 5A65     		str	r2, [r3, #84]
3917:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3918:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Set ADC error code to DMA error */
3919:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8964              		.loc 2 3919 3
 8965 001a FB68     		ldr	r3, [r7, #12]
 8966 001c 9B6D     		ldr	r3, [r3, #88]
 8967 001e 43F00402 		orr	r2, r3, #4
 8968 0022 FB68     		ldr	r3, [r7, #12]
 8969 0024 9A65     		str	r2, [r3, #88]
3920:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3921:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Error callback */
3922:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 388


3923:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   hadc->ErrorCallback(hadc);
3924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
3925:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_ADC_ErrorCallback(hadc);
 8970              		.loc 2 3925 3
 8971 0026 F868     		ldr	r0, [r7, #12]
 8972 0028 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
3926:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
3927:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 8973              		.loc 2 3927 1
 8974 002c 00BF     		nop
 8975 002e 1037     		adds	r7, r7, #16
 8976              	.LCFI369:
 8977              		.cfi_def_cfa_offset 8
 8978 0030 BD46     		mov	sp, r7
 8979              	.LCFI370:
 8980              		.cfi_def_cfa_register 13
 8981              		@ sp needed
 8982 0032 80BD     		pop	{r7, pc}
 8983              		.cfi_endproc
 8984              	.LFE360:
 8986              		.section	.text.ADC_ConfigureBoostMode,"ax",%progbits
 8987              		.align	1
 8988              		.global	ADC_ConfigureBoostMode
 8989              		.syntax unified
 8990              		.thumb
 8991              		.thumb_func
 8993              	ADC_ConfigureBoostMode:
 8994              	.LFB361:
3928:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3929:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3930:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Configure boost mode of selected ADC.
3931:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
3932:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         stopped.
3933:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param  hadc ADC handle
3934:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval None.
3935:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3936:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
3937:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 8995              		.loc 2 3937 1
 8996              		.cfi_startproc
 8997              		@ args = 0, pretend = 0, frame = 16
 8998              		@ frame_needed = 1, uses_anonymous_args = 0
 8999 0000 80B5     		push	{r7, lr}
 9000              	.LCFI371:
 9001              		.cfi_def_cfa_offset 8
 9002              		.cfi_offset 7, -8
 9003              		.cfi_offset 14, -4
 9004 0002 84B0     		sub	sp, sp, #16
 9005              	.LCFI372:
 9006              		.cfi_def_cfa_offset 24
 9007 0004 00AF     		add	r7, sp, #0
 9008              	.LCFI373:
 9009              		.cfi_def_cfa_register 7
 9010 0006 7860     		str	r0, [r7, #4]
3938:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t freq;
3939:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 9011              		.loc 2 3939 7
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 389


 9012 0008 7B68     		ldr	r3, [r7, #4]
 9013 000a 1B68     		ldr	r3, [r3]
 9014 000c 794A     		ldr	r2, .L569
 9015 000e 9342     		cmp	r3, r2
 9016 0010 04D0     		beq	.L544
 9017              		.loc 2 3939 7 is_stmt 0 discriminator 2
 9018 0012 7B68     		ldr	r3, [r7, #4]
 9019 0014 1B68     		ldr	r3, [r3]
 9020 0016 784A     		ldr	r2, .L569+4
 9021 0018 9342     		cmp	r3, r2
 9022 001a 09D1     		bne	.L545
 9023              	.L544:
 9024              		.loc 2 3939 7 discriminator 3
 9025 001c 774B     		ldr	r3, .L569+8
 9026 001e 9B68     		ldr	r3, [r3, #8]
 9027 0020 03F44033 		and	r3, r3, #196608
 9028 0024 002B     		cmp	r3, #0
 9029 0026 14BF     		ite	ne
 9030 0028 0123     		movne	r3, #1
 9031 002a 0023     		moveq	r3, #0
 9032 002c DBB2     		uxtb	r3, r3
 9033 002e 08E0     		b	.L546
 9034              	.L545:
 9035              		.loc 2 3939 7 discriminator 4
 9036 0030 734B     		ldr	r3, .L569+12
 9037 0032 9B68     		ldr	r3, [r3, #8]
 9038 0034 03F44033 		and	r3, r3, #196608
 9039 0038 002B     		cmp	r3, #0
 9040 003a 14BF     		ite	ne
 9041 003c 0123     		movne	r3, #1
 9042 003e 0023     		moveq	r3, #0
 9043 0040 DBB2     		uxtb	r3, r3
 9044              	.L546:
 9045              		.loc 2 3939 6 is_stmt 1 discriminator 6
 9046 0042 002B     		cmp	r3, #0
 9047 0044 1CD0     		beq	.L547
3940:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3941:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     freq = HAL_RCC_GetHCLKFreq();
 9048              		.loc 2 3941 12
 9049 0046 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 9050 004a F860     		str	r0, [r7, #12]
3942:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     switch (hadc->Init.ClockPrescaler)
 9051              		.loc 2 3942 23
 9052 004c 7B68     		ldr	r3, [r7, #4]
 9053 004e 5B68     		ldr	r3, [r3, #4]
 9054              		.loc 2 3942 5
 9055 0050 B3F5403F 		cmp	r3, #196608
 9056 0054 10D0     		beq	.L548
 9057 0056 B3F5403F 		cmp	r3, #196608
 9058 005a 71D8     		bhi	.L566
 9059 005c B3F5803F 		cmp	r3, #65536
 9060 0060 02D0     		beq	.L550
 9061 0062 B3F5003F 		cmp	r3, #131072
 9062 0066 6BD1     		bne	.L566
 9063              	.L550:
3943:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3944:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_SYNC_PCLK_DIV1:
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 390


3945:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_SYNC_PCLK_DIV2:
3946:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 9064              		.loc 2 3946 28
 9065 0068 7B68     		ldr	r3, [r7, #4]
 9066 006a 5B68     		ldr	r3, [r3, #4]
 9067              		.loc 2 3946 44
 9068 006c 1B0C     		lsrs	r3, r3, #16
 9069              		.loc 2 3946 14
 9070 006e FA68     		ldr	r2, [r7, #12]
 9071 0070 B2FBF3F3 		udiv	r3, r2, r3
 9072 0074 FB60     		str	r3, [r7, #12]
3947:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
 9073              		.loc 2 3947 9
 9074 0076 66E0     		b	.L552
 9075              	.L548:
3948:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_SYNC_PCLK_DIV4:
3949:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         freq /= 4UL;
 9076              		.loc 2 3949 14
 9077 0078 FB68     		ldr	r3, [r7, #12]
 9078 007a 9B08     		lsrs	r3, r3, #2
 9079 007c FB60     		str	r3, [r7, #12]
3950:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
 9080              		.loc 2 3950 9
 9081 007e 62E0     		b	.L552
 9082              	.L547:
3951:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       default:
3952:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
3953:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3954:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3955:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
3956:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3957:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 9083              		.loc 2 3957 12
 9084 0080 4FF40020 		mov	r0, #524288
 9085 0084 FFF7FEFF 		bl	HAL_RCCEx_GetPeriphCLKFreq
 9086 0088 F860     		str	r0, [r7, #12]
3958:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     switch (hadc->Init.ClockPrescaler)
 9087              		.loc 2 3958 23
 9088 008a 7B68     		ldr	r3, [r7, #4]
 9089 008c 5B68     		ldr	r3, [r3, #4]
 9090              		.loc 2 3958 5
 9091 008e B3F5301F 		cmp	r3, #2883584
 9092 0092 51D0     		beq	.L553
 9093 0094 B3F5301F 		cmp	r3, #2883584
 9094 0098 54D8     		bhi	.L567
 9095 009a B3F5201F 		cmp	r3, #2621440
 9096 009e 47D0     		beq	.L555
 9097 00a0 B3F5201F 		cmp	r3, #2621440
 9098 00a4 4ED8     		bhi	.L567
 9099 00a6 B3F5101F 		cmp	r3, #2359296
 9100 00aa 3DD0     		beq	.L556
 9101 00ac B3F5101F 		cmp	r3, #2359296
 9102 00b0 48D8     		bhi	.L567
 9103 00b2 B3F5001F 		cmp	r3, #2097152
 9104 00b6 33D0     		beq	.L557
 9105 00b8 B3F5001F 		cmp	r3, #2097152
 9106 00bc 42D8     		bhi	.L567
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 391


 9107 00be B3F5E01F 		cmp	r3, #1835008
 9108 00c2 29D0     		beq	.L558
 9109 00c4 B3F5E01F 		cmp	r3, #1835008
 9110 00c8 3CD8     		bhi	.L567
 9111 00ca B3F5C01F 		cmp	r3, #1572864
 9112 00ce 1AD0     		beq	.L559
 9113 00d0 B3F5C01F 		cmp	r3, #1572864
 9114 00d4 36D8     		bhi	.L567
 9115 00d6 B3F5A01F 		cmp	r3, #1310720
 9116 00da 14D0     		beq	.L559
 9117 00dc B3F5A01F 		cmp	r3, #1310720
 9118 00e0 30D8     		bhi	.L567
 9119 00e2 B3F5801F 		cmp	r3, #1048576
 9120 00e6 0ED0     		beq	.L559
 9121 00e8 B3F5801F 		cmp	r3, #1048576
 9122 00ec 2AD8     		bhi	.L567
 9123 00ee B3F5402F 		cmp	r3, #786432
 9124 00f2 08D0     		beq	.L559
 9125 00f4 B3F5402F 		cmp	r3, #786432
 9126 00f8 24D8     		bhi	.L567
 9127 00fa B3F5802F 		cmp	r3, #262144
 9128 00fe 02D0     		beq	.L559
 9129 0100 B3F5002F 		cmp	r3, #524288
 9130 0104 1ED1     		bne	.L567
 9131              	.L559:
3959:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3960:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV2:
3961:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV4:
3962:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV6:
3963:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV8:
3964:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV10:
3965:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV12:
3966:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 9132              		.loc 2 3966 29
 9133 0106 7B68     		ldr	r3, [r7, #4]
 9134 0108 5B68     		ldr	r3, [r3, #4]
 9135              		.loc 2 3966 45
 9136 010a 9B0C     		lsrs	r3, r3, #18
 9137              		.loc 2 3966 67
 9138 010c 5B00     		lsls	r3, r3, #1
 9139              		.loc 2 3966 14
 9140 010e FA68     		ldr	r2, [r7, #12]
 9141 0110 B2FBF3F3 		udiv	r3, r2, r3
 9142 0114 FB60     		str	r3, [r7, #12]
3967:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
 9143              		.loc 2 3967 9
 9144 0116 16E0     		b	.L552
 9145              	.L558:
3968:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV16:
3969:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         freq /= 16UL;
 9146              		.loc 2 3969 14
 9147 0118 FB68     		ldr	r3, [r7, #12]
 9148 011a 1B09     		lsrs	r3, r3, #4
 9149 011c FB60     		str	r3, [r7, #12]
3970:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
 9150              		.loc 2 3970 9
 9151 011e 12E0     		b	.L552
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 392


 9152              	.L557:
3971:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV32:
3972:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         freq /= 32UL;
 9153              		.loc 2 3972 14
 9154 0120 FB68     		ldr	r3, [r7, #12]
 9155 0122 5B09     		lsrs	r3, r3, #5
 9156 0124 FB60     		str	r3, [r7, #12]
3973:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
 9157              		.loc 2 3973 9
 9158 0126 0EE0     		b	.L552
 9159              	.L556:
3974:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV64:
3975:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         freq /= 64UL;
 9160              		.loc 2 3975 14
 9161 0128 FB68     		ldr	r3, [r7, #12]
 9162 012a 9B09     		lsrs	r3, r3, #6
 9163 012c FB60     		str	r3, [r7, #12]
3976:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
 9164              		.loc 2 3976 9
 9165 012e 0AE0     		b	.L552
 9166              	.L555:
3977:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV128:
3978:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         freq /= 128UL;
 9167              		.loc 2 3978 14
 9168 0130 FB68     		ldr	r3, [r7, #12]
 9169 0132 DB09     		lsrs	r3, r3, #7
 9170 0134 FB60     		str	r3, [r7, #12]
3979:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
 9171              		.loc 2 3979 9
 9172 0136 06E0     		b	.L552
 9173              	.L553:
3980:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV256:
3981:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         freq /= 256UL;
 9174              		.loc 2 3981 14
 9175 0138 FB68     		ldr	r3, [r7, #12]
 9176 013a 1B0A     		lsrs	r3, r3, #8
 9177 013c FB60     		str	r3, [r7, #12]
3982:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
 9178              		.loc 2 3982 9
 9179 013e 02E0     		b	.L552
 9180              	.L566:
3952:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 9181              		.loc 2 3952 9
 9182 0140 00BF     		nop
 9183 0142 00E0     		b	.L552
 9184              	.L567:
3983:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       default:
3984:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
 9185              		.loc 2 3984 9
 9186 0144 00BF     		nop
 9187              	.L552:
3985:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3986:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3987:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3988:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
3989:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   freq /= 2U;
3990:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (freq <= 6250000UL)
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 393


3991:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3992:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
3993:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3994:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else if (freq <= 12500000UL)
3995:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3996:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
3997:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3998:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else if (freq <= 25000000UL)
3999:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
4000:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
4001:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
4002:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else /* if(freq > 25000000UL) */
4003:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
4004:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
4005:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
4006:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
4007:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 9188              		.loc 2 4007 7
 9189 0146 FFF7FEFF 		bl	HAL_GetREVID
 9190 014a 0346     		mov	r3, r0
 9191              		.loc 2 4007 6
 9192 014c 41F20302 		movw	r2, #4099
 9193 0150 9342     		cmp	r3, r2
 9194 0152 15D8     		bhi	.L560
4008:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
4009:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (freq > 20000000UL)
 9195              		.loc 2 4009 8
 9196 0154 FB68     		ldr	r3, [r7, #12]
 9197 0156 2B4A     		ldr	r2, .L569+16
 9198 0158 9342     		cmp	r3, r2
 9199 015a 08D9     		bls	.L561
4010:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
4011:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 9200              		.loc 2 4011 7
 9201 015c 7B68     		ldr	r3, [r7, #4]
 9202 015e 1B68     		ldr	r3, [r3]
 9203 0160 9A68     		ldr	r2, [r3, #8]
 9204 0162 7B68     		ldr	r3, [r7, #4]
 9205 0164 1B68     		ldr	r3, [r3]
 9206 0166 42F48072 		orr	r2, r2, #256
 9207 016a 9A60     		str	r2, [r3, #8]
4012:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
4013:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
4014:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
4015:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
4016:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
4017:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
4018:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else /* STM32H7 silicon Rev.V */
4019:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
4020:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     freq /= 2U; /* divider by 2 for Rev.V */
4021:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
4022:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (freq <= 6250000UL)
4023:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
4024:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
4025:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
4026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else if (freq <= 12500000UL)
4027:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 394


4028:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
4029:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
4030:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else if (freq <= 25000000UL)
4031:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
4032:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
4033:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
4034:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else /* if(freq > 25000000UL) */
4035:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
4036:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
4037:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
4038:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
4039:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* ADC_VER_V5_3 */
4040:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 9208              		.loc 2 4040 1
 9209 016c 3EE0     		b	.L568
 9210              	.L561:
4015:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 9211              		.loc 2 4015 7
 9212 016e 7B68     		ldr	r3, [r7, #4]
 9213 0170 1B68     		ldr	r3, [r3]
 9214 0172 9A68     		ldr	r2, [r3, #8]
 9215 0174 7B68     		ldr	r3, [r7, #4]
 9216 0176 1B68     		ldr	r3, [r3]
 9217 0178 22F48072 		bic	r2, r2, #256
 9218 017c 9A60     		str	r2, [r3, #8]
 9219              		.loc 2 4040 1
 9220 017e 35E0     		b	.L568
 9221              	.L560:
4020:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 9222              		.loc 2 4020 10
 9223 0180 FB68     		ldr	r3, [r7, #12]
 9224 0182 5B08     		lsrs	r3, r3, #1
 9225 0184 FB60     		str	r3, [r7, #12]
4022:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 9226              		.loc 2 4022 8
 9227 0186 FB68     		ldr	r3, [r7, #12]
 9228 0188 1F4A     		ldr	r2, .L569+20
 9229 018a 9342     		cmp	r3, r2
 9230 018c 08D8     		bhi	.L563
4024:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 9231              		.loc 2 4024 7
 9232 018e 7B68     		ldr	r3, [r7, #4]
 9233 0190 1B68     		ldr	r3, [r3]
 9234 0192 9A68     		ldr	r2, [r3, #8]
 9235 0194 7B68     		ldr	r3, [r7, #4]
 9236 0196 1B68     		ldr	r3, [r3]
 9237 0198 22F44072 		bic	r2, r2, #768
 9238 019c 9A60     		str	r2, [r3, #8]
 9239              		.loc 2 4040 1
 9240 019e 25E0     		b	.L568
 9241              	.L563:
4026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 9242              		.loc 2 4026 13
 9243 01a0 FB68     		ldr	r3, [r7, #12]
 9244 01a2 1A4A     		ldr	r2, .L569+24
 9245 01a4 9342     		cmp	r3, r2
 9246 01a6 0AD8     		bhi	.L564
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 395


4028:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 9247              		.loc 2 4028 7
 9248 01a8 7B68     		ldr	r3, [r7, #4]
 9249 01aa 1B68     		ldr	r3, [r3]
 9250 01ac 9B68     		ldr	r3, [r3, #8]
 9251 01ae 23F44072 		bic	r2, r3, #768
 9252 01b2 7B68     		ldr	r3, [r7, #4]
 9253 01b4 1B68     		ldr	r3, [r3]
 9254 01b6 42F48072 		orr	r2, r2, #256
 9255 01ba 9A60     		str	r2, [r3, #8]
 9256              		.loc 2 4040 1
 9257 01bc 16E0     		b	.L568
 9258              	.L564:
4030:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 9259              		.loc 2 4030 13
 9260 01be FB68     		ldr	r3, [r7, #12]
 9261 01c0 134A     		ldr	r2, .L569+28
 9262 01c2 9342     		cmp	r3, r2
 9263 01c4 0AD8     		bhi	.L565
4032:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 9264              		.loc 2 4032 7
 9265 01c6 7B68     		ldr	r3, [r7, #4]
 9266 01c8 1B68     		ldr	r3, [r3]
 9267 01ca 9B68     		ldr	r3, [r3, #8]
 9268 01cc 23F44072 		bic	r2, r3, #768
 9269 01d0 7B68     		ldr	r3, [r7, #4]
 9270 01d2 1B68     		ldr	r3, [r3]
 9271 01d4 42F40072 		orr	r2, r2, #512
 9272 01d8 9A60     		str	r2, [r3, #8]
 9273              		.loc 2 4040 1
 9274 01da 07E0     		b	.L568
 9275              	.L565:
4036:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 9276              		.loc 2 4036 7
 9277 01dc 7B68     		ldr	r3, [r7, #4]
 9278 01de 1B68     		ldr	r3, [r3]
 9279 01e0 9A68     		ldr	r2, [r3, #8]
 9280 01e2 7B68     		ldr	r3, [r7, #4]
 9281 01e4 1B68     		ldr	r3, [r3]
 9282 01e6 42F44072 		orr	r2, r2, #768
 9283 01ea 9A60     		str	r2, [r3, #8]
 9284              	.L568:
 9285              		.loc 2 4040 1
 9286 01ec 00BF     		nop
 9287 01ee 1037     		adds	r7, r7, #16
 9288              	.LCFI374:
 9289              		.cfi_def_cfa_offset 8
 9290 01f0 BD46     		mov	sp, r7
 9291              	.LCFI375:
 9292              		.cfi_def_cfa_register 13
 9293              		@ sp needed
 9294 01f2 80BD     		pop	{r7, pc}
 9295              	.L570:
 9296              		.align	2
 9297              	.L569:
 9298 01f4 00200240 		.word	1073881088
 9299 01f8 00210240 		.word	1073881344
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 396


 9300 01fc 00230240 		.word	1073881856
 9301 0200 00630258 		.word	1476551424
 9302 0204 002D3101 		.word	20000000
 9303 0208 105E5F00 		.word	6250000
 9304 020c 20BCBE00 		.word	12500000
 9305 0210 40787D01 		.word	25000000
 9306              		.cfi_endproc
 9307              	.LFE361:
 9309              		.text
 9310              	.Letext0:
 9311              		.file 4 "/Users/seojisu/Library/Arm-GCC-xPack/arm-none-eabi/include/machine/_default_types.h"
 9312              		.file 5 "/Users/seojisu/Library/Arm-GCC-xPack/arm-none-eabi/include/sys/_stdint.h"
 9313              		.file 6 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h743xx.h"
 9314              		.file 7 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h7xx.h"
 9315              		.file 8 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 9316              		.file 9 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dma.h"
 9317              		.file 10 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc.h"
 9318              		.file 11 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/system_stm32h7xx.h"
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 397


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32h7xx_hal_adc.c
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:19     .text.LL_ADC_SetCommonClock:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:24     .text.LL_ADC_SetCommonClock:0000000000000000 LL_ADC_SetCommonClock
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:70     .text.LL_ADC_SetCommonPathInternalCh:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:75     .text.LL_ADC_SetCommonPathInternalCh:0000000000000000 LL_ADC_SetCommonPathInternalCh
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:120    .text.LL_ADC_GetCommonPathInternalCh:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:125    .text.LL_ADC_GetCommonPathInternalCh:0000000000000000 LL_ADC_GetCommonPathInternalCh
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:166    .text.LL_ADC_SetOffset:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:171    .text.LL_ADC_SetOffset:0000000000000000 LL_ADC_SetOffset
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:230    .text.LL_ADC_SetDataRightShift:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:235    .text.LL_ADC_SetDataRightShift:0000000000000000 LL_ADC_SetDataRightShift
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:284    .text.LL_ADC_SetOffsetSignedSaturation:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:289    .text.LL_ADC_SetOffsetSignedSaturation:0000000000000000 LL_ADC_SetOffsetSignedSaturation
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:346    .text.LL_ADC_REG_IsTriggerSourceSWStart:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:351    .text.LL_ADC_REG_IsTriggerSourceSWStart:0000000000000000 LL_ADC_REG_IsTriggerSourceSWStart
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:401    .text.LL_ADC_REG_SetSequencerRanks:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:406    .text.LL_ADC_REG_SetSequencerRanks:0000000000000000 LL_ADC_REG_SetSequencerRanks
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:473    .text.LL_ADC_REG_SetDataTransferMode:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:478    .text.LL_ADC_REG_SetDataTransferMode:0000000000000000 LL_ADC_REG_SetDataTransferMode
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:523    .text.LL_ADC_INJ_IsTriggerSourceSWStart:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:528    .text.LL_ADC_INJ_IsTriggerSourceSWStart:0000000000000000 LL_ADC_INJ_IsTriggerSourceSWStart
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:578    .text.LL_ADC_SetChannelSamplingTime:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:583    .text.LL_ADC_SetChannelSamplingTime:0000000000000000 LL_ADC_SetChannelSamplingTime
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:650    .text.LL_ADC_SetChannelSingleDiff:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:655    .text.LL_ADC_SetChannelSingleDiff:0000000000000000 LL_ADC_SetChannelSingleDiff
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:709    .text.LL_ADC_SetChannelSingleDiff:0000000000000044 $d
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:714    .text.LL_ADC_SetAnalogWDMonitChannels:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:719    .text.LL_ADC_SetAnalogWDMonitChannels:0000000000000000 LL_ADC_SetAnalogWDMonitChannels
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:788    .text.LL_ADC_SetAnalogWDMonitChannels:0000000000000058 $d
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:793    .text.LL_ADC_GetMultimode:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:798    .text.LL_ADC_GetMultimode:0000000000000000 LL_ADC_GetMultimode
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:839    .text.LL_ADC_GetMultiDMATransfer:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:844    .text.LL_ADC_GetMultiDMATransfer:0000000000000000 LL_ADC_GetMultiDMATransfer
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:885    .text.LL_ADC_DisableDeepPowerDown:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:890    .text.LL_ADC_DisableDeepPowerDown:0000000000000000 LL_ADC_DisableDeepPowerDown
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:932    .text.LL_ADC_DisableDeepPowerDown:0000000000000020 $d
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:937    .text.LL_ADC_IsDeepPowerDownEnabled:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:942    .text.LL_ADC_IsDeepPowerDownEnabled:0000000000000000 LL_ADC_IsDeepPowerDownEnabled
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:992    .text.LL_ADC_EnableInternalRegulator:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:997    .text.LL_ADC_EnableInternalRegulator:0000000000000000 LL_ADC_EnableInternalRegulator
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1040   .text.LL_ADC_EnableInternalRegulator:0000000000000024 $d
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1045   .text.LL_ADC_IsInternalRegulatorEnabled:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1050   .text.LL_ADC_IsInternalRegulatorEnabled:0000000000000000 LL_ADC_IsInternalRegulatorEnabled
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1100   .text.LL_ADC_Enable:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1105   .text.LL_ADC_Enable:0000000000000000 LL_ADC_Enable
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1148   .text.LL_ADC_Enable:0000000000000024 $d
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1153   .text.LL_ADC_Disable:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1158   .text.LL_ADC_Disable:0000000000000000 LL_ADC_Disable
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1201   .text.LL_ADC_Disable:0000000000000024 $d
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1206   .text.LL_ADC_IsEnabled:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1211   .text.LL_ADC_IsEnabled:0000000000000000 LL_ADC_IsEnabled
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1261   .text.LL_ADC_IsDisableOngoing:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1266   .text.LL_ADC_IsDisableOngoing:0000000000000000 LL_ADC_IsDisableOngoing
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1316   .text.LL_ADC_REG_StartConversion:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1321   .text.LL_ADC_REG_StartConversion:0000000000000000 LL_ADC_REG_StartConversion
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1364   .text.LL_ADC_REG_StartConversion:0000000000000024 $d
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 398


/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1369   .text.LL_ADC_REG_StopConversion:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1374   .text.LL_ADC_REG_StopConversion:0000000000000000 LL_ADC_REG_StopConversion
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1417   .text.LL_ADC_REG_StopConversion:0000000000000024 $d
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1422   .text.LL_ADC_REG_IsConversionOngoing:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1427   .text.LL_ADC_REG_IsConversionOngoing:0000000000000000 LL_ADC_REG_IsConversionOngoing
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1477   .text.LL_ADC_INJ_StopConversion:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1482   .text.LL_ADC_INJ_StopConversion:0000000000000000 LL_ADC_INJ_StopConversion
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1525   .text.LL_ADC_INJ_StopConversion:0000000000000024 $d
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1530   .text.LL_ADC_INJ_IsConversionOngoing:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1535   .text.LL_ADC_INJ_IsConversionOngoing:0000000000000000 LL_ADC_INJ_IsConversionOngoing
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1585   .text.LL_ADC_ClearFlag_AWD1:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1590   .text.LL_ADC_ClearFlag_AWD1:0000000000000000 LL_ADC_ClearFlag_AWD1
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1630   .text.LL_ADC_ClearFlag_AWD2:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1635   .text.LL_ADC_ClearFlag_AWD2:0000000000000000 LL_ADC_ClearFlag_AWD2
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1675   .text.LL_ADC_ClearFlag_AWD3:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1680   .text.LL_ADC_ClearFlag_AWD3:0000000000000000 LL_ADC_ClearFlag_AWD3
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1720   .text.LL_ADC_EnableIT_AWD1:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1725   .text.LL_ADC_EnableIT_AWD1:0000000000000000 LL_ADC_EnableIT_AWD1
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1767   .text.LL_ADC_EnableIT_AWD2:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1772   .text.LL_ADC_EnableIT_AWD2:0000000000000000 LL_ADC_EnableIT_AWD2
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1814   .text.LL_ADC_EnableIT_AWD3:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1819   .text.LL_ADC_EnableIT_AWD3:0000000000000000 LL_ADC_EnableIT_AWD3
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1861   .text.LL_ADC_DisableIT_AWD1:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1866   .text.LL_ADC_DisableIT_AWD1:0000000000000000 LL_ADC_DisableIT_AWD1
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1908   .text.LL_ADC_DisableIT_AWD2:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1913   .text.LL_ADC_DisableIT_AWD2:0000000000000000 LL_ADC_DisableIT_AWD2
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1955   .text.LL_ADC_DisableIT_AWD3:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:1960   .text.LL_ADC_DisableIT_AWD3:0000000000000000 LL_ADC_DisableIT_AWD3
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:2002   .text.HAL_ADC_Init:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:2008   .text.HAL_ADC_Init:0000000000000000 HAL_ADC_Init
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:2986   .text.HAL_ADC_MspInit:0000000000000000 HAL_ADC_MspInit
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:2438   .text.HAL_ADC_Init:0000000000000290 $d
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:2450   .text.HAL_ADC_Init:00000000000002b8 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:8993   .text.ADC_ConfigureBoostMode:0000000000000000 ADC_ConfigureBoostMode
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:2538   .text.HAL_ADC_DeInit:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:2544   .text.HAL_ADC_DeInit:0000000000000000 HAL_ADC_DeInit
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:8099   .text.ADC_ConversionStop:0000000000000000 ADC_ConversionStop
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:8579   .text.ADC_Disable:0000000000000000 ADC_Disable
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:2915   .text.HAL_ADC_DeInit:0000000000000294 $d
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:2928   .text.HAL_ADC_DeInit:00000000000002c0 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:3028   .text.HAL_ADC_MspDeInit:0000000000000000 HAL_ADC_MspDeInit
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:2974   .text.HAL_ADC_DeInit:00000000000002f8 $d
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:2980   .text.HAL_ADC_MspInit:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:3022   .text.HAL_ADC_MspDeInit:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:3064   .text.HAL_ADC_Start:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:3070   .text.HAL_ADC_Start:0000000000000000 HAL_ADC_Start
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:8375   .text.ADC_Enable:0000000000000000 ADC_Enable
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:3333   .text.HAL_ADC_Start:0000000000000180 $d
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:3342   .text.HAL_ADC_Stop:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:3348   .text.HAL_ADC_Stop:0000000000000000 HAL_ADC_Stop
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:3427   .text.HAL_ADC_Stop:0000000000000064 $d
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:3432   .text.HAL_ADC_PollForConversion:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:3438   .text.HAL_ADC_PollForConversion:0000000000000000 HAL_ADC_PollForConversion
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:3784   .text.HAL_ADC_PollForConversion:00000000000001d8 $d
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:3792   .text.HAL_ADC_PollForEvent:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:3798   .text.HAL_ADC_PollForEvent:0000000000000000 HAL_ADC_PollForEvent
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:4027   .text.HAL_ADC_Start_IT:0000000000000000 $t
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 399


/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:4033   .text.HAL_ADC_Start_IT:0000000000000000 HAL_ADC_Start_IT
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:4412   .text.HAL_ADC_Start_IT:0000000000000250 $d
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:4419   .text.HAL_ADC_Start_IT:0000000000000264 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:4449   .text.HAL_ADC_Stop_IT:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:4455   .text.HAL_ADC_Stop_IT:0000000000000000 HAL_ADC_Stop_IT
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:4542   .text.HAL_ADC_Stop_IT:0000000000000074 $d
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:4547   .text.HAL_ADC_Start_DMA:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:4553   .text.HAL_ADC_Start_DMA:0000000000000000 HAL_ADC_Start_DMA
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:4807   .text.HAL_ADC_Start_DMA:0000000000000168 $d
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:8727   .text.ADC_DMAConvCplt:0000000000000000 ADC_DMAConvCplt
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:8891   .text.ADC_DMAHalfConvCplt:0000000000000000 ADC_DMAHalfConvCplt
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:8936   .text.ADC_DMAError:0000000000000000 ADC_DMAError
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:4819   .text.HAL_ADC_Stop_DMA:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:4825   .text.HAL_ADC_Stop_DMA:0000000000000000 HAL_ADC_Stop_DMA
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:4957   .text.HAL_ADC_Stop_DMA:00000000000000c0 $d
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:4962   .text.HAL_ADC_GetValue:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:4968   .text.HAL_ADC_GetValue:0000000000000000 HAL_ADC_GetValue
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:5009   .text.HAL_ADC_IRQHandler:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:5015   .text.HAL_ADC_IRQHandler:0000000000000000 HAL_ADC_IRQHandler
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:5755   .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:5403   .text.HAL_ADC_IRQHandler:0000000000000240 $d
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:5409   .text.HAL_ADC_IRQHandler:0000000000000250 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:5839   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 HAL_ADC_LevelOutOfWindowCallback
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:5881   .text.HAL_ADC_ErrorCallback:0000000000000000 HAL_ADC_ErrorCallback
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:5741   .text.HAL_ADC_IRQHandler:0000000000000464 $d
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:5749   .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:5791   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:5797   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 HAL_ADC_ConvHalfCpltCallback
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:5833   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:5875   .text.HAL_ADC_ErrorCallback:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:5917   .text.HAL_ADC_ConfigChannel:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:5923   .text.HAL_ADC_ConfigChannel:0000000000000000 HAL_ADC_ConfigChannel
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:6337   .text.HAL_ADC_ConfigChannel:0000000000000290 $d
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:6341   .text.HAL_ADC_ConfigChannel:0000000000000298 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:7057   .text.HAL_ADC_ConfigChannel:0000000000000678 $d
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:7071   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:7077   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 HAL_ADC_AnalogWDGConfig
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:7462   .text.HAL_ADC_AnalogWDGConfig:00000000000002d4 $d
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:7470   .text.HAL_ADC_AnalogWDGConfig:00000000000002ec $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:7969   .text.HAL_ADC_AnalogWDGConfig:0000000000000614 $d
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:7973   .text.HAL_ADC_AnalogWDGConfig:000000000000061c $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:8003   .text.HAL_ADC_GetState:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:8009   .text.HAL_ADC_GetState:0000000000000000 HAL_ADC_GetState
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:8048   .text.HAL_ADC_GetError:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:8054   .text.HAL_ADC_GetError:0000000000000000 HAL_ADC_GetError
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:8093   .text.ADC_ConversionStop:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:8364   .text.ADC_ConversionStop:0000000000000174 $d
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:8369   .text.ADC_Enable:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:8564   .text.ADC_Enable:0000000000000100 $d
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:8573   .text.ADC_Disable:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:8721   .text.ADC_DMAConvCplt:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:8885   .text.ADC_DMAHalfConvCplt:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:8930   .text.ADC_DMAError:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:8987   .text.ADC_ConfigureBoostMode:0000000000000000 $t
/var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s:9298   .text.ADC_ConfigureBoostMode:00000000000001f4 $d

UNDEFINED SYMBOLS
ARM GAS  /var/folders/d0/cymppscj10lcmm48h781wrc80000gn/T//ccXKnoow.s 			page 400


HAL_GetREVID
SystemCoreClock
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_ADCEx_EndOfSamplingCallback
HAL_ADCEx_InjectedConvCpltCallback
HAL_ADCEx_LevelOutOfWindow2Callback
HAL_ADCEx_LevelOutOfWindow3Callback
HAL_ADCEx_InjectedQueueOverflowCallback
HAL_RCC_GetHCLKFreq
HAL_RCCEx_GetPeriphCLKFreq
